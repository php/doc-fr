<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqpoll.poll" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQPoll::poll</refname>
  <refpurpose>Sonde les éléments</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>int</type><methodname>ZMQPoll::poll</methodname>
   <methodparam><type>array</type><parameter role="reference">readable</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">writable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Sonde les éléments du poll courant. Les éléments accessibles en lecture et en écriture
   sont retournés respectivement dans les paramètres
   <parameter>readable</parameter> et <parameter>writable</parameter>.
   La méthode <function>ZMQPoll::getLastErrors</function> peut être utilisée pour vérifier
   s'il y a des erreurs.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>readable</parameter></term>
     <listitem>
      <para>
       Tableau contenant les ZMQSockets/flux PHP retournés, et accessible en lecture.
       Le tableau sera réinitialisé au début de l'opération.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>writable</parameter></term>
     <listitem>
      <para>
       Tableau contenant les ZMQSockets/flux PHP retournés, et accessible en écriture.
       Le tableau sera réinitialisé au début de l'opération.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Délai maximal d'attente de l'opération. -1 signifie que le poll va attendre
       qu'au moins un élément ne soit actif. Notez que depuis la version 1.0.0, le
       délai maximal d'attente du poll est défini en millisecondes, plutôt en
       microsecondes.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un entier représentant la quantité d'objets avec activité.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une <classname>ZMQPollException</classname> en cas d'erreur.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ZMQPoll</function></title>
    <para>
     Create a simple poll server
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Crée un socket, ainsi qu'un masque de réponse de la requête */
$context = new ZMQContext();
$server  = $context->getSocket(ZMQ::SOCKET_REP);

/* Lie le port 5555 sur 127.0.0.1 */
$server->bind("tcp://127.0.0.1:5555");

/* Crée un nouveau poll pour les messages entrants/sortants */
$poll = new ZMQPoll();

/* Ajout l'objet et écoute les entrées/sorties du poll */
$id = $poll->add($server, ZMQ::POLL_IN | ZMQ::POLL_OUT);
echo "Added object with id " . $id . "\n";

/* Initialise les tableaux accueillant les éléments en lecture et écriture */
$readable = array();
$writable = array();

while (true) {
   /* Nombre d'événements à récupérer */
   $events = 0;

   try {
       /* Bloc le Poll tant qu'il y a quelque chose à faire */
       $events = $poll->poll($readable, $writable, -1);
       $errors = $poll->getLastErrors();

       if (count($errors) > 0) {
           foreach ($errors as $error) {
               echo "Error polling object " . $error . "\n";
           }
       }
   } catch (ZMQPollException $e) {
       echo "poll failed: " . $e->getMessage() . "\n";
   }

   if ($events > 0) {
       /* Boucle sur les objets accessible en lecture et réceptionne les messages */
       foreach ($readable as $r) {
           try {
               echo "Received message: " . $r->recv() . "\n";
           } catch (ZMQException $e) {
               echo "recv failed: " . $e->getMessage() . "\n";
           }
       }

       /* Boucle sur les objets accessible en écriture et retourne les messages */
       foreach ($writable as $w) {
           try {
               $w->send("Got it!");
           } catch (ZMQException $e) {
               echo "send failed: " . $e->getMessage() . "\n";
           }
       }
   }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1> 

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
