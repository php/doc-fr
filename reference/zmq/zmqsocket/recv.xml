<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 976425d4f6eec32448be3cc22ec063015921b753 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqsocket.recv" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::recv</refname>
  <refpurpose>Recoit un message</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>ZMQSocket::recv</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Recoit un message du socket. Par défaut, la réception va être bloquante
   tant qu'un message est disponible, à moins que
   <constant>ZMQ::MODE_DONTWAIT</constant> ne soit utilisé.
   L'option <constant>ZMQ::SOCKOPT_RCVMORE</constant> du socket peut
   être utilisée pour recevoir des messages multipart.
   Voir <function>ZMQSocket::setSockOpt</function> pour plus d'informations.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Drapeaux de mode pour recevoir les messages multipart, ou rendre
       l'opération non-bloquante. Voir les constantes
       <constant>ZMQ::MODE_<replaceable>*</replaceable></constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le message. Si <constant>ZMQ::MODE_DONTWAIT</constant>
   est utilisé et que l'opération bloquerait &false; devrait être retourné.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une <classname>ZMQSocketException</classname> en cas d'erreur.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Un exemple d'envoi/réception</title>
    <para>
     Envoi et réception non bloquante
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Crée un nouvel objet de file ; il doit y avoir un serveur de l'autre côté */
$queue = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ);
$queue->connect("tcp://127.0.0.1:5555");

/* Assigne le socket 1 à la file, envoi et réceptionne */
$retries = 5;
$sending = true;

/* Démarre la boucle */
do {
    try {
        /* Tente un envoi/réception */
        if ($sending) {
            echo "Envoi du message\n";
            $queue->send("Ceci est un message", ZMQ::MODE_DONTWAIT);
            $sending = false;
        } else {
            echo "Réception de la réponse : " . $queue->recv(ZMQ::MODE_DONTWAIT) . "\n";
            break;
        }
    } catch (ZMQSocketException $e) {
        /* EAGAIN signifie que l'opération a bloqué ; nouvelle tentative */
        if ($e->getCode() === ZMQ::ERR_EAGAIN) {
            echo " - Réception de EAGAIN, nouvelle tentative ($retries)\n";
        } else {
            die(" - Erreur : " . $e->getMessage());
        }
    }
    /* On attend un peu entre les opérations */
    usleep(5);
} while (--$retries);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Envoi du message
 - Unable to execute operation, retrying (4)
Réception de la réponse : Ceci est un message
]]>
    </screen>    
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
