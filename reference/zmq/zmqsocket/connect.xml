<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqsocket.connect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::connect</refname>
  <refpurpose>Connecte le socket</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>ZMQSocket</type><methodname>ZMQSocket::connect</methodname>
   <methodparam><type>string</type><parameter>dsn</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>force</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Connecte le socket à un point final distant. Le point final est défini
   au format <literal>transport://address</literal> où le transport
   est une des valeurs suivantes : inproc, ipc, tcp, pgm ou epgm.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dsn</parameter></term>
     <listitem>
      <para>
       Le DSN de connexion, par exemple : <literal>transport://address</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>force</parameter></term>
     <listitem>
      <para>
       Tente de se connecter même si le socket est déjà connecté au
       point final fourni.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne l'objet courant.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une <classname>ZMQSocketException</classname> en cas d'erreur.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ZMQContext</function></title>
    <para>
     Construit un nouveau contexte et y alloue la requête du socket
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Nom d'hôte du serveur */
$dsn = "tcp://127.0.0.1:5555";

/* Crée un socket */
$socket = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ, 'my socket');

/* Récupère la liste des points finaux connectés */
$endpoints = $socket->getEndpoints();

/* Vérifie si le socket est connecté */
if (!in_array($dsn, $endpoints['connect'])) {
    echo "<p>Connecting to $dsn</p>";
    $socket->connect($dsn);
} else {
    echo "<p>Already connected to $dsn</p>";
}

/* Envoi et réception */
$socket->send("Hello!");
$message = $socket->recv();

echo "<p>Server said: {$message}</p>";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
