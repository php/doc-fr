<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqcontext.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQContext::__construct</refname>
  <refpurpose>Construit un nouvel objet ZMQContext</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>ZMQContext::__construct</methodname>
   <methodparam choice="opt"><type>int</type><parameter>io_threads</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_persistent</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Construit un nouveau contexte ZMQ. Le contexte est utilisé pour initialiser
   les sockets. Un contexte persistent est nécessaire pour initialiser des
   sockets persistants.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>io_threads</parameter></term>
     <listitem>
      <para>
       Nombre de io-threads dans le contexte.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_persistent</parameter></term>
     <listitem>
      <para>
       Si le contexte est persistent ou non. Un contexte persistent
       est stocké pour plusieurs requêtes, et est nécessaire pour les
       sockets persistents.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance <classname>ZMQContextException</classname> si le contexte d'initialisation échoue.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ZMQContext</function></title>
    <para>
     Construit un nouveau contexte et y alloue le socket de la requête.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Alloue un nouveau contexte */
$context = new ZMQContext();

/* Crée un nouveau socket */
$socket = $context->getSocket(ZMQ::SOCKET_REQ, 'my sock');

/* Connexion au socket */
$socket->connect("tcp://example.com:1234");

/* Envoi une requête */
$socket->send("Hello there");

/* Réception de la réponse */
$message = $socket->recv();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
