<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 976425d4f6eec32448be3cc22ec063015921b753 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqcontext.getsocket" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQContext::getSocket</refname>
  <refpurpose>Crée un nouveau socket</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>ZMQSocket</type><methodname>ZMQContext::getSocket</methodname>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>persistent_id</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>on_new_socket</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Raccourci pour créer de nouveaux sockets depuis le contexte. Si le contexte
   n'est pas persistent, le paramètre <parameter>persistent_id</parameter>
   sera ignoré, et le socket deviendra non persistent. Le paramètre
   <parameter>on_new_socket</parameter> ne sera appelé que si une nouvelle structure
   sous-jacente de socket est créée.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Une constante <constant>ZMQ::SOCKET_<replaceable>*</replaceable></constant> pour spécifier le type de socket.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent_id</parameter></term>
     <listitem>
      <para>
       Si <parameter>persistent_id</parameter> est spécifié, le socket sera persistent
       entre les différentes requêtes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>on_new_socket</parameter></term>
     <listitem>
      <para>
       Fonction de rappel, qui sera exécutée lorsqu'une nouvelle structure de socket est
       créée. Cette fonction ne sera pas appelée si la connexion sous-jacente persistante
       est ré-utilisée. La fonction de rappel prend deux arguments : ZMQSocket et persistent_id.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <classname>ZMQSocket</classname>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une <classname>ZMQSocketException</classname> en cas d'erreur.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ZMQContext</function></title>
    <para>
     Basic usage
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Alloue un nouveau contexte */
$context = new ZMQContext();

/* Crée un nouveau socket */
$socket = $context->getSocket(ZMQ::SOCKET_REQ, 'my sock');

/* COnnexion au socket */
$socket->connect("tcp://example.com:1234");

/* Envoi une requête */
$socket->send("Hello there");

/* Réception de la réponse */
$message = $socket->recv();
echo "Received message: {$message}\n";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
