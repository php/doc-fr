<?xml version='1.0' encoding='utf-8'?>
<!-- EN-Revision: 5beaad9885973652023784f1a4656a5e497779fb Maintainer: gui Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="phar.webphar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::webPhar</refname>
  <refpurpose>Redirige une requête depuis un navigateur web à un fichier interne dans l'archive phar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::webPhar</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>alias</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>index</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>fileNotFoundScript</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>mimeTypes</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>rewrite</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>Phar::webPhar</function> sert comme <function>Phar::mapPhar</function> pour les phars orientés web. Cette méthode parse
   <varname>$_SERVER['REQUEST_URI']</varname> et route les requêtes d'un navigateur vers un fichier
   interne à l'archive.
   Cela simule un serveur web, en routant des requêtes vers le bon
   fichier, en envoyant les bons en-têtes et analysant le fichier PHP comme il convient.
   Combinée avec <function>Phar::mungServer</function> et <function>Phar::interceptFileFuncs</function>,
   n'importe quelle application web peut être utilisée sans changement à partir de l'archive phar.
  </para>
  <para>
   <function>Phar::webPhar</function> doit être appelé uniquement à partir du conteneur de chargement
   d'une archive phar (lisez <link linkend="phar.fileformat.stub">ceci</link>
   pour en savoir davantage sur les conteneurs).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>alias</parameter></term>
     <listitem>
      <para>
       L'alias qui peut être utilisé dans l'URL 
       <literal>phar://</literal> pour se référer à
       l'archive, plutôt que son chemin complet.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       L'emplacement au sein de l'archive de l'index de répertoire.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fileNotFoundScript</parameter></term>
     <listitem>
      <para>
       L'emplacement du script à exécuter quand un fichier n'est pas trouvé. Ce
       script doit envoyer des en-têtes HTTP 404 corrects.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mimeTypes</parameter></term>
     <listitem>
      <para>
       Un tableau faisant correspondre des extensions de fichier supplémentaires à des types MIME.
       Si les correspondances par défaut suffisent, passez un tableau vide.
       Par défaut, ces correspondances sont les suivantes :
       <programlisting role="php">
        <![CDATA[
<?php
$mimes = array(
    'phps' => Phar::PHPS, // passage vers highlight_file()
    'c' => 'text/plain',
    'cc' => 'text/plain',
    'cpp' => 'text/plain',
    'c++' => 'text/plain',
    'dtd' => 'text/plain',
    'h' => 'text/plain',
    'log' => 'text/plain',
    'rng' => 'text/plain',
    'txt' => 'text/plain',
    'xsd' => 'text/plain',
    'php' => Phar::PHP, // parse en tant que PHP
    'inc' => Phar::PHP, // parse en tant que PHP
    'avi' => 'video/avi',
    'bmp' => 'image/bmp',
    'css' => 'text/css',
    'gif' => 'image/gif',
    'htm' => 'text/html',
    'html' => 'text/html',
    'htmls' => 'text/html',
    'ico' => 'image/x-ico',
    'jpe' => 'image/jpeg',
    'jpg' => 'image/jpeg',
    'jpeg' => 'image/jpeg',
    'js' => 'application/x-javascript',
    'midi' => 'audio/midi',
    'mid' => 'audio/midi',
    'mod' => 'audio/mod',
    'mov' => 'movie/quicktime',
    'mp3' => 'audio/mp3',
    'mpg' => 'video/mpeg',
    'mpeg' => 'video/mpeg',
    'pdf' => 'application/pdf',
    'png' => 'image/png',
    'swf' => 'application/shockwave-flash',
    'tif' => 'image/tiff',
    'tiff' => 'image/tiff',
    'wav' => 'audio/wav',
    'xbm' => 'image/xbm',
    'xml' => 'text/xml',
);
?>
        ]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rewrite</parameter></term>
     <listitem>
      <para>
       La fonction de ré-écriture est passée prend comme seul paramètre une chaîne
       et doit retourner une &string; ou &false;.
      </para>
      <para>
       Si vous utilisez fast-cgi ou cgi, le paramètre passé à la fonction est la valeur de la
       variable <varname>$_SERVER['PATH_INFO']</varname>. Sinon, le paramètre passé à la fonction
       est la valeur de la variable <varname>$_SERVER['REQUEST_URI']</varname>.
      </para>
      <para>
       Si une chaîne est retournée, elle sera utilisée dans le chemin interne du fichier.
       Si &false; est retourné, alors webPhar() enverra un code HTTP 403.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lève une exception <classname>PharException</classname> quand le fichier interne ne peut pas être
   ouvert ou si l'appel est fait en dehors d'un conteneur. Si une valeur de tableau non valide est passée dans
   <parameter>mimeTypes</parameter> ou si une fonction de rappel invalide est passée au paramètre
   <parameter>rewrite</parameter>, alors une exception <classname>UnexpectedValueException</classname>
   est levée.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>fileNotFoundScript</parameter> et <parameter>rewrite</parameter>
       sont désormais nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Phar::webPhar</function></title>
    <para>
     Dans l'exemple ci-dessous, le phar créé affichera <literal>Salut tout le monde</literal>
     si quelqu'un appelle <literal>/monphar.phar/index.php</literal> ou
     <literal>/monphar.phar</literal>, et affichera la source de 
     <literal>index.phps</literal> si <literal>/monphar.phar/index.phps</literal> est appelé.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// l'archive phar est créée :
try {
    $phar = new Phar('monphar.phar');
    $phar['index.php'] = '<?php echo "Salut tout le monde"; ?>';
    $phar['index.phps'] = '<?php echo "Salut tout le monde"; ?>';
    $phar->setStub('<?php
Phar::webPhar();
__HALT_COMPILER(); ?>');
} catch (Exception $e) {
    // on traite les erreurs ici
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::mungServer</function></member>
    <member><function>Phar::interceptFileFuncs</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
