<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="phar.construct">
 <refnamediv>
  <refname>Phar::__construct</refname>
  <refpurpose>Construit un objet d'archive Phar</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="Phar">
   <modifier>public</modifier> <methodname>Phar::__construct</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>alias</parameter><initializer>&null;</initializer></methodparam>
  </constructorsynopsis>
  
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Le chemin vers une archive Phar existante ou à créer.
       Le nom du fichier doit contenir l'extension .phar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Les drapeaux à passer à la classe parente <classname>RecursiveDirectoryIterator</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>alias</parameter></term>
     <listitem>
      <para>
       Alias avec lequel on doit faire référence à l'archive lors de l'appels aux fonctionnalités de flux.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lève une exception <classname>BadMethodCallException</classname>
   si la méthode est appelée deux fois, ou <classname>UnexpectedValueException</classname>
   si l'archive ne peut pas être ouverte.
  </para>
 </refsect1>
 
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un exemple avec <function>Phar::__construct</function></title>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
try {
    $p = new Phar('/path/to/my.phar', FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::KEY_AS_FILENAME,
                  'mon.phar');
} catch (UnexpectedValueException $e) {
    die('Ne peut pas ouvrir mon.phar');
} catch (BadMethodCallException $e) {
    echo 'techniquement, ça ne peut pas arriver';
}
// ça fonctionne maintenant
echo file_get_contents('phar://mon.phar/exemple.txt');
// et ça fonctionne comme si nous avions tapé
echo file_get_contents('phar:///chemin/vers/mon.phar/exemple.txt');
?>
      ]]>
     </programlisting>
    </para>
   </example>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
