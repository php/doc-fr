<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 54ff7bf8e0f8fa90988cccf6b583517366605f6d Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<appendix xml:id="array.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants.core;
 <para>
 <variablelist>
  <varlistentry xml:id="constant.case-lower">
   <term>
    <constant>CASE_LOWER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_LOWER</constant> est utilisée avec
     <function>array_change_key_case</function> et sert à convertir
     tous les index d'un tableau en minuscules. C'est aussi le comportement
     par défaut de <function>array_change_key_case</function>.
     En ce qui concerne PHP 8.2.0, seuls les caractéres ASCII seront convertis.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.case-upper">
   <term>
    <constant>CASE_UPPER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_UPPER</constant> est utilisée avec
     <function>array_change_key_case</function> et sert à convertir
     tous les index d'un tableau en majuscules.
     En ce qui concerne PHP 8.2.0, seuls les caractéres ASCII seront convertis.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para> Constantes d'ordre de tri :
 <variablelist>
  <varlistentry xml:id="constant.sort-asc">
   <term>
    <constant>SORT_ASC</constant>
    (<type>int</type>)
   </term>
     <listitem>
      <simpara>
       <constant>SORT_ASC</constant> est utilisée avec
       <function>array_multisort</function> pour trier en ordre ascendant.
      </simpara>
     </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-desc">
   <term>
    <constant>SORT_DESC</constant>
    (<type>int</type>)
   </term>
     <listitem>
      <simpara>
       <constant>SORT_DESC</constant> est utilisée avec
       <function>array_multisort</function> pour trier en ordre descendant.
      </simpara>
     </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para> Autres constantes d'ordre de tri :
 <variablelist>
  <varlistentry xml:id="constant.sort-regular">
   <term>
    <constant>SORT_REGULAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_REGULAR</constant> compare normalement les valeurs d'un tri.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-numeric">
   <term>
    <constant>SORT_NUMERIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NUMERIC</constant> compare numériquement les valeurs d'un tri.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-string">
   <term>
    <constant>SORT_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_STRING</constant> compare alphabétiquement les valeurs d'un tri.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-locale-string">
   <term>
    <constant>SORT_LOCALE_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_LOCALE_STRING</constant> est utilisé pour comparer
     alphabétiquement les valeurs d'un tri, en utilisant la locale courante.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-natural">
   <term>
    <constant>SORT_NATURAL</constant> 
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NATURAL</constant> est utilisé pour comparer
     les éléments comme des chaînes, en utilisant un "ordre naturel"
     comme le fait la fonction <function>natsort</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-flag-case">
   <term>
    <constant>SORT_FLAG_CASE</constant> 
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_FLAG_CASE</constant> peut être combiné 
     (avec l'opérateur bit OU) avec
     <constant>SORT_STRING</constant> ou
     <constant>SORT_NATURAL</constant> pour trier les chaînes
     en ne tenant pas compte de la casse.
     En ce qui concerne PHP 8.2.0, seule la conversion ASCII
     en fonction de la casse sera effectuée.
    </simpara>
   </listitem>
  </varlistentry>
  </variablelist>
 </para>

 <para> Drapeaux de filtre :
 <variablelist>
  <varlistentry xml:id="constant.array-filter-use-key">
   <term>
    <constant>ARRAY_FILTER_USE_KEY</constant> 
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_KEY</constant> est utilisé avec
     <function>array_filter</function> pour passer chaque clé comme premier
     argument à la fonction de rappel fournie.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.array-filter-use-both">
   <term>
    <constant>ARRAY_FILTER_USE_BOTH</constant> 
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_BOTH</constant> est utilisé avec
     <function>array_filter</function> pour passer la valeur et la clé à la
     fonction de rappel fournie.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
 <variablelist>
  <varlistentry xml:id="constant.count-normal">
   <term>
    <constant>COUNT_NORMAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.count-recursive">
   <term>
    <constant>COUNT_RECURSIVE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-overwrite">
   <term>
    <constant>EXTR_OVERWRITE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-skip">
   <term>
    <constant>EXTR_SKIP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-same">
   <term>
    <constant>EXTR_PREFIX_SAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-all">
   <term>
    <constant>EXTR_PREFIX_ALL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-invalid">
   <term>
    <constant>EXTR_PREFIX_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-if-exists">
   <term>
    <constant>EXTR_PREFIX_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-if-exists">
   <term>
    <constant>EXTR_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-refs">
   <term>
    <constant>EXTR_REFS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
