<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6712ff65342f3c87d03f90fa420782d37b9be58c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.preg-match-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match_all</refname>
  <refpurpose>Expression rationnelle globale</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>preg_match_all</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Analyse <parameter>subject</parameter> pour trouver l'expression
   <parameter>pattern</parameter> et met les résultats dans
   <parameter>matches</parameter>, dans l'ordre spécifié par
   <parameter>flags</parameter>.
  </para>
  <para>
   Après avoir trouvé un premier résultat, la recherche continue jusqu'à
   la fin de la chaîne.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Le masque à chercher, sous la forme d'une &string;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       Tableau contenant tous les résultats, dans un tableau multidimensionnel ordonné
       suivant le paramètre <parameter>flags</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Peut être une combinaison des valeurs suivantes
       (notez bien qu'il est incohérent d'utiliser
       <constant>PREG_PATTERN_ORDER</constant> avec
       <constant>PREG_SET_ORDER</constant> ) :
       <variablelist>
        <varlistentry>
         <term><constant>PREG_PATTERN_ORDER</constant></term>
         <listitem>
          <para>
           L'ordre est tel que <varname>$matches[0]</varname> est un tableau qui
           contient les résultats qui satisfont le masque
           complet, <varname>$matches[1]</varname> est un tableau qui contient les
           résultats qui satisfont la première
           parenthèse capturante, etc.
          </para>
          <para>
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>exemple : </b><div align=left>ceci est un test</div>",
    $out, PREG_PATTERN_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>exemple : </b>, <div align=left>ceci est un test</div>
exemple : , ceci est un test
]]>
            </screen>
            <para>
             Ainsi, <varname>$out[0]</varname> est un tableau qui contient les résultats qui
             satisfont le masque complet, et <varname>$out[1]</varname> est un tableau qui contient
             les balises entre &gt; et &lt;.
            </para>
           </informalexample>
          </para>
          <para>
           Si le masque contient des sous-masque nommés, <varname>$matches</varname>
           contiendra en plus des entrées qui auront pour clés les noms des sous-masques.
          </para>
          <para>
           Si le masque contient des sous-masques nommés en double, seul le sous-masque
           le plus à droite sera enregistré dans <varname>$matches[NAME]</varname>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all(
    '/(?J)(?<match>foo)|(?<match>bar)/',
    'foo bar',
    $matches,
    PREG_PATTERN_ORDER
);
print_r($matches['match']);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] => 
    [1] => bar
)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_SET_ORDER</constant></term>
         <listitem>
          <para>
           Les résultats sont classés de telle façon que <varname>$matches[0]</varname>
           contient la première série de résultats, <varname>$matches[1]</varname> contient
           la deuxième, etc.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>exemple : </b><div align=\"left\">ceci est un test</div>",
    $out, PREG_SET_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>exemple : </b>, exemple :
<div align="left">ceci est un test</div>, ceci est un test
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <para>
           Si ce drapeau est passé, toutes les sous-chaînes qui satisfont
           le masque seront aussi identifiées par leur offset (en octets).
           Notez que cela modifie la valeur de <parameter>matches</parameter> en
           un tableau de tableau où chaque élément est un tableau contenant 
           la sous-chaîne satisfaite à l'index <literal>0</literal> et l'index de
           celle-ci dans la chaîne <parameter>subject</parameter> à l'index <literal>1</literal>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => Array
                (
                    [0] => foobarbaz
                    [1] => 0
                )

        )

    [1] => Array
        (
            [0] => Array
                (
                    [0] => foo
                    [1] => 0
                )

        )

    [2] => Array
        (
            [0] => Array
                (
                    [0] => bar
                    [1] => 3
                )

        )

    [3] => Array
        (
            [0] => Array
                (
                    [0] => baz
                    [1] => 6
                )

        )

)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_UNMATCHED_AS_NULL</constant></term>
         <listitem>
          <para>
           Si ce drapeau est passé, les sous-masques non satisfait sont rapportés en tant que &null; ;
           sinon ils sont rapportés en tant que &string; vide.
          </para>
         </listitem>
        </varlistentry> 
       </variablelist>
      </para>
      <para>
       Si <parameter>order</parameter> est omis,
       <constant>PREG_PATTERN_ORDER</constant> est utilisé par défaut.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Normalement, la recherche commence au début de la chaîne 
       <parameter>subject</parameter>. Le paramètre optionnel
       <parameter>offset</parameter> peut être utilisé pour spécifier
       une position pour le début de la recherche (en octets).
      </para>
      <note>
       <para>
        Utiliser le paramètre <parameter>offset</parameter> ne revient pas
        à passer <code>substr($subject, $offset)</code> à 
        <function>preg_match_all</function> à la place de la chaîne 
        <parameter>subject</parameter>, car 
        <parameter>pattern</parameter> peut contenir des assertions comme
        <emphasis>^</emphasis>, <emphasis>$</emphasis> ou
        <emphasis>(?&lt;=x)</emphasis>. Lisez la documentation 
        sur la fonction <function>preg_match</function> pour des exemples.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le nombre de résultats qui satisfont le masque
   complet,&return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <constant>PREG_UNMATCHED_AS_NULL</constant> est maintenant supporté pour le
        paramètre <parameter>$flags</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Extraction de tous les numéros de téléphone d'un texte</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Call 555-1212 or 1-800-555-1212", $phones);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Recherche les couples de balises HTML (gourmand)</title>
    <programlisting role="php">
<![CDATA[
<?php
// Cet exemple utilise les références arrières (\\2).
// Elles indiquent à l'analyseur qu'il doit trouver quelque chose qu'il
// a déjà repéré un peu plus tôt
// le nombre 2 indique que c'est le deuxième jeu de parenthèses
// capturante qui doit être utilisé (ici, ([\w]+)).
// L'antislash est nécessaire ici, car la chaîne est entre guillemets doubles

$html = "<b>texte en gras</b><a href=howdy.html>cliquez moi</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*?)(<\/\\2>)/", $html, $matches, PREG_SET_ORDER);

foreach ($matches as $val) {
    echo "matched: " . $val[0] . "\n";
    echo "part 1: " . $val[1] . "\n";
    echo "part 2: " . $val[2] . "\n";
    echo "part 3: " . $val[3] . "\n";
    echo "part 4: " . $val[4] . "\n\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
matched: <b>texte en gras</b>
part 2: b
part 3: texte en gras
part 4: </b>

matched: <a href=howdy.html>cliquez moi</a>
part 1: <a href=howdy.html>
part 2: a
part 3: cliquez moi
part 4: </a>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation d'un sous-masque nommé</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = <<<FOO
a: 1
b: 2
c: 3
FOO;

preg_match_all('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* Alternative */
// preg_match_all('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => a: 1
            [1] => b: 2
            [2] => c: 3
        )

    [name] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [1] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [digit] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [2] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Masques PCRE</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_match</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
