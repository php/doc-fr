<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 11a49566970d661597de32aa3ef434e80d96804e Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="ref.pdo-cubrid" xmlns="http://docbook.org/ns/docbook"><?phpdoc extension-membership="pecl" ?>
 <title>Fonctions CUBRID (PDO_CUBRID)</title>
 <titleabbrev>CUBRID (PDO)</titleabbrev>
 <partintro>

  <section xml:id="pdo-cubrid.intro">&reftitle.intro;
  <para>
   PDO_CUBRID est un pilote qui implémente l'
   <link linkend="intro.pdo">interface PHP Data Objects (PDO)</link>
   pour permettre l'accès depuis PHP aux bases de données CUBRID.
  </para>
  <note><para>
    La version actuelle de PDO_CUBRID ne prend pas en charge la connexion persistante pour le moment.
  </para></note>
 </section>

 <!-- Informations trouvées dans configure.xml -->
 &reference.pdo-cubrid.configure;

 <section xml:id="ref.pdo-cubrid.features">
  <title>Fonctionnalités de PDO_CUBRID</title>

  <section>
   <title>Curseurs défilables</title>
   <simpara>
    PDO_CUBRID prend en charge les curseurs défilables. Le type de curseur par défaut est
    forward only, et vous pouvez utiliser le paramètre driver_options dans
    <methodname>PDO::prepare</methodname> pour changer le type de curseur.
   </simpara>
  </section>

  <section>
   <title>Délai d'expiration</title>
   <simpara>
    PDO_CUBRID prend en charge le paramétrage du délai d'exécution de l'instruction SQL ;
    Vous pouvez utiliser <methodname>PDO::setAttribute</methodname> pour définir la valeur du délai d'expiration.
   </simpara>
  </section>

  <section>
   <title>Mode autocommit et transaction</title>

   <simpara>
    PDO_CUBRID prend en charge à la fois le mode autocommit et la transaction, et
    le mode autocommit est activé par défaut. Vous pouvez utiliser
    <methodname>PDO::setAttribute</methodname> pour changer son état.
   </simpara>

   <simpara>
    Si vous utilisez <methodname>PDO::beginTransaction</methodname> pour commencer une
    transaction, cela désactivera automatiquement le mode autocommit et
    le restaurera après <methodname>PDO::commit</methodname> ou
    <methodname>PDO::rollBack</methodname>.
   </simpara>

   <note>
    <simpara>
     Avant de désactiver le mode autocommit,
     tout travail en attente est automatiquement validé.
    </simpara>
   </note>
  </section>

  <section>
   <title>Instructions SQL multiples</title>

   <simpara>
    PDO_CUBRID prend en charge les instructions SQL multiples.
    Les instructions SQL multiples sont séparées par des points-virgules (<literal>;</literal>).
   </simpara>
  </section>

  <section>
   <title>Informations sur le schéma</title>

   <simpara>
    PDO_CUBRID implémente <methodname>PDO::cubrid_schema</methodname>
    pour obtenir des informations sur le schéma.
   </simpara>
  </section>

  <section>
   <title>LOBs</title>

   <simpara>
    PDO_CUBRID prend en charge les types de données BLOB/CLOB. Le LOB dans PDO est
    représenté comme un flux, vous pouvez donc insérer des LOBs en liant un flux,
    et obtenir des LOBs en lisant un flux retourné par CUBRID PDO.
    Par exemple :
   </simpara>

   <example>
    <title>Insérer des LOBs dans CUBRID PDO</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('lob_test.png', 'rb');

$sql_stmt = "INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)";

$stmt = $dbh->prepare($sql_stmt);
$ret = $stmt->bindParam(1, $fp, PDO::PARAM_LOB);
$ret = $stmt->execute();
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Récupérer des LOBs dans CUBRID PDO</title>
    <programlisting role="php">
<![CDATA[
<?php
$sql_stmt = "SELECT content FROM lob_test WHERE name='lob_test.png'";

$stmt = $dbh->prepare($sql_stmt);
$stmt->execute();
$result = $stmt->fetch(PDO::FETCH_NUM);

header("Content-Type: image/png");
fpassthru($result[0]);
?>
]]>
    </programlisting>
   </example>
  </section>

  <section>
   <title>Méta-colonne</title>

   <para>
    La méthode <methodname>PDOStatement::getColumnMeta</methodname> dans CUBRID PDO
    renverra un tableau associatif contenant les valeurs suivantes :
    <simplelist>
     <member>type</member>
     <member>name</member>
     <member>table</member>
     <member>def</member>
     <member>precision</member>
     <member>scale</member>
     <member>not_null</member>
     <member>auto_increment</member>
     <member>unique_key</member>
     <member>multiple_key</member>
     <member>primary_key</member>
     <member>foreign_key</member>
     <member>reverse_index</member>
     <member>reverse_unique</member>
    </simplelist>
   </para>
  </section>
  <section>
   <title>Type de données Collection</title>

   <simpara>
    PDO_CUBRID prend en charge les types de données SET/MULTISET/SEQUENCE.
    Si vous ne spécifiez pas le type de données, le type de données par défaut est char.
    Par exemple :
   </simpara>

   <example>
    <title>Insérer un ensemble dans CUBRID PDO avec le type de données par défaut.</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl"); 
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(VARCHAR))");

$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array("abc","def","ghi");
$ret = $stmt->bindParam(1, $data, PDO::PARAM_NULL);
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
    </programlisting>
    </example>

    <example>
     <title>Spécifier le type de données lors de l'insertion d'un ensemble dans CUBRID PDO</title>
     <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl"); 
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(int))");
 
$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array(1,2,3,4);
$ret = $stmt->bindParam(1, $data, 0,0,"int");
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
     </programlisting>
    </example>

    <para>
     Types de données CUBRID Bind pour le cinquième paramètre de
     <methodname>PDOStatement::bindParam</methodname> :
     <simplelist>
      <member>CHAR</member>
      <member>STRING</member>
      <member>NCHAR</member>
      <member>VARNCHAR</member>
      <member>BIT</member>
      <member>VARBIT</member>
      <member>NUMERIC</member>
      <member>NUMBER</member>
      <member>INT</member>
      <member>SHORT</member>
      <member>BIGINT</member>
      <member>MONETARY</member>
      <member>FLOAT</member>
      <member>DOUBLE</member>
      <member>DATE</member>
      <member>TIME</member>
      <member>DATETIME</member>
      <member>TIMESTAMP</member>
     </simplelist>
    </para>
   </section>
  </section>

  <!-- Information found in constants.xml -->
  &reference.pdo-cubrid.constants;
  
 </partintro>
 
 <refentry xml:id="ref.pdo-cubrid.connection">
  <refnamediv>
   <refname>DSN PDO_CUBRID</refname>
   <refpurpose>Connexion aux bases de données CUBRID</refpurpose>
  </refnamediv>
  
  <refsect1 role="description">
   &reftitle.description;
   <para>
    Le DSN PDO_CUBRID est composé des éléments suivants, délimités par un point virgule :
    <variablelist>
     <varlistentry>
      <term>préfixe DSN</term>
      <listitem>
       <para>
        Le préfixe DSN est <userinput>cubrid:</userinput>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>host</literal></term>
      <listitem>
       <para>
        Le nom d'hôte sur lequel se trouve le serveur de base de données.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>port</literal></term>
      <listitem>
       <para>
        Le port sur lequel le serveur de base de données fonctionne.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>dbname</literal></term>
      <listitem>
       <para>
        Le nom de la base de données.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect1>
  
  <refsect1 role="notes">
   &reftitle.notes;
   <note>
    <para>
     Lorsque vous établissez la connexion à CUBRID, vous devez fournir le nom de
     l'utilisateur et le mot de passe, mais pas le DSN.
    </para>
   </note>
  </refsect1>
  
  <refsect1 role="examples">
   &reftitle.examples;
   <para>
    <example>
     <title>Exemples de DSN PDO_CUBRID</title>
     <para>
      L'exemple suivant montre un DSN PDO_CUBRID pour une connexion à une base de données CUBRID :
      <programlisting>
<![CDATA[
cubrid:host=localhost;port=33000;dbname=demodb
]]>
      </programlisting>
     </para>
    </example>
   </para>
  </refsect1>
 </refentry>
 
 &reference.pdo-cubrid.entities.PDO;
 
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
