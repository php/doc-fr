<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.define" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>define</refname>
  <refpurpose>Définit une constante</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>define</methodname>
   <methodparam><type>string</type><parameter>constant_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>case_insensitive</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Définit une constante à l'exécution.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>constant_name</parameter></term>
     <listitem>
      <para>
       Le nom de la constante.
      </para>
      <note>
       <para>
        Il est possible de définir avec <function>define</function> des constantes
        avec des noms réservés ou même invalide, où leur valeur peuvent (seulement)
        être récupéré avec la fonction <function>constant</function>.
        Cependant, faire ceci n'est pas recommandé.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       La valeur de la constante. En PHP 5, <parameter>value</parameter> doit 
       être une valeur <type>scalaire</type> (&integer;, &float;, &string;,
       &boolean;, ou &null;)
       En PHP 7, les valeurs &array; sont aussi autorisé.
       Il est techniquement possible de définir des constantes de type 
       &resource;, mais cela est fortement déconseillé, et 
       peut causer des comportements inattendus.
      </para>
      <warning>
       <para>
        Bien qu'il est techniquement possible de définir des constantes de type 
        &resource;, ceci est déconseillé et peut causer des comportements inattendus.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>case_insensitive</parameter></term>
     <listitem>
      <para>
       S'il vaut &true;, le nom de la constante sera insensible à la casse :
       <literal>CONSTANT</literal> et <literal>Constant</literal>
       représentent des valeurs identiques.
      </para>
      <warning>
       <simpara>
        Définir des constantes insensibles à la casse est obsolète à partir de PHP 7.3.0.
        À partir de PHP 8.0.0, seul &false; est une valeur acceptable,
        passer &true; produira un avertissement.
       </simpara>
      </warning>
      <note>
       <para>
        Les constantes insensibles à la casse sont stockées en minuscule.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Passer &true; à <parameter>case_insensitive</parameter> émet désormais une <constant>E_WARNING</constant>.
        Passer &false; est toujours autorisé.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        <parameter>case_insensitive</parameter> est obsolète et sera supprimée dans la version 8.0.0.
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Les valeurs <type>array</type> sont autorisées.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Définition d'une constante</title>
    <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Bonjour le monde.");
echo CONSTANT; // affiche "Bonjour le monde."
echo Constant; // affiche "Constant" et émet une alerte

define("GREETING", "Salut toi.", true);
echo GREETING; // affiche "Salut toi."
echo Greeting; // affiche "Salut toi."

// Fonctionne depuis PHP 7
define('ANIMALS', array(
    'chien',
    'chat',
    'oiseaux'
));
echo ANIMALS[1]; // affiche "chat"

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Constantes avec des Noms Réservés</title>
    <para>
     Cet exemple illustre la <emphasis>possibilité</emphasis> de définir une
     constante avec le même nom qu'une
     <link linkend="language.constants.predefined">constante magique</link>.
     Puisque le comportement qui en résout porte à confusion, cette pratique
     n'est pas recommandée.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(defined('__LINE__'));
var_dump(define('__LINE__', 'test'));
var_dump(constant('__LINE__'));
var_dump(__LINE__);
?>
]]>
    </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(true)
string(4) "test"
int(5)
]]>
   </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>defined</function></member>
    <member><function>constant</function></member>
    <member>La section sur les <link linkend="language.constants">constantes</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
