<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2aaaf1967f2510471b694daf8e41a419fc98b751 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.exit" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>exit</refname>
  <refpurpose>Terminer le script en cours avec un code d'état ou un message</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>never</type><methodname>exit</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type></type><parameter>status</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Termine le script courant.
   Les <link linkend="function.register-shutdown-function">fonctions d'extinction</link>
   et les <link linkend="language.oop5.decon.destructor">destructeurs d'objets</link>
   seront toujours exécutés même si <literal>exit</literal> est appelé.
   Cependant, les blocs &finally; ne sont jamais exécutés.
   </simpara>
   <simpara>
    Un code de sortie de <literal>0</literal> est utilisé pour indiquer que le programme a
    réussi ses tâches. Toute autre valeur indique qu'une erreur s'est produite
    lors de l'exécution.
   </simpara>
   <simpara>
    <function>exit</function> est une fonction spéciale,
    car elle dispose d'un jeton dédié dans l'analyseur syntaxique.
    Elle peut ainsi être utilisée comme une instruction (c'est-à-dire sans parenthèses)
    pour terminer le script avec le code de statut par défaut.
   </simpara>
   <caution>
    <simpara>
     Il n'est pas possible de désactiver ou de créer une fonction dans un espace de noms
     qui remplace la fonction globale <function>exit</function>.
    </simpara>
   </caution>
  </refsect1>

  <refsect1 role="parameters">
   &reftitle.parameters;
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <simpara>
       Si <parameter>status</parameter> est une chaîne de caractères,
       cette fonction affiche <parameter>status</parameter> juste avant de quitter.
       Le code de sortie retourné par PHP est <literal>0</literal>.
      </simpara>
      <para>
       Si <parameter>status</parameter> est un <type>int</type>,
       le code de sortie retourné par PHP sera <parameter>status</parameter>.
       <note>
        <simpara>
         Les codes de sortie doivent être compris entre <literal>0</literal> et <literal>254</literal>.
         Le code de sortie <literal>255</literal> est réservé par PHP et ne doit pas être utilisé.
        </simpara>
       </note>
      </para>
      <warning>
       <simpara>
        Avant PHP 8.4.0, <function>exit</function> ne respectait pas la
        <link linkend="language.types.type-juggling.function">logique habituelle de gestion des types</link>
        de PHP ni la déclaration
        <link linkend="language.types.declarations.strict"><literal>strict_types</literal></link>.
       </simpara>
       <simpara>
        Toute valeur non <type>int</type> était convertie en <type>string</type>,
        y compris les valeurs de type <type>resource</type> et <type>array</type>.
        À partir de PHP 8.4.0, la fonction suit la gestion standard des types et génère une
        <exceptionname>TypeError</exceptionname> pour les valeurs non valides.
       </simpara>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Comme cette fonction termine le script PHP, aucune valeur n'est retournée.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       <function>exit</function> est désormais une véritable fonction,
       elle suit donc la logique habituelle de
       <link linkend="language.types.type-juggling.function">gestion des types</link>,
       est affectée par la déclaration
       <link linkend="language.types.declarations.strict"><literal>strict_types</literal></link>,
       peut être appelée avec des arguments nommés et être utilisée
       comme une <link linkend="functions.variable-functions">fonction variable</link>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de base de la fonction <function>exit</function></title>
   <programlisting role="php">
<![CDATA[
<?php

// quitter le programme normalement
exit();
exit(0);

// quitter avec un code d'erreur
exit(1);

?>
]]>
</programlisting>
  </example>
  <example>
   <title>Exemple de <function>exit</function> avec un <type>string</type></title>
   <programlisting role="php">
<![CDATA[
<?php

$filename = '/path/to/data-file';
$file = fopen($filename, 'r')
    or exit("unable to open file ($filename)");
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple d'exécution des fonctions d'extinction et des
   destructeurs d'objets</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public function __destruct()
    {
        echo 'Destructeur : ' . __METHOD__ . '()' . PHP_EOL;
    }
}

function shutdown()
{
    echo 'Arrêt : ' . __FUNCTION__ . '()' . PHP_EOL;
}

$foo = new Foo();
register_shutdown_function('shutdown');

exit();
echo 'Ceci ne sera jamais affiché.';
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Arrêt : shutdown()
Destruction : Foo::__destruct()
]]>
   </screen>
  </example>
  <example>
   <title><function>exit</function> en tant qu'instruction</title>
   <programlisting role="php">
<![CDATA[
<?php

// quitter le programme normalement avec le code de sortie 0
exit;

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <simpara>
    À partir de PHP 8.4.0, <function>exit</function> était une construction du langage
    et non une fonction, il n'était donc pas possible de l'appeler en utilisant
    <link linkend="functions.variable-functions">des fonctions variables</link>,
    ou <link linkend="functions.named-arguments">des arguments nommés</link>.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>register_shutdown_function</function></member>
   <member><link linkend="function.register-shutdown-function">Shutdown functions</link></member>
   <member><link linkend="language.oop5.decon.destructor">object destructors</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
