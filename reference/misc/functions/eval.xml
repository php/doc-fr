<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 68308f0095c6ebf0d19afa72f2bac0a9f194e77d Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>Exécute une chaîne comme un script PHP</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Évalue le <parameter>code</parameter> fourni comme étant du code PHP.
  </para>
  <para>
   Le code en cours d'évaluation hérite de la
   <link linkend="language.variables.scope">portée des variables</link>
   de la ligne sur laquelle l'appel à <function>eval</function> a lieu.
   Toutes les variables disponibles à cette ligne seront accessibles en lecture et
   modification dans le code évalué.
   Cependant, toutes les fonctions et classes définies seront définies dans l'espace de noms global.
   En d'autres termes, le compilateur considère le code évalué comme s'il s'agissait d'un
   fichier <link linkend="function.include">inclus</link> séparé.
  </para>
  <caution>
   <para>
    La construction de langage <function>eval</function> est
    <emphasis>très dangereuse</emphasis> car elle autorise l'exécution
    de code PHP arbitraire. <emphasis>Son utilisation est vivement
    déconseillée.</emphasis> Si vous avez soigneusement vérifié qu'il
    n'y a pas d'autres options que de l'utiliser, gardez une attention
    toute particulière <emphasis>à ne pas y passer de données provenant
    d'un utilisateur</emphasis> sans les avoir précédemment validées
    minutieusement.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       Code PHP valide à évaluer.
      </para>
      <para>
       Le code ne doit pas être entouré de
       <link linkend="language.basic-syntax.phpmode">balises PHP</link>
       ouvrante et fermante, i.e. <literal>'echo "Hi!";'</literal>
       doit être passé au lieu de
       <literal>'&lt;?php echo "Hi!"; &gt;'</literal>.
       Il est toujours possible de quitter et de retourner en mode PHP
       en utilisant les balises PHP appropriées, i.e.
       <literal>'echo "En mode PHP !"; ?&gt;En mode HTML !&lt;?php echo "Retour en mode PHP !";'</literal>.
      </para>
      <para>
       Mis à part cela, le code PHP passé doit être valide. Ceci inclut que toutes les
       instructions doivent se terminer par un point-virgule.
       <literal>'echo "Hi!"'</literal> par exemple résultera en une erreur fatale, alors que
       <literal>'echo "Hi!";'</literal> fonctionnera.
      </para>
      <para>
       Une instruction <literal>return</literal> terminera immédiatement l'évaluation du code.
      </para>
      <para>
       Le code sera exécuté dans le scope du code appelant la fonction
       <function>eval</function>. Aussi, toutes les variables définies ou modifiées
       dans l'appel à la fonction <function>eval</function> resteront visibles après
       la fin de l'exécution de la fonction.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eval</function> retourne &null; sauf si
   <literal>return</literal> est appelé dans le code évalué,
   auquel cas la valeur passée à <literal>return</literal>
   est retournée. À partir de PHP 7, s'il y a une erreur de syntaxe dans
   le code évalué, <function>eval</function> lance une exception ParseError.
   Avant PHP 7, dans ce cas <function>eval</function> retourne &false;
   et l'exécution du code suivant continue normalement. Il
   n'est pas possible d'attraper l'erreur d'analyse de la
   fonction <function>eval</function> en utilisant la fonction
   <function>set_error_handler</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>eval</function> - concaténation de texte</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'tasse';
$name = 'café';
$str = 'Ceci est une $string avec mon $name dedans.<br />';
echo $str;
eval( "\$str = \"$str\";" );
echo $str;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Ceci est une $string avec mon $name dedans.
Ceci est une tasse avec mon café dedans.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &note.language-construct;

  &tip.ob-capture;
  <note>
   <para>
    Dans le cas d'une erreur fatale dans le code évalué, l'ensemble du script se
    terminera.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
