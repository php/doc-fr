<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5fabd07880ab15b0ad2cf7eb055c7c2b36d7120f Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.unpack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unpack</refname>
  <refpurpose>Déconditionne des données depuis une chaîne binaire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>unpack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Déconditionne les données <parameter>data</parameter>
   depuis une chaîne binaire avec le format <parameter>format</parameter>.
  </para>
  <para>
   Les données déconditionnées sont stockées dans un
   tableau. Pour cela, il faut donner un nom à chaque
   format utilisé et les séparer par des slash (/). Si
   un argument de répétition est présent, alors chacune des
   clés du tableau aura un numéro de séquence derrière le
   nom fourni.
  </para>
  <para>
   Des modifications ont été effectuées pour aligner le comportement
   de cette fonction avec Perl :
   <simplelist>
    <member>
     Le code "a" ne supprime plus les octets NULL finaux.
    </member>
    <member>
     Le code "A" supprime maintenant tous les espaces blancs ASCII finaux
     (espace, tabulation, nouvelles lignes, retour à la ligne, et octets NULL).
    </member>
    <member>
     Le code "Z" a été ajouté pour les chaînes complétées par des caractères
     NULL, et supprime les octets NULL finaux.
    </member>
   </simplelist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Voir la fonction <function>pack</function> pour une explication des codes de format.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Les données conditionnées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       La position où débuter le déconditionnement.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau associatif contenant les éléments déconditionnés
   d'une chaîne binaire, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Les types <type>float</type> et <type>double</type> supporte à la fois l'orientation Big Endian et Little Endian.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        La position <parameter>offset</parameter> optionnelle à été ajouté.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>unpack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = "\x04\x00\xa0\x00";
$array = unpack("cchars/nint", $binarydata);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [chars] => 4
    [int] => 160
)
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title>Exemple avec <function>unpack</function> et un argument de répétition</title>
    <programlisting role="php">
 <![CDATA[
 <?php
$binarydata = "\x04\x00\xa0\x00";
$array = unpack("c2chars/nint", $binarydata);
print_r($array);
?>
 ]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Array
(
    [chars1] => 4
    [chars2] => 0
    [int] => 40960
)
]]>
     </screen>
    </example>
   </para>
  </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Il faut noter que PHP gère les valeurs en interne
    sous forme signée. Si vous déconditionnez
    une valeur qui est aussi grande que la taille utilisée
    en interne par PHP, le résultat se trouvera être
    un nombre négatif, même s'il a été
    déconditionné avec l'option <literal>" non signé "</literal>.
   </para>
  </caution>
  <caution>
   <para>
    Si vous ne nommez pas un élément, les index numériques à partir de 
    <literal>1</literal> sont utilisés. Sachez que si vous avez plus d'un 
    élément sans nom, certaines données sont écrasées parce que la numérotation 
    redémarre à partir de <literal>1</literal> pour chaque élément.
   </para>
   <para>
    <example>
     <title>Exemple avec <function>unpack</function> avec des clés non nommées</title>
     <programlisting role="php">
<![CDATA[
<?php
$binarydata = "\x32\x42\x00\xa0";
$array = unpack("c2/n", $binarydata);
var_dump($array);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
array(2) {
  [1]=>
  int(160)
  [2]=>
  int(66)
}
]]>
     </screen>
     <para>
      Notez que la première
      valeur depuis le spécificateur <literal>c</literal> est écrasé
      par la première valeur depuis le spécificateur <literal>n</literal>.
     </para>
    </example>
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
