<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9a5b92a30888d6423db112f07a9b344cf6fc4891 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<!-- State: experimental -->
<book xml:id="book.parle" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="pecl" ?>
 <title>Analyse lexicale et syntaxique</title>
 <titleabbrev>Parle</titleabbrev>

 <preface xml:id="intro.parle">
  &reftitle.intro;
  <para>
   &warn.experimental;
   L'extension parle apporte des facilités de lexing et de parsing à usage général. L'implémentation est basée sur les bibliothèques de <link xlink:href="http://www.benhanson.net/">Ben Hanson</link> et nécessite un compilateur compatible avec <link xlink:href="http://en.cppreference.com/w/cpp/compiler_support">C++14</link>. L'analyse lexicale est basé sur la correspondance regex, l'analyse syntaxique est LALR(1). Les analyseurs sont générés à la volée et peuvent être utilisés immédiatement après avoir été finalisés. Parle traite l'analyse lexicale et syntaxique, la représentation et le traitement des structures de données appropriées sont la tâche de l'implémenteur. La sérialisation et la génération de code ne sont pas prises en charge par l'extension, pour l'instant.
  </para>
  <para>
   L'analyseur lexical est un processus de division d'une séquence de caractères en une liste de lexèmes. La liste de lexèmes peut ensuite être utilisée pour l'analyse syntaxique par rapport à une grammaire formelle. Ces opérations sont également connues sous le nom d'analyse lexicale (lexing) et d'analyse syntaxique (parsing). Cette documentation n'a pas pour but de fournir une information exhaustive sur le lexing et le parsing. De bonnes informations à ce sujet sont disponibles sur les nombreuses ressources sur le net. Plusieurs exemples d'utilisation sont inclus, pour montrer la fonctionnalité. L'extension est utile pour les développeurs PHP désireux d'apprendre ou d'utiliser l'analyse lexicale et syntaxique. Les machines à états et l'analyse de grammaire n'ont pas
  </para>
  <para>
   Les cas d'utilisation courants pour parle sont, quand un format de données est trop complexe pour être géré par la correspondance regex avec PCRE. L'application pratique est donc large. Que ce soit un format de données spécifique, une modification du comportement des fonctions existantes, voire un langage de programmation et au-delà. Les méthodes d'aide telles que <methodname>Parle\Lexer::dump</methodname> pour inspecter la machine à états générée, ou <methodname>Parle\Parser::dump</methodname> pour inspecter la grammaire générée, sont utiles. La méthode <methodname>Parle\Parser::trace</methodname> peut également être utilisée pour suivre l'opération d'analyse.
  </para>
 </preface>

 &reference.parle.setup;
 &reference.parle.constants;
 &reference.parle.pattern.matching;
 &reference.parle.examples;
 &reference.parle.parle.lexer;
 &reference.parle.parle.rlexer;
 &reference.parle.parle.parser;
 &reference.parle.parle.rparser;
 &reference.parle.parle.stack;
 &reference.parle.parle.token;
 &reference.parle.parle.errorinfo;
 &reference.parle.parle.lexerexception;
 &reference.parle.parle.parserexception;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
