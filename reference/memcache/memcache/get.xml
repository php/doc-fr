<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="memcache.get" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::get</refname>
  <refpurpose>Récupère un élément du serveur de cache</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>Memcache::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>array</type><methodname>Memcache::get</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>Memcache::get</function> retourne les données précédemment stockées
   dans l'élément identifié par la clé <parameter>key</parameter> s'il existe sur
   le serveur au moment de l'appel.
  </para>
  
  <para>
   Vous pouvez passer un tableau de clés à la fonction
   <function>Memcache::get</function> pour obtenir un tableau de valeurs. Le
   tableau résultant contiendra seulement les paires de clé-valeur trouvées.
  </para>
  
 </refsect1>
  
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clé ou le tableau de clés à récupérer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Si ce paramètre est présent, il représentera les drapeaux des valeurs
       à récupérer. Ces drapeaux sont les mêmes que ceux donnés en exemple de
       la fonction <function>Memcache::set</function>. L'octet le plus faible
       de la valeur est réservé à un usage interne de pecl/memcache
       (e.g. pour indiquer le statut de compression et de sérialisation).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la valeur associée avec le paramètre <parameter>key</parameter>
   ou un tableau contenant les paires clé/valeur trouvées lorsque le paramètre
   <parameter>key</parameter> est un &array;. Retourne &false; si une erreur
   survient, si le paramètre <parameter>key</parameter> n'est pas trouvé,
   ou si le paramètre <parameter>key</parameter> est un &array; vide.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::get</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API procédurale */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* API orientée objet */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/* 
Vous pouvez également utiliser un tableau de clés en tant que paramètre.
Si un tel élément n'est pas trouvé sur le serveur, le tableau
résultat ne comprendra simplement pas une telle clé.
*/

/* API procédurale */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* API Orientée Objet */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(Array('some_key', 'second_key'));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
