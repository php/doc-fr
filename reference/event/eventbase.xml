<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.eventbase" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe EventBase</title>
 <titleabbrev>EventBase</titleabbrev>
 <partintro>
<!-- {{{ EventBase intro -->
  <section xml:id="eventbase.intro">
   &reftitle.intro;
   <para>
    La classe <classname>EventBase</classname> représente la structure
    de base d'un événement libevent. Elle contient un jeu d'événements
    et peut vérifier quels sont les événements actifs.
   </para>
   <para>
    Chaque événement de base a une <emphasis>méthode</emphasis> ou un
    <emphasis>backend</emphasis> utilisé pour déterminer quels
    sont les événements prêts. Ces méthodes sont :
    <literal>select</literal>, <literal>poll</literal>, <literal>epoll</literal>,
    <literal>kqueue</literal>, <literal>devpoll</literal>, <literal>evport</literal>
    et <literal>win32</literal>.
   </para>
   <para>
    Pour configurer un événement de base à utiliser, ou éviter un backend spécifique,
    la classe <classname>EventConfig</classname> peut être utilisée.
   </para>
   <warning xml:id="eventbase.object-dtor-warning">
    <para>
     Ne <emphasis>détruisez pas</emphasis> l'objet <classname>EventBase</classname>
     tant que les ressources associées aux objets <literal>Event</literal>
     ne sont pas libérées. Sinon, cela mènera à des résultats totalement indéfinis !
    </para>
   </warning>
  </section>
<!-- }}} -->
  <section xml:id="eventbase.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBase</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>EventBase</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.loop-once">EventBase::LOOP_ONCE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.loop-nonblock">EventBase::LOOP_NONBLOCK</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.nolock">EventBase::NOLOCK</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.startup-iocp">EventBase::STARTUP_IOCP</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.no-cache-time">EventBase::NO_CACHE_TIME</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.epoll-use-changelist">EventBase::EPOLL_USE_CHANGELIST</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbase')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBase constants -->
  <section xml:id="eventbase.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbase.constants.loop-once">
     <term>
      <constant>EventBase::LOOP_ONCE</constant>
     </term>
     <listitem>
      <para>
       Drapeau utilisé avec la méthode <methodname>EventBase::loop</methodname>
       qui signifie : "blocage tant que libevent a un événement actif, puis,
       sortie une fois que tous les événements actifs ont exécuté leurs
       fonctions de rappel".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.loop-nonblock">
     <term>
      <constant>EventBase::LOOP_NONBLOCK</constant>
     </term>
     <listitem>
      <para>
       Drapeau utilisé avec la méthode <methodname>EventBase::loop</methodname>
       qui signifie : "ne pas bloquer : regarde quels sont les événements prêts actuellement,
       exécute leurs fonctions de rappel avec une priorité haute, puis, on sort".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.nolock">
     <term>
      <constant>EventBase::NOLOCK</constant>
     </term>
     <listitem>
      <para>
       Drapeau de configuration. Ne pas verrouiller la base de l'événement, même si
       un verrouillage avait été mis en place.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.startup-iocp">
     <term>
      <constant>EventBase::STARTUP_IOCP</constant>
     </term>
     <listitem>
      <para>
       Drapeau de configuration spécifique à Windows. Active le répartiteur IOCP
       au démarrage.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.no-cache-time">
     <term>
      <constant>EventBase::NO_CACHE_TIME</constant>
     </term>
     <listitem>
      <para>
       Drapeau de configuration. Au lieu de vérifier le temps courant chaque fois
       que la boucle d'événement est prête à exécuter la fonction de rappel,
       le temps sera vérifié a chaque fois que le délai maximal d'attente pour la
       fonction de rappel sera atteint.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.epoll-use-changelist">
     <term>
      <constant>EventBase::EPOLL_USE_CHANGELIST</constant>
     </term>
     <listitem>
      <para>
       Si vous utilisez le backend <literal>epoll</literal>, ce drapeau
       signifie qu'il est sécurisé d'utiliser le code interne de modification de liste
       interne à Libevent pour mettre en lot les ajouts et les suppressions afin
       de tenter de minimiser le plus possible le nombre d'appels système..
      </para>
      <para>
       Le fait de définir ce drapeau rend le code plus rapide, mais il peut
       se confronter à un bogue Linux : il n'est pas sécurisé d'utiliser ce drapeau
       en la présence d'un fds clôné par dup() ou une de ces variantes.
       Ceci produirait un comportement étrange et très difficile à diagnostiquer.
      </para>
      <para>
       Ce drapeau peut aussi être activé en définissant la variable d'environnement
       <literal>EVENT_EPOLL_USE_CHANGELIST</literal>.
      </para>
      <para>
       Ce drapeau n'a aucun effet si on l'utlise avec un autre backend que
       <literal>epoll</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbase;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
