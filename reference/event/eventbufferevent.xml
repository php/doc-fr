<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.eventbufferevent" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe EventBufferEvent</title>
 <titleabbrev>EventBufferEvent</titleabbrev>
 <partintro>
<!-- {{{ EventBufferEvent intro -->
  <section xml:id="eventbufferevent.intro">
   &reftitle.intro;
   <para>
    Représente un buffer d'événement Libevent.
   </para>
   <para>
    Habituellement, une application veut mettre en buffer des données en plus
    de juste répondre à des événements. Lorsque nous voulons écrire des données,
    par exemple, le mécanisme habituel ressemble à :
   </para>
   <orderedlist>
    <listitem>
     <para>
      On décide que l'on veut écrire des données dans une connexion ; placez
      ces données dans un buffer.
     </para>
    </listitem>
    <listitem>
     <para>
      On attend que la connexion devienne accessible en écriture
     </para>
    </listitem>
    <listitem>
     <para>
      On écrit autant de données que l'on peut
     </para>
    </listitem>
    <listitem>
     <para>
      On se souvient de la quantité écrite, et si on a encore plus de données
      à écrire, on attend que la connexion redevienne accessible en écriture.
     </para>
    </listitem>
   </orderedlist>
   <para>
    Ce mécanisme de mise en buffer I/O est suffisament commune pour que
    Libevent fournisse un mécanisme générique pour cela. Un buffer d'événement
    consiste en un transport sous-jacent (comme un socket), un buffer de
    lecture, et un buffer d'écriture. Au lieu d'un événement classique,
    qui fournit des fonctions de rappel lorsque le transport sous-jacent
    est prêt à être lu ou écrit, un buffer d'événement appelle ses fonctions
    de rappel fournis par l'utilisateur lorsqu'il a lu ou écrit suffisament
    de données.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="eventbufferevent.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBufferEvent</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>EventBufferEvent</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.reading">EventBufferEvent::READING</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.writing">EventBufferEvent::WRITING</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.eof">EventBufferEvent::EOF</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.error">EventBufferEvent::ERROR</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.timeout">EventBufferEvent::TIMEOUT</varname>
     <initializer>64</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.connected">EventBufferEvent::CONNECTED</varname>
     <initializer>128</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-close-on-free">EventBufferEvent::OPT_CLOSE_ON_FREE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-threadsafe">EventBufferEvent::OPT_THREADSAFE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-defer-callbacks">EventBufferEvent::OPT_DEFER_CALLBACKS</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-unlock-callbacks">EventBufferEvent::OPT_UNLOCK_CALLBACKS</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-open">EventBufferEvent::SSL_OPEN</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-connecting">EventBufferEvent::SSL_CONNECTING</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-accepting">EventBufferEvent::SSL_ACCEPTING</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.props.priority">priority</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>EventBuffer</type>
     <varname linkend="eventbufferevent.props.input">input</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>EventBuffer</type>
     <varname linkend="eventbufferevent.props.output">output</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbufferevent')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBufferEvent properties -->
  <section xml:id="eventbufferevent.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="eventbufferevent.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para>
       Descripteur de fichier numérique associé avec le buffer d'événement.
       Normalement, représent un socket lié. Vaut &null; s'il n'y a aucun
       descripteur de fichier (socket) associé avec le buffer d'événement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.priority">
     <term>
      <varname>priority</varname>
     </term>
     <listitem>
      <para>
       La priorité de l'événement, utilisée pour implémenter le buffer
       d'événement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.input">
     <term>
      <varname>input</varname>
     </term>
     <listitem>
      <para>
       Objet de buffer d'entrée sous-jacent (<classname>EventBuffer</classname>)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.output">
     <term>
      <varname>output</varname>
     </term>
     <listitem>
      <para>
       Objet de buffer de sortie sous-jacent (<classname>EventBuffer</classname>)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ EventBufferEvent constants -->
  <section xml:id="eventbufferevent.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbufferevent.constants.reading">
     <term>
      <constant>EventBufferEvent::READING</constant>
     </term>
     <listitem>
      <para>
       Un événement survient pendant l'opération de lecture sur le
       bufferevent. Voir les autres drapeaux pour connaître le type d'événement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.writing">
     <term>
      <constant>EventBufferEvent::WRITING</constant>
     </term>
     <listitem>
      <para>
       Un événement survient pendant une opération d'écriture sur le
       bufferevent. Voir les autres drapeaux pour connaître le type d'événement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.eof">
     <term>
      <constant>EventBufferEvent::EOF</constant>
     </term>
     <listitem>
      <para>
       On récupère une indication de fin de fichier sur le buffer d'événement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.error">
     <term>
      <constant>EventBufferEvent::ERROR</constant>
     </term>
     <listitem>
      <para>
       Une erreur survient pendant une opération bufferevent. Pour plus
       d'informations sur l'erreur, appelez la méthode
       <methodname>EventUtil::getLastSocketErrno</methodname> et/ou
       <methodname>EventUtil::getLastSocketError</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.timeout">
     <term>
      <constant>EventBufferEvent::TIMEOUT</constant>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.connected">
     <term>
      <constant>EventBufferEvent::CONNECTED</constant>
     </term>
     <listitem>
      <para>
       Termine une connexion demandée sur le bufferevent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-close-on-free">
     <term>
      <constant>EventBufferEvent::OPT_CLOSE_ON_FREE</constant>
     </term>
     <listitem>
      <para>
       Lorsque le buffer d'événement est libéré, ferme le transport
       sous-jacent. Ceci va clôre le socket sous-jacent, libérer le buffer
       d'événement sous-jacent, etc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-threadsafe">
     <term>
      <constant>EventBufferEvent::OPT_THREADSAFE</constant>
     </term>
     <listitem>
      <para>
       Alloue automatiquement des verrous pour le bufferevent, afin
       de rendre sécurisé l'utilisation de plusieurs threads.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-defer-callbacks">
     <term>
      <constant>EventBufferEvent::OPT_DEFER_CALLBACKS</constant>
     </term>
     <listitem>
      <para>
       Lorsque ce drapeau est défini, le bufferevent reporte toutes ses
       fonctions de rappel. Voir
       <link
      xlink:href="http://www.wangafu.net/~nickm/libevent-book/Ref6_bufferevent.html#_deferred_callbacks">
       la documentation sur la programmation réseau rapide, portable, non bloquante avec Libevent,
       le report des fonctions de rappel</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-unlock-callbacks">
     <term>
      <constant>EventBufferEvent::OPT_UNLOCK_CALLBACKS</constant>
     </term>
     <listitem>
      <para>
       Par défaut, lorsque le bufferevent est défini pour être sécurisé au niveau
       des threads, le verrou du buffer d'événement est maintenu, y compris si
       une fonction de rappel utilisateur est appelée. La définition de cette option
       permet à Libevent de libérer le verrou du buffer d'événement lorsque la fonction
       de rappel est appelée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-open">
     <term>
      <constant>EventBufferEvent::SSL_OPEN</constant>
     </term>
     <listitem>
      <para>
       La négociation SSL se fait
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-connecting">
     <term>
      <constant>EventBufferEvent::SSL_CONNECTING</constant>
     </term>
     <listitem>
      <para>
       SSL effectue actuellement la négociation comme client
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-accepting">
     <term>
      <constant>EventBufferEvent::SSL_ACCEPTING</constant>
     </term>
     <listitem>
      <para>
       SSL effectue actuellement la négociation comme serveur
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbufferevent;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
