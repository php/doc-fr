<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.event" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe Event</title>
 <titleabbrev>Event</titleabbrev>
 <partintro>
<!-- {{{ Event intro -->
  <section xml:id="event.intro">
   &reftitle.intro;
   <para>
    La classe <classname>Event</classname> représente et lance un événement
    sur un descripteur de fichier devenu prêt pour une lecture ou une écriture ;
    un descripteur de fichier devient prêt pour une lecture ou une écriture
    (I/O uniquement) ; un délai d'attente expiré ; un signal survenant ;
    un événement lancé par l'utilisateur.
   </para>
   <para>
    Chaque événement est associé avec un <classname>EventBase</classname>.
    Cependant, l'événement ne sera jamais lancé tant qu'il n'a pas été
    <emphasis>ajouté</emphasis> (via la méthode <methodname>Event::add</methodname>).
    Un événement ajouté reste dans un staut d'<emphasis>attente</emphasis>
    tant que l'événement enregistré ne survient pas, le passant ainsi en
    statut <emphasis>actif</emphasis>. Pour gérer les événements, l'utilisateur
    doit enregistrer une fonction de rappel qui sera appelée lorsque l'événement
    devient actif. Si l'événement est configuré comme <emphasis>persistent</emphasis>,
    il restera en attente. S'il n'est pas persistent, il ne sera plus en attente
    lorsque sa fonction de rappel sera exécutée. La méthode <methodname>Event::del</methodname>
    <emphasis>supprime</emphasis> l'événement, il n'est alors plus en attente.
    En appelant la méthode <methodname>Event::add</methodname>, il sera ajouté
    de nouveau.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="event.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>Event</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>Event</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.et">Event::ET</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.persist">Event::PERSIST</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.read">Event::READ</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.write">Event::WRITE</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.signal">Event::SIGNAL</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.timeout">Event::TIMEOUT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>bool</type>
     <varname linkend="event.props.pending">pending</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.event')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ Event properties -->
  <section xml:id="event.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="event.props.pending">
     <term>
      <varname>pending</varname>
     </term>
     <listitem>
      <para>
       Si l'événement est en attente. Voir la section :
       <link linkend="event.persistence">A propos de la persistence des événements</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ Event constants -->
  <section xml:id="event.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="event.constants.et">
     <term>
      <constant>Event::ET</constant>
     </term>
     <listitem>
      <para>
       Indique que l'événement doit être lancé, si la base d'événement
       sous-jacente supporte ce type d'événement. Ceci affecte la sémantique
       de <constant>Event::READ</constant> et de <constant>Event::WRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.persist">
     <term>
      <constant>Event::PERSIST</constant>
     </term>
     <listitem>
      <para>
       Indique que l'événement est persistent. Voir la section :
       <link linkend="event.persistence">A propos de la persistence des événements</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.read">
     <term>
      <constant>Event::READ</constant>
     </term>
     <listitem>
      <para>
       Ce drapeau indique qu'un événement devient actif lorsque le descripteur
       de fichier fourni (habituellement, une ressource de flux ou un socket)
       est prêt pour une lecture.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.write">
     <term>
      <constant>Event::WRITE</constant>
     </term>
     <listitem>
      <para>
       Ce drapeau indique qu'un événement devient actif lorsque le descripteur
       de fichier fourni (habituellement, une ressource de flux ou un socket)
       est prêt pour une écriture.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.signal">
     <term>
      <constant>Event::SIGNAL</constant>
     </term>
     <listitem>
      <para>
       Utilisé pour implémenter une détection de signal. Voir la section ci-dessous
       sur la construction d'un événement de type signal.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.timeout">
     <term>
      <constant>Event::TIMEOUT</constant>
     </term>
     <listitem>
      <para>
       Ce drapeau indique qu'un événement devient actif après l'expiration
       de ce délai d'attente maximal.
      </para>
      <para>
       Le drapeau <constant>Event::TIMEOUT</constant> est ignoré lors de la
       construction d'un événement : il peut être indiqué ou non lors de
       <emphasis>l'ajout</emphasis> de l'événement. Il doit être défini dans
       l'argument <literal>$what</literal> de la fonction de rappel
       lorsqu'un délai d'attente maximal est survenu.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.event;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
