<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mysqlnd-ms-xa-begin" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mysqlnd_ms_xa_begin</refname>
  <refpurpose>Démarre une transaction distribuée/XA sur les serveurs MySQL particpants</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type>
   <methodname>mysqlnd_ms_xa_begin</methodname>
   <methodparam><type>mixed</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>gtrid</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
  </methodsynopsis>
  <para>
   Démarre une transaction distribuée/XA sur les serveurs MySQL particpants.
   PECL/mysqlnd_ms agit comme un coordinateur de la transaction distribuée.
  </para>
  <para>
   Une fois qu'une transaction globale a commencé, le plugin injecte les requêtes
   SQL <literal>XA BEGIN</literal> appropriées sur tous les serveurs MySQL particpants.
   La transaction globale est soit terminée par un appel à la fonction
   <function>mysqlnd_ms_xa_commit</function>, ou la fonction <function>mysqlnd_ms_xa_rollback</function>
   soit, par une annulation implicite lorsqu'une erreur survient.
  </para>
  <para>
   Pendant une transaction globale, le plugin surveille tous les changements de
   serveurs, par exemple, lorsque l'on passe d'un serveur MySQL partagé à un autre.
   Si une requête est émise vers un serveur qui ne participe pas à la transaction
   globale, une requête <literal>XA BEGIN</literal> y sera exécutée avant la requête
   demandée. D'un point de vue utilisateur, l'injection intervient pendant un appel
   à une fonction d'exécution de requête, comme <function>mysqli_query</function>.
   Si l'injection échoue, l'erreur sera rapportée à l'appelant, soit la fonction
   d'exécution de la requête. Le serveur défaillant ne devient pas un participant
   de la transaction globale. L'utilisateur doit re-tenter la requête sur le serveur,
   et ainsi, re-tenter l'injection <literal>XA BEGIN</literal>, soit stopper la transaction
   globale car tous les serveurs voulus ne peuvent participer, soit ignorer et continuer
   l'action globale sans le serveur défaillant.
  </para>
  <para>
   Il existe plusieurs raisons dans l'échec d'une injection <literal>XA BEGIN</literal>
   comme un serveur qui ne peut être atteint, ou un serveur qui a une transaction XA
   concurrente qui utilise le même xid.
  </para>
  <para>
   Notez que les transactions globales et locales sont mutuellement exclusives.
   Vous ne pouvez pas démarrer une transaction XA lorsque vous avez une transaction
   locale en cours. La transaction locale doit d'abord être fermée. Le plugin
   tente de détecter ce conflit aussi vite que possible. Il va surveiller
   les appels APIs de contrôler des transactions locales afin d'en vérifier le statut.
   Cependant, si des requêtes SQL sont utilisées pour les transactions locales,
   comme <literal>BEGIN</literal>, le plugin peut ne pas connaître le statut courant
   et le conflit n'est pas détecté avant que l'injection <literal>XA BEGIN</literal>
   ne soit effectuée.
  </para>
  <para>
   L'utilisation de ressources XA différents des serveurs MySQL n'est pas
   supportée par cette fonction. Pour mener à bien une transaction globale
   entre, par exemple, un serveur MySQL et un autre système de base de données,
   vous devez réaliser vous même les commandates systèmes SQL.
  </para>
  <note>
   <title>Expérimental</title>
   <para>
    Cette fonctionnalité est actuellement en cours de développement. Il peut y
    avoir des bogues ou des limitations dans la fonctionnalité. Ne pas utiliser
    en environnement de production.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
    <varlistentry>
    <term><parameter>connection</parameter></term>
    <listitem>
     <para>
      Un gestion de connexion MySQL obtenu depuis une des fonctions
      de connexion des extensions <link linkend="ref.mysqli">mysqli</link>,
      <link linkend="ref.mysql">mysql</link> ou
      <link linkend="ref.pdo-mysql">PDO_MYSQL</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>gtrid</parameter></term>
    <listitem>
     <para>
      Identifiant de transaction globale (gtrid). Le gtrid est une chaîne
      binaire d'une longueur maximale de 64 octets.
      Notez que suivant le jeu de caractères que vous utilisez, 64 caractères
      peuvent nécessiter plus de 64 octets à stocker.
     </para>
     <para>
      Suivant la syntaxe MySQL SQL, les transactions XA utilisent des identifiants
      comportant 3 parties. Un xid est composé d'un identifiant de transaction globale
      (gtrid), un qualifieur de branche (bqual), et un identifiant de format (formatID).
      Seul l'identifiant de transaction globale peut et doit être défini.
     </para>
     <para>
      Le qualifieur de branche et l'identifiant de format sont définis
      automatiquement. Le détail dépend de l'implémentation choisie, et peut
      changer sans aucun avertissement. En version 1.6, le qualifieur de branche
      est un nombre consécutif, qui est incrémenté lorsqu'un participant rejoint
      la transaction globale.
     </para>
    </listitem>
   </varlistentry>
    <varlistentry>
    <term><parameter>timeout</parameter></term>
    <listitem>
     <para>
      Délai maximal d'attente, en secondes. La valeur par défaut est de
      60 secondes.
     </para>
     <para>
      Ce délai maximal d'attente est le point final du début du collecteur
      de données incorrectes. Si une transaction prend plus de temps que prévu,
      le collecteur de données incorrectes commence à vérifier le statut
      des transactions.
     </para>
     <para>
      Le fait de définir une valeur trop basse rend les vérifications du collecteur
      de données incorrectes trop fréquentes. Notez que la vérification des
      statuts d'une transaction globale signifie une connexion vers tous les
      participants enregistrés, et éventuellement, leur envoyer des requêtes.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
   <para>
    Retourne &true; s'il n'y a aucune transaction globale ou locale, et une nouvelle
    transaction globale peut être démarrée. Sinon, retourne &false;.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <link linkend="mysqlnd-ms.quickstart.xa_transactions">Démarrage rapide avec les transactions distribuées/XA</link>
    </member>
    <member>
     <link linkend="mysqlnd-ms.configuration">La configuration à l'exécution</link>
    </member>
    <member>
     <function>mysqlnd_ms_get_stats</function>
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
