<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14767af0f05dffa6fdb9b49e1a1f4e9ca7022a60 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.numberformatter" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe NumberFormatter</title>
 <titleabbrev>NumberFormatter</titleabbrev>

 <partintro>

  <!-- {{{ NumberFormatter intro -->
  <section xml:id="numberformatter.intro">
   &reftitle.intro;
   <simpara>
    Les programmes stockent et manipulent des nombres en utilisant une 
    représentation locale, binaire et indépendante. Lors de l'affichage
    d'un nombre, il est converti en une version particulière. Par exemple,
    un nombre tel que 12345.67 s'écrit "12,345.67" aux USA, 
    "12 345,67" en France et "12.345,67" en Allemagne.
   </simpara>
   <simpara>
    En appelant les méthodes fournies par <classname>NumberFormatter</classname>,
    vous pouvez formater les nombres, les montants de devises et les pourcentages,
    en fonctions des conventions locales. <classname>NumberFormatter</classname>
    prend en compte les conventions, ce qui fait que vous devez créer un nouvel
    objet <classname>NumberFormatter</classname>, pour chaque convention. Les 
    méthodes de <classname>NumberFormatter</classname>, formatent des types 
    primitifs comme des nombres décimaux, et produit une chaîne de caractères.
   </simpara>
   <para>
    Pour les monnaies, vous pouvez utiliser le format monétaire pour créer un
    formateur qui retourne une chaîne, avec le symbole de devise approprié.
    Bien entendu, <classname>NumberFormatter</classname> ne connait pas les
    taux de changes, ce qui fait que l'affichage sera fait, quelqu'en soit 
    la devise demandée. Cela signifie que le même nombre aura différentes valeurs
    monétaires en fonction de la configuration locale. Par exemple, le nombre
    9988776.65 s'affichera :
    <simplelist>
     <member>9 988 776,65 € en France</member>
     <member>9.988.776,65 € en Allemagne</member>
     <member>$9,988,776.65 aux USA</member>
    </simplelist>
   </para>
   <simpara>
    Pour formater des pourcentages, vous devez créer un formateur local,
    avec un type de format pourcentage. Avec ce formateur, une fraction 
    décimale telle que 0.75 sera affichée 75%.
   </simpara>
   <simpara>
    Pour des formatages plus complexes, comme des nombres écrits littéralement,
    des formateurs à règles sont utilisés.
   </simpara>
  </section>
  <!-- }}} -->

  <section xml:id="numberformatter.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>NumberFormatter</classname>
    </ooclass>

    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pattern-decimal">NumberFormatter::PATTERN_DECIMAL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.decimal">NumberFormatter::DECIMAL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.currency">NumberFormatter::CURRENCY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.percent">NumberFormatter::PERCENT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.scientific">NumberFormatter::SCIENTIFIC</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.spellout">NumberFormatter::SPELLOUT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.ordinal">NumberFormatter::ORDINAL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.duration">NumberFormatter::DURATION</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pattern-rulebased">NumberFormatter::PATTERN_RULEBASED</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.ignore">NumberFormatter::IGNORE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.currency-accounting">NumberFormatter::CURRENCY_ACCOUNTING</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.default-style">NumberFormatter::DEFAULT_STYLE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-ceiling">NumberFormatter::ROUND_CEILING</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-floor">NumberFormatter::ROUND_FLOOR</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-down">NumberFormatter::ROUND_DOWN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-up">NumberFormatter::ROUND_UP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-halfeven">NumberFormatter::ROUND_HALFEVEN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-halfdown">NumberFormatter::ROUND_HALFDOWN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.round-halfup">NumberFormatter::ROUND_HALFUP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pad-before-prefix">NumberFormatter::PAD_BEFORE_PREFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pad-after-prefix">NumberFormatter::PAD_AFTER_PREFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pad-before-suffix">NumberFormatter::PAD_BEFORE_SUFFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pad-after-suffix">NumberFormatter::PAD_AFTER_SUFFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.parse-int-only">NumberFormatter::PARSE_INT_ONLY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.grouping-used">NumberFormatter::GROUPING_USED</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.decimal-always-shown">NumberFormatter::DECIMAL_ALWAYS_SHOWN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.max-integer-digits">NumberFormatter::MAX_INTEGER_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.min-integer-digits">NumberFormatter::MIN_INTEGER_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.integer-digits">NumberFormatter::INTEGER_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.max-fraction-digits">NumberFormatter::MAX_FRACTION_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.min-fraction-digits">NumberFormatter::MIN_FRACTION_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.fraction-digits">NumberFormatter::FRACTION_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.multiplier">NumberFormatter::MULTIPLIER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.grouping-size">NumberFormatter::GROUPING_SIZE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.rounding-mode">NumberFormatter::ROUNDING_MODE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.rounding-increment">NumberFormatter::ROUNDING_INCREMENT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.format-width">NumberFormatter::FORMAT_WIDTH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.padding-position">NumberFormatter::PADDING_POSITION</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.secondary-grouping-size">NumberFormatter::SECONDARY_GROUPING_SIZE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.significant-digits-used">NumberFormatter::SIGNIFICANT_DIGITS_USED</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.min-significant-digits">NumberFormatter::MIN_SIGNIFICANT_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.max-significant-digits">NumberFormatter::MAX_SIGNIFICANT_DIGITS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.lenient-parse">NumberFormatter::LENIENT_PARSE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.positive-prefix">NumberFormatter::POSITIVE_PREFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.positive-suffix">NumberFormatter::POSITIVE_SUFFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.negative-prefix">NumberFormatter::NEGATIVE_PREFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.negative-suffix">NumberFormatter::NEGATIVE_SUFFIX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.padding-character">NumberFormatter::PADDING_CHARACTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.currency-code">NumberFormatter::CURRENCY_CODE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.default-ruleset">NumberFormatter::DEFAULT_RULESET</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.public-rulesets">NumberFormatter::PUBLIC_RULESETS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.decimal-separator-symbol">NumberFormatter::DECIMAL_SEPARATOR_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.grouping-separator-symbol">NumberFormatter::GROUPING_SEPARATOR_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pattern-separator-symbol">NumberFormatter::PATTERN_SEPARATOR_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.percent-symbol">NumberFormatter::PERCENT_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.zero-digit-symbol">NumberFormatter::ZERO_DIGIT_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.digit-symbol">NumberFormatter::DIGIT_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.minus-sign-symbol">NumberFormatter::MINUS_SIGN_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.plus-sign-symbol">NumberFormatter::PLUS_SIGN_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.currency-symbol">NumberFormatter::CURRENCY_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.intl-currency-symbol">NumberFormatter::INTL_CURRENCY_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.monetary-separator-symbol">NumberFormatter::MONETARY_SEPARATOR_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.exponential-symbol">NumberFormatter::EXPONENTIAL_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.permill-symbol">NumberFormatter::PERMILL_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.pad-escape-symbol">NumberFormatter::PAD_ESCAPE_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.infinity-symbol">NumberFormatter::INFINITY_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.nan-symbol">NumberFormatter::NAN_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.significant-digit-symbol">NumberFormatter::SIGNIFICANT_DIGIT_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.monetary-grouping-separator-symbol">NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.type-default">NumberFormatter::TYPE_DEFAULT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.type-int32">NumberFormatter::TYPE_INT32</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.type-int64">NumberFormatter::TYPE_INT64</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.type-double">NumberFormatter::TYPE_DOUBLE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="numberformatter.constants.type-currency">NumberFormatter::TYPE_CURRENCY</varname>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.numberformatter')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='NumberFormatter'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.numberformatter')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='NumberFormatter'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
   <!-- }}} -->

  </section>

  &reference.intl.numberformatter-constants;

  <section xml:id="numberformatter.seealso">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member>
      <link xlink:href="&url.icu.formatparse;">Documentation de formatage ICU</link>
     </member>
     <member>
      <link xlink:href="&url.icu.formatnumbers;">Formateurs de nombres ICU</link>
     </member>
     <member>
      <link xlink:href="&url.icu.decimalformat;">Formateur de nombres décimaux ICU</link>
     </member>
     <member>
      <link xlink:href="&url.icu.ruleformat;">Formateurs à règles de ICU</link>
     </member>
    </simplelist>
   </para>
  </section>
 </partintro>

 &reference.intl.entities.numberformatter;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
