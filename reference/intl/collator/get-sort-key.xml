<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bfc89e697fd685a7d15177f0b014eba70c5f9931 Maintainer: yannick Status: ready -->
<!--  Reviewed: no -->
<refentry xml:id="collator.getsortkey" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Collator::getSortKey</refname>
  <refname>collator_get_sort_key</refname>
  <refpurpose>R√©cup√®re la cl√© de tri pour une chaine</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>
   &style.oop;
  </para>
  <methodsynopsis role="Collator">
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>Collator::getSortKey</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   &style.procedural;
  </para>
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>collator_get_sort_key</methodname>
   <methodparam><type>Collator</type><parameter>object</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retourne la cl√© de la collation pour une cha√Æne.
   Les cl√©s de collation peuvent √™tre compar√©es directement au lieu de cha√Ænes,
   n√©anmoins elles sont sp√©cifique √† l'impl√©mentation et peuvent changer entre
   les versions de la biblioth√®que ICU. Les cl√©s de tries sont g√©n√©ralement
   seulement utile dans les bases de donn√©es ou autres circonstances o√π les
   appels de fonctions sont extr√™mement cher.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       Objet <classname>Collator</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaine depuis laquelle produire la cl√©.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>Retourne la cl√© de collation pour la cha√Æne, &return.falseforfailure;.</para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple <function>collator_get_sort_key</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$s1 = 'Hello';

$coll = collator_create('en_US');
$res  = collator_get_sort_key($coll, $s1);

echo bin2hex($res);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
     3832404046010901dc08
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>Collator::getSortKey</function> : exemple avec <function>usort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$data = [
    [ 'name' => 'üá≥üá± Derick Rethans', 'linked_account' => 'https://phpc.social/users/derickr' ],
    [ 'name' => 'Elephpant', 'linked_account' => 'https://phpc.social/phpc' ],
    [ 'name' => 'üá´üá∑ Marcus Bointon', 'linked_account' => 'https://phpc.social/users/Synchro' ],
];

/* Cr√©er le collateur */
$col = new Collator('en');

/* Trier les lettres majuscules avant les minuscules */
$col->setAttribute(Collator::CASE_FIRST, Collator::UPPER_FIRST);

/* Utiliser une fonction d√©finie par l'utilisateur avec sort, qui supprime les √©mojis */
 */
usort(
    $data,
    function($a, $b) use ($col) {
        /* Supprimer la classe de caract√®res 'S' (Symboles) et les espaces
         * (avec trim) */
        $aName = trim(preg_replace('/\p{S}+/u', '', $a['name']));
        $bName = trim(preg_replace('/\p{S}+/u', '', $b['name']));

								/* Cr√©er la cl√© de tri */
        $aKey = $col->getSortKey($aName);
        $bKey = $col->getSortKey($bName);

								/* Utiliser la cl√© de tri pour d√©terminer l'ordre des √©l√©ments */
        return $aKey <=> $bKey;
    }
);

var_dump($data);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
array(3) {
  [0] =>
  array(2) {
    'name' =>
    string(25) "üá≥üá± Derick Rethans"
    'linked_account' =>
    string(33) "https://phpc.social/users/derickr"
  }
  [1] =>
  array(2) {
    'name' =>
    string(9) "Elephpant"
    'linked_account' =>
    string(24) "https://phpc.social/phpc"
  }
  [2] =>
  array(2) {
    'name' =>
    string(25) "üá´üá∑ Marcus Bointon"
    'linked_account' =>
    string(33) "https://phpc.social/users/Synchro"
  }
}
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>collator_sort</function></member>
    <member><function>collator_sort_with_sort_keys</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
