<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1f68eecaa7c4c723abe72a5a040ea7b15023a5aa Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<reference xml:id="class.intlbreakiterator" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe IntlBreakIterator</title>
 <titleabbrev>IntlBreakIterator</titleabbrev>

 <partintro>

<!-- {{{ IntlBreakIterator intro -->
  <section xml:id="intlbreakiterator.intro">
   &reftitle.intro;
   <para>
    Un "délimiteur de rupture" est un objet ICU qui expose des méthodes pour
    localiser des délimitations dans du texte (par exemple, des délimitations
    de mots ou de phrases). La classe <classname>IntlBreakIterator</classname>
    de PHP sert de classe de base pour tous les types de délimiteurs de
    rupture ICU. Lorsqu'une fonctionnalité supplémentaire est disponible,
    l'extension intl peut exposer le délimiteur de rupture ICU avec des
    sous-classes appropriées, telles que
    <classname>IntlRuleBasedBreakIterator</classname> ou
    <classname>IntlCodePointBreakIterator</classname>.
   </para>
   <para>
    Cette classe implémente <interfacename>IteratorAggregate</interfacename>. Parcourir un
    <classname>IntlBreakIterator</classname> produit des valeurs entières non
    négatives représentant les emplacements successifs des délimitations de
    texte, exprimées en tant que comptes d'unités de code UTF-8 (octets),
    pris depuis le début du texte (qui a l'emplacement <literal>0</literal>). Les clés
    produites par l'itérateur forment simplement la séquence de nombres
    naturels <literal>{0, 1, 2, …}</literal>.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="intlbreakiterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>IntlBreakIterator</classname>
    </ooclass>

    <oointerface>
     <modifier>implements</modifier>
     <interfacename>IteratorAggregate</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.done">IntlBreakIterator::DONE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-none">IntlBreakIterator::WORD_NONE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-none-limit">IntlBreakIterator::WORD_NONE_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-number">IntlBreakIterator::WORD_NUMBER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-number-limit">IntlBreakIterator::WORD_NUMBER_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-letter">IntlBreakIterator::WORD_LETTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-letter-limit">IntlBreakIterator::WORD_LETTER_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-kana">IntlBreakIterator::WORD_KANA</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-kana-limit">IntlBreakIterator::WORD_KANA_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-ideo">IntlBreakIterator::WORD_IDEO</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.word-ideo-limit">IntlBreakIterator::WORD_IDEO_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.line-soft">IntlBreakIterator::LINE_SOFT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.line-soft-limit">IntlBreakIterator::LINE_SOFT_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.line-hard">IntlBreakIterator::LINE_HARD</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.line-hard-limit">IntlBreakIterator::LINE_HARD_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.sentence-term">IntlBreakIterator::SENTENCE_TERM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.sentence-term-limit">IntlBreakIterator::SENTENCE_TERM_LIMIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.sentence-sep">IntlBreakIterator::SENTENCE_SEP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="intlbreakiterator.constants.sentence-sep-limit">IntlBreakIterator::SENTENCE_SEP_LIMIT</varname>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.intlbreakiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='IntlBreakIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.intlbreakiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IntlBreakIterator'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

<!-- {{{ IntlBreakIterator constants -->
  <section xml:id="intlbreakiterator.constants">
   &reftitle.constants;
   <variablelist>

    <varlistentry xml:id="intlbreakiterator.constants.done">
     <term>
      <constant>IntlBreakIterator::DONE</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-none">
     <term>
      <constant>IntlBreakIterator::WORD_NONE</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-none-limit">
     <term>
      <constant>IntlBreakIterator::WORD_NONE_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-number">
     <term>
      <constant>IntlBreakIterator::WORD_NUMBER</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-number-limit">
      <term>
      <constant>IntlBreakIterator::WORD_NUMBER_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-letter">
     <term>
      <constant>IntlBreakIterator::WORD_LETTER</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-letter-limit">
     <term>
      <constant>IntlBreakIterator::WORD_LETTER_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-kana">
     <term>
      <constant>IntlBreakIterator::WORD_KANA</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-kana-limit">
     <term>
      <constant>IntlBreakIterator::WORD_KANA_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-ideo">
     <term>
      <constant>IntlBreakIterator::WORD_IDEO</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-ideo-limit">
     <term>
      <constant>IntlBreakIterator::WORD_IDEO_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-soft">
     <term>
      <constant>IntlBreakIterator::LINE_SOFT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-soft-limit">
     <term>
      <constant>IntlBreakIterator::LINE_SOFT_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-hard">
     <term>
      <constant>IntlBreakIterator::LINE_HARD</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-hard-limit">
     <term>
      <constant>IntlBreakIterator::LINE_HARD_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-term">
     <term>
      <constant>IntlBreakIterator::SENTENCE_TERM</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-term-limit">
     <term>
      <constant>IntlBreakIterator::SENTENCE_TERM_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-sep">
     <term>
      <constant>IntlBreakIterator::SENTENCE_SEP</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-sep-limit">
     <term>
      <constant>IntlBreakIterator::SENTENCE_SEP_LIMIT</constant>
      <type>int</type>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>

   </variablelist>
  </section>

  <section role="changelog">
   &reftitle.changelog;
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.4.0</entry>
       <entry>
        Les constantes de classe sont désormais typées.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <classname>IntlBreakIterator</classname> implémente
        désormais <interfacename>IteratorAggregate</interfacename>.
        Avant, <interfacename>Traversable</interfacename> était implémentée à la place.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </section>
<!-- }}} -->
 </partintro>

 &reference.intl.entities.intlbreakiterator;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
