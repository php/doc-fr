<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a414ee95eb79e2c62c80827a46e15da5d15af97e Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="bcmath-number.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>BcMath\Number::__construct</refname>
  <refpurpose>Créer un objet BcMath\Number</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="BcMath\\Number">
   <modifier>public</modifier> <methodname>BcMath\Number::__construct</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>num</parameter></methodparam>
  </constructorsynopsis>
  <simpara>
   Créer un objet <classname>BcMath\Number</classname> à partir d'une valeur <type>int</type> ou <type>string</type>.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>num</parameter></term>
    <listitem>
     <simpara>
      Une valeur <type>int</type> ou <type>string</type>.
      Si <parameter>num</parameter> est un <type>int</type>,
      la <property>BcMath\Number::scale</property> est toujours définie à <literal>0</literal>.
      Si <parameter>num</parameter> est un <type>string</type>, il doit être un nombre valide,
      et la <property>BcMath\Number::scale</property> est automatiquement définie en analysant la chaîne.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simpara>
   Cette méthode lève une <exceptionname>ValueError</exceptionname> si <parameter>num</parameter>
   si <type>string</type> et n'est pas une chaîne numérique BCMath bien formée.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <methodname>BcMath\Number::__construct</methodname></title>
   <programlisting role="php">
<![CDATA[
<?php
$num1 = new BcMath\Number(100);
$num2 = new BcMath\Number('-200');
$num3 = new BcMath\Number('300.00');

var_dump($num1, $num2, $num3);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(BcMath\Number)#1 (2) {
  ["value"]=>
  string(3) "100"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#2 (2) {
  ["value"]=>
  string(4) "-200"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(6) "300.00"
  ["scale"]=>
  int(2)
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>BcMath\Number::__serialize</methodname></member>
   <member><methodname>BcMath\Number::__unserialize</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
