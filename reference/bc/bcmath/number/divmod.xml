<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6fdd8cf867d2f815053cf710ec0be441c33ed675 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="bcmath-number.divmod" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>BcMath\Number::divmod</refname>
  <refpurpose>Renvoie le quotient et le modulo d'un nombre de précision arbitraire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="BcMath\\Number">
   <modifier>public</modifier> <type>array</type><methodname>BcMath\Number::divmod</methodname>
   <methodparam><type class="union"><type>BcMath\Number</type><type>string</type><type>int</type></type><parameter>num</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>scale</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Renvoie le quotient et le modulo de la division de <varname>$this</varname> par <parameter>num</parameter>.
  </simpara>
 </refsect1>

 <!-- parameters -->
 <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.div')/db:refsect1[@role='parameters'])" />

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Renvoie un <type>array</type> indexé où le premier élément est le quotient sous forme d'un nouvel objet
   <classname>BcMath\Number</classname> et le second élément est le modulo sous forme d'un nouvel objet
   <classname>BcMath\Number</classname>.
  </simpara>
  <simpara>
   Le quotient est toujours une valeur entière, donc <property>BcMath\Number::scale</property> du quotient sera
   toujours <literal>0</literal>, indépendamment de si <parameter>scale</parameter> est explicitement spécifié.
  </simpara>
  <simpara>
   Si <parameter>scale</parameter> est explicitement spécifié, <property>BcMath\Number::scale</property> du
   modulo sera la valeur spécifiée.
   Lorsque le <property>BcMath\Number::scale</property> de l'objet de modulo du résultat est défini automatiquement,
   le plus grand <property>BcMath\Number::scale</property> des deux nombres utilisés pour l'opération de modulo est utilisé.
  </simpara>
  <simpara>
   C'est-à-dire que si les <property>BcMath\Number::scale</property>s de deux valeurs sont <literal>2</literal>
   et <literal>5</literal> respectivement, le <property>BcMath\Number::scale</property> du modulo
   sera <literal>5</literal>.
  </simpara>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <!-- ValueError cases -->
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.add')/db:refsect1[@role='errors']/db:para[1])" />
  <!-- The DivisionByZeroError case -->
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.div')/db:refsect1[@role='errors']/db:simpara[1])" />
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <methodname>BcMath\Number::divmod</methodname> lorsque <parameter>scale</parameter> n'est pas spécifié</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '8.3 / 2.22' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8')->divmod(new BcMath\Number('2.22'));
var_dump($quot, $rem);

echo PHP_EOL . '8.3 / 8.3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8.3')->divmod('8.3');
var_dump($quot, $rem);

echo PHP_EOL . '10 / -3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('10')->divmod(-3);
var_dump($quot, $rem);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
8.3 / 2.22
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(1) "3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#4 (2) {
  ["value"]=>
  string(4) "1.34"
  ["scale"]=>
  int(2)
}

8.3 / 8.3
object(BcMath\Number)#2 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#5 (2) {
  ["value"]=>
  string(3) "0.0"
  ["scale"]=>
  int(1)
}

10 / -3
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(2) "-3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#1 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
]]>
   </screen>
  </example>

  <example>
   <title>Exemple de <methodname>BcMath\Number::divmod</methodname> an spécifiant <parameter>scale</parameter> explicitement</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '8.3 / 2.22' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8')->divmod(new BcMath\Number('2.22'), 1);
var_dump($quot, $rem);

echo PHP_EOL . '8.3 / 8.3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8.3')->divmod('8.3', 4);
var_dump($quot, $rem);

echo PHP_EOL . '10 / -3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('10')->divmod(-3, 5);
var_dump($quot, $rem);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
8.3 / 2.22
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(1) "3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#4 (2) {
  ["value"]=>
  string(3) "1.3"
  ["scale"]=>
  int(1)
}

8.3 / 8.3
object(BcMath\Number)#2 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#5 (2) {
  ["value"]=>
  string(6) "0.0000"
  ["scale"]=>
  int(4)
}

10 / -3
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(2) "-3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#1 (2) {
  ["value"]=>
  string(7) "1.00000"
  ["scale"]=>
  int(5)
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>bcdivmod</function></member>
   <member><methodname>BcMath\Number::div</methodname></member>
   <member><methodname>BcMath\Number::mod</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
