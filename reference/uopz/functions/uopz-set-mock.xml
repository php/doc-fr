<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0545e305cf06937b14b3f0694d6e716c9881ffd7 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.uopz-set-mock" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>uopz_set_mock</refname>
  <refpurpose>Utilise une simulation au lieu d'une classe pour de nouveaux objets</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>uopz_set_mock</methodname>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>mock</parameter></methodparam>
  </methodsynopsis>
  <para>
   Si <parameter>mock</parameter> est une chaîne contenant le nom d'une classe alors elle sera instanciée à la place de
   <parameter>class</parameter>. <parameter>mock</parameter> peut aussi être un objet.
  </para>
  <note>
   <para>
    Seul l'accès dynamique aux propriétés et méthodes utilisera l'objet <parameter>mock</parameter>.
    L'accès statique utilise toujours la <parameter>class</parameter> originale.
    Voir l'<link linkend="uopz_set_mock.example.static">exemple</link> ci-dessous.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>class</parameter></term>
    <listitem>
     <para>
      Le nom de la classe à simuler.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>mock</parameter></term>
    <listitem>
     <para>
      La simulation à utiliser sous forme de chaîne contenant le nom de la classe à utiliser ou un objet.
      Si une chaîne est passée, elle doit être le nom de la classe entièrement qualifié. Il est
      recommandé d'utiliser la constante magique <code>::class</code> dans ce cas.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>PECL uopz 6.0.0</entry>
      <entry>
       Simuler les membres statiques n'est plus supporté par cette fonction.
       <function>uopz_redefine</function> et <function>uopz_set_return</function>,
       ou <link linkend="book.componere">Componere</link> peuvent être utilisés à la place.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <function>uopz_set_mock</function></title>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function who() {
        echo "A";
    }
}

class mockA {
    public function who() {
        echo "mockA";
    }
}

uopz_set_mock(A::class, mockA::class);
(new A)->who();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
mockA
]]>
   </screen>
  </example>
  <example>
   <title>Exemple de <function>uopz_set_mock</function></title>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function who() {
        echo "A";
    }
}

uopz_set_mock(A::class, new class {
                            public function who() {
                                echo "mockA";
                            }
                        });
(new A)->who();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
mockA
]]>
   </screen>
  </example>
  <example xml:id="uopz_set_mock.example.static">
   <title><function>uopz_set_mock</function> et membres statiques</title>
   <para>
    Depuis uopz 6.0.0, la simulation des membres statiques n'est plus supportée.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    const CON = 'A';
    public static function who() {
        echo "A";
    }
}

uopz_set_mock(A::class, new class {
                            const CON = 'mockA';
                            public static function who() {
                                echo "mockA";
                            }
                        });
echo A::CON, PHP_EOL;
A::who();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
A
A
]]>
   </screen>
    <para>
     L'exemple ci-dessus affiche avec uopz 5:
    </para>
   <screen>
<![CDATA[
mockA
mockA
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>uopz_get_mock</function></member>
   <member><function>uopz_unset_mock</function></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
