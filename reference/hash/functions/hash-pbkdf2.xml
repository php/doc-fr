<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2ab45105b4302f7eed510a629226956ee0ab5be3 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="function.hash-pbkdf2">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Génère une clé PBKDF2 dérivée du mot de passe fourni</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Nom de l'algorithme de hachage sélectionné
       (i.e. <literal>md5</literal>, <literal>sha256</literal>,
       <literal>haval160,4</literal>, etc..).
       Voir la fonction <function>hash_algos</function> pour une liste
       des algorithmes supportés.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       Le mot de passe à utiliser pour la dérivation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Le salt à utiliser pour la dérivation. Cette valeur doit
       être générée aléatoirement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       Le nombre d'itérations internes pour effectuer la
       dérivation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longueur de la chaîne de sortie. Si le paramètre
       <parameter>binary</parameter> vaut &true;, ce paramètre
       correspondra à la longueur, en octets, de la clé dérivée ; si
       le paramètre <parameter>binary</parameter> vaut &false;,
       il correspondra à deux fois la longueur, en octets, de la clé
       dérivée (vu que chaque octet de la clé est retournée sur
       deux hexits).
      </para>
      <para>
       Si <literal>0</literal> est passé, la sortie complète de l'algorithme
       choisi sera utilisée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       Lorsque définit à &true;, la fonction affichera les données
       binaires brutes. Si vaut &false;, l'affichage se fera
       en minuscule.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Retourne une chaîne contenant la clé dérivée en minuscule,
   à moins que le paramètre <parameter>binary</parameter> ne
   soit positionné à &true; auquel cas, la représentation binaire brute
   de la clé dérivée sera retournée.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Une exception <classname>ValueError</classname> si 
   l'algorithme n'est pas connu, si le paramètre <parameter>iterations</parameter>
   est inférieur ou égal à <literal>0</literal>, si la longueur
   <parameter>length</parameter> est inférieure ou égale à <literal>0</literal>
   ou si le <parameter>salt</parameter> est trop long
   (plus grand que <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        L'utilisation de fonctions de hachage non cryptographiques (adler32, 
        crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat) a été désactivée.
       </entry>
      </row>
      <row>
      <entry>8.0.0</entry>
       <entry>
        Lève une exception <classname>ValueError</classname> dorénavant en
        cas d'erreur.
        Précédemment, &false; était retourne et un message
        <constant>E_WARNING</constant> était émis.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = "password";
$iterations = 1000;

// Génère un IV cryptographiquement securise aléatoire en utilisant la fonction random_bytes(),
$salt = random_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// Pour du binaire brute, $length doit être divisé par deux pour des résultats équivalent
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    La méthode PBKDF2 peut être utilisée pour hacher des mots de passe
    pour le stockage. Cependant, vous devez garder à l'esprit que
    la fonction <function>password_hash</function> ou la fonction
    <function>crypt</function> avec la constante <constant>CRYPT_BLOWFISH</constant>
    est meilleur pour cet usage.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>crypt</function></member>
    <member><function>password_hash</function></member>
    <member><function>hash</function></member>
    <member><function>hash_algos</function></member>
    <member><function>hash_init</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>hash_hmac_file</function></member>
    <member><function>openssl_pbkdf2</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
