<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4a5170086f67c5d4d9e9ae20bb4f727663356642 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<book xml:id="book.hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="core" ?>
 <title>HASH</title>
 <titleabbrev>Hash</titleabbrev>

 <!-- {{{ preface -->
 <preface xml:id="intro.hash">
  &reftitle.intro;
  <para>
   Cette extension fournit des fonctions qui peuvent être utilisées pour le traitement direct ou
   incrémental de messages de longueur arbitraire en utilisant une variété d'algorithmes de
   hachage, y compris la génération de valeurs <acronym>HMAC</acronym>
   et des dérivations de clés incluant <acronym>HKDF</acronym> et
   <acronym>PBKDF2</acronym>.
  </para>
  <para>
   Il existe grosso modo trois catégories d'algorithmes de hachage, et une liste complète des
   algorithmes peut être trouvée dans la documentation pour <function>hash_algos</function>.

   <itemizedlist>
    <listitem>
     <simpara>
      Algorithmes de somme de contrôle (tels que <literal>"crc32b"</literal> ou <literal>"adler32"</literal>) :
      Ceux-ci sont utilisés pour calculer des sommes de contrôle, utiles dans des situations telles que
      la détection des erreurs de transmission. Ils sont souvent très rapides. Ces
      algorithmes génèrent souvent des valeurs facilement "devinables" ou peuvent être manipulés
      pour créer des collisions, ils sont donc totalement inadaptés à une utilisation cryptographique.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algorithmes non cryptographiques (comme la famille xxHash) :
      Ceux-ci sont souvent utilisés pour calculer des valeurs de hachage pour des tables de hachage, car ils sont
      conçus pour produire une bonne distribution sur des entrées de chaîne arbitraires. Ils
      sont également généralement rapides, mais aussi inadaptés à une utilisation cryptographique.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algorithmes cryptographiques (comme la famille SHA-2) :
      Ceux-ci sont conçus pour produire des valeurs de hachage représentatives de leurs
      entrées mais ne pouvant pas être devinées ni sujettes aux collisions. La performance est souvent
      une préoccupation secondaire, mais le matériel moderne supporte souvent une gestion spéciale
      pour ces algorithmes que PHP essaie d'utiliser lorsque disponible.
     </simpara>
     <simpara>
      Le Centre de ressources pour la sécurité informatique du <acronym>NIST</acronym> a
      <link xlink:href="&url.hash.nist-hash-functions;">une explication des algorithmes
      actuellement approuvés par les Standards fédéraux de traitement de l'information des États-Unis</link>.
     </simpara>
     <caution>
      <para>
       Certains des premiers algorithmes cryptographiques, tels que <literal>"md4"</literal>,
       <literal>"md5"</literal>, et <literal>"sha1"</literal>, se sont avérés
       être sujets à des attaques par collision et il est généralement recommandé de ne plus
       les utiliser pour des applications cryptographiques.
      </para>
     </caution>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Voir également la <link linkend="faq.passwords">FAQ sur le hachage sécurisé des mots de passe</link>
   pour des informations sur les meilleures pratiques d'utilisation des fonctions de hachage dans la gestion
   des mots de passe.
  </para>

 </preface>
 <!-- }}} -->

 &reference.hash.setup;
 &reference.hash.constants;
 &reference.hash.hashcontext;
 &reference.hash.reference;

</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
