<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 72605fc9de80bd30f50b112e447326dfe6c2a523 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Analyse une URL et retourne ses composants</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>string</type><type>array</type><type>null</type><type>false</type></type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cette fonction analyse une URL et retourne un tableau associatif contenant
   tous les éléments qui y sont présents.
   Les valeurs des éléments du tableau <emphasis>NE sont PAS</emphasis> URL décodés
  </para>
  <para>
   Cette fonction n'est <emphasis role="strong">pas</emphasis>
   faite pour valider l'URL fournie, elle ne fait que la découper en parties listées
   ci-dessous. Les URL partielles et invalides sont également acceptées, la fonction
   <function>parse_url</function> fera de son mieux pour les analyser correctement.
  </para>
  <caution>
   <para>
    Cette fonction peut ne pas donner des résultats corrects pour les URLs
    relatives ou invalides et les résultats peuvent ne pas correspondre au
    comportement standard des clients HTTP.
    Si des URLs venant d'entré utilisateur doivent être analysé,
    des vérifications supplémentaires sont requises, par exemple en utilisant
    <function>filter_var</function> avec le filtre
    <constant>FILTER_VALIDATE_URL</constant>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       L'URL à analyser.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       Peut être une des constantes parmi <constant>PHP_URL_SCHEME</constant>,
       <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
       <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
       <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
       ou <constant>PHP_URL_FRAGMENT</constant> pour récupérer uniquement
       une partie de l'URL en tant que chaîne de caractères (sauf lorsque
       <constant>PHP_URL_PORT</constant> est fourni ; dans ce cas, la valeur retournée
       sera un &integer;).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Pour les URL vraiment mal formées, <function>parse_url</function> peut retourner
   &false;.
  </para>
  <para>
   Si le paramètre <parameter>component</parameter> est omis, un <type>array</type>
   associatif est retourné. Au moins un élément sera présent dans le tableau. Voici
   les clés potentielles de ce tableau:
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> - e.g. http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname> - après le point d'interrogation "<literal>?</literal>"
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> - après le croisillon (dièse) "<literal>#</literal>"
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Si le paramètre <parameter>component</parameter> est spécifié, <function>parse_url</function>
   retourne une <type>string</type> (ou un &integer; dans le cas d'utilisation de la
   constante <constant>PHP_URL_PORT</constant>)au lieu d'un <type>array</type>. Si le composant
   demandé n'existe pas dans l'URL, &null; sera retourné.
   À partir de PHP 8.0.0, <function>parse_url</function> distingue entre les
   fragments et requêtes absentes et vides :
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
http://example.com/foo → query = null, fragment = null
http://example.com/foo? → query = "",   fragment = null
http://example.com/foo# → query = null, fragment = ""
http://example.com/foo?# → query = "",   fragment = ""
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Précédemment tout les cas résultaient en la requête et le fragment étant &null;.
  </para>
  <para>
   À noter que les caractères de contrôle (cf. <function>ctype_cntrl</function>)
   dans les composants sont remplacés par un tiret du bas
   (<literal>_</literal>).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>parse_url</function> distingue désormais entre les fragments
       et requêtes absentes et vides.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>parse_url</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec la fonction <function>parse_url</function> sans schéma</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = '//www.example.com/path?googleguy=googley';

// Avant PHP 5.4.7, le chemin sera "//www.example.com/path"
var_dump(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>parse_url</function> a été créée tout spécialement pour analyser les URL
    et non les URI. Cependant, pour des raisons de compatibilité adjacente, PHP 
    fait une exception pour le schéma <literal>file://</literal> où les triples slashs
    (<literal>file:///</literal>...) sont autorisés. Tous les autres schémas sont invalides.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
