<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8d666e819852f6b0561b40fcf8689b747568865c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="evwatcher.keepalive" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvWatcher::keepalive</refname>
  <refpurpose>Garde la boucle active</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <type>bool</type>
   <methodname>EvWatcher::keepalive</methodname>
   <methodparam choice="opt">
    <type>bool</type>
    <parameter>value</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Garde la boucle active. Avec un paramètre <parameter>value</parameter>
   définit à &false;, le Watcher n'empêchera pas les méthodes
   <methodname>Ev::run</methodname>/<methodname>EvLoop::run</methodname>
   de s'arrêter même si le Watcher est actif.
  </para>
  <para>
   Les Watchers ont, par défaut, un paramètre
   <parameter>value</parameter> définit à &true;.
  </para>
  <para>
   Le fait de nettoyer le statut "keepalive" est utile lors d'un retour
   des méthodes <methodname>Ev::run</methodname>/<methodname>EvLoop::run</methodname>,
   auquel cas le Watcher n'est plus désiré. Ce peut être un Watcher socket UDP
   qui continue de fonctionner longtemps.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>value</parameter>
    </term>
    <listitem>
     <para>
      Si vaut &false;, le Watcher ne va pas empêcher les méthodes
      <methodname>Ev::run</methodname>/<methodname>EvLoop::run</methodname>
      de se terminer, même si le Watcher est actif.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le précédent statut.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Enregistre un Watcher I/O pour des sockets UDP</title>
   <programlisting role="php">
<![CDATA[
<?php
$udp_socket = ...
$udp_watcher = new EvIo($udp_socket, Ev::READ, function () { /* ... */ });
$udp_watcher->keepalive(FALSE);
?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
