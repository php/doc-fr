<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ev.recommendedbackends" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ev::recommendedBackends</refname>
  <refpurpose>Retourne un masque d'octets de backends recommandés
   pour la plateforme courante</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier>
   <modifier>public</modifier>
   <modifier>static</modifier>
   <type>int</type>
   <methodname>Ev::recommendedBackends</methodname>
   <void />
  </methodsynopsis>
  <para>
   Retourne un jeu de tous les backends compilés dans ce binaire de
   <literal>libev</literal>, et également recommandée pour cette
   plateforme, ce qui signifie qu'ils devraient fonctionner pour la
   plupart des types de descripteur de fichiers. Ce jeu est généralement
   plus petit que celui retourné par la fonction
   <function>ev_supported_backends</function>, sachant que, par exemple,
   <literal>kqueue</literal> est cassé sur les systèmes <literal>BSD</literal>
   et ne sera pas auto-détecté tant qu'il n'est pas requis explicitement.
   C'est le jeu de backends que <literal>libev</literal> utilisera
   lorsqu'aucun ne sera demandé explicitement.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un masque d'octets contenant les
   <link
  linkend="ev.constants.watcher-backends">drapeaux des backends</link>
   combinés en utilisant l'opérateur <emphasis>OR</emphasis>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>Encapsule une boucle dans une autre</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
* Tente de récupérer une boucle d'événement interne, et de l'encapsuler dans
* la boucle d'événement par défaut.
* Si c'est possible, utilisation de la boucle par défaut.
* La boucle par défaut est stockée dans $loop_hi, alors que la boucle interne
* est stockée dans $loop_lo( qui est $loop_hi dans ce cas car aucune boucle interne
* ne peut être utilisée).
*
* Exemple icci de :
* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
*/
$loop_hi = EvLoop::defaultLoop();
$loop_lo = NULL;
$embed   = NULL;

/*
* Regarde s'il y a une chance d'en récupérer une qui fonctionne
* (la valeur du drapeau à 0 signifie l'auto-détection)
*/
$loop_lo = Ev::embeddableBackends() & Ev::recommendedBackends()
 ? new EvLoop(Ev::embeddableBackends() & Ev::recommendedBackends())
 : 0;

if ($loop_lo) {
 $embed = new EvEmbed($loop_lo, function () {});
} else {
 $loop_lo = $loop_hi;
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <classname>EvEmbed</classname>
   </member>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
   <member>
    <methodname>Ev::supportedBackends</methodname>
   </member>
   <member>
    <link linkend="ev.constants.watcher-backends">Les drapeaux de Backend</link>
   </member>
   <member>
    <link linkend="ev.examples">Les exemples</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
