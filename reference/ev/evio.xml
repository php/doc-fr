<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 33e5f4ef7243bc1282acb1cba93e8f99c1debe68 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.evio" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe EvIo</title>
 <titleabbrev>EvIo</titleabbrev>
 <partintro>
<!-- {{{ EvIo intro -->
  <section xml:id="evio.intro">
   &reftitle.intro;
   <para>
    Les watchers <classname>EvIo</classname> vérifient si un descripteur
    de fichier (ou un socket, ou un flux pouvant être transtypé en descripteur
    de fichier numérique) est accessible en lecture ou en écriture à chaque
    itération de la boucle d'événements, ou, plus précisément, lorsque la
    lecture ne va pas bloquer le processus, et lorsque l'écriture va
    permettre d'écrire des données. Ce comportement est appelé
    <emphasis>niveau de lancement</emphasis> car les événements sont
    gardés tant que la condition persiste. Pour stopper la réception
    d'événements, stoppez seulement le watcher.
   </para>
   <para>
    Le nombre d'événements de lecture/écriture des watchers par
    <parameter>fd</parameter> est illimité. Le fait de définir tous les
    descripteurs de fichiers en mode non-bloquant est généralement
    une bonne idée (mais ce n'est pas requis).
   </para>
   <para>
    Une autre chose à savoir, c'est qu'il est très facile de recevoir
    de fausses notifications de système prêt à la lecture, i.e. la fonction
    de rappel peut être appelée avec <constant>Ev::READ</constant>
    mais une sous-séquence <emphasis>read()</emphasis> peut bloquer
    en raison du fait qu'il n'y a pas de données. Il est très simple
    de se retrouver dans cette situation. Aussi, il est recommandé de
    toujours utiliser des I/O non bloquants : un <emphasis>read()</emphasis>
    supplémentaire retournant <constant>EAGAIN</constant> (ou similaire)
    est plus préférable à un programme qui attend l'arrivée de données.
   </para>
   <para>
    Si pour une raison ou une autre, il est impossible d'exécuter le
    <parameter>fd</parameter> en mode non-bloquant, alors, séparément,
    re-testez si le descripteur de fichier est réellement prêt.
    Quelques utilisateurs utilisent en plus <constant>SIGALRM</constant>
    et un minuteur d'intervalle, juste pour s'assurer qu'aucun
    blocage infini ne soit présent.
   </para>
   <para>
    Il est recommandé de toujours utiliser le mode non bloquant.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evio.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIo</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIo</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.events">events</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvIo properties -->
  <section xml:id="evio.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evio.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evio.props.events">
     <term>
      <varname>events</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evio;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
