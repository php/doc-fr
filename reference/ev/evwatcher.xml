<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 33e5f4ef7243bc1282acb1cba93e8f99c1debe68 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.evwatcher" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe EvWatcher</title>
 <titleabbrev>EvWatcher</titleabbrev>
 <partintro>
<!-- {{{ EvWatcher intro -->
  <section xml:id="evwatcher.intro">
   &reftitle.intro;
   <para>
    La classe <classname>EvWatcher</classname> est une classe de base
    pour tous les watchers(<classname>EvCheck</classname>, <classname>EvChild</classname>
    etc.). Vu que le constructeur de la classe <classname>EvWatcher</classname>
    est <modifier>abstrait</modifier>, on ne peut pas
    (et on ne doit pas) créer des objets EvWatcher directement.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evwatcher.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvWatcher</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-active">is_active</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.data">data</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-pending">is_pending</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.priority">priority</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvWatcher properties -->
  <section xml:id="evwatcher.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evwatcher.props.is-active">
     <term>
      <varname>is_active</varname>
     </term>
     <listitem>
      <para>
       <emphasis>En lecture seule</emphasis>. &true; si le watcher est
       actif, &false; sinon.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.data">
     <term>
      <varname>data</varname>
     </term>
     <listitem>
      <para>
       Données utilisateur personnalisées associées avec le watcher
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.is-pending">
     <term>
      <varname>is_pending</varname>
     </term>
     <listitem>
      <para>
       <emphasis>En lecture seule</emphasis>. Si le watcher est en attente,
       i.e. si le watcher a des événements en attente, mais que sa fonction
       de rappel n'a pas encore été appelée, &false; sinon. Tant que le
       watcher est en attente (mais non actif), un autre <emphasis>ne peut pas</emphasis>
       modifier ses priorités.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.priority">
     <term>
      <varname>priority</varname>
     </term>
     <listitem>
      <para>
       &integer;
       Intervalle de <constant>Ev::MINPRI</constant> et <constant>Ev::MAXPRI</constant>.
       Les watchers en attente avec une priorité haute seront appelées
       avant les watchers avec une priorité basse, mais la priorité ne peut pas
       faire qu'un watcher ne sera jamais exécuté (sauf pour les watchers
       <classname>EvIdle</classname>).
       Les watchers <classname>EvIdle</classname> fournissent des fonctionnalités
       permettant de supprimer l'invocation lorsque des événements ayant une priorité
       plus élevée sont en attente.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evwatcher;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
