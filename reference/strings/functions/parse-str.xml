<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e35fbbaa52702ebf45c5e7284351e136ed67f3bb Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.parse-str" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_str</refname>
  <refpurpose>Analyse une chaîne de caractères d'une variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>parse_str</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">result</parameter></methodparam>
  </methodsynopsis>
  <para>
   Analyse la chaîne de caractères <parameter>string</parameter> comme s'il
   s'agissait des paramètres passés via l'URL. Toutes les variables
   qu'elle y repère sont alors créées, avec leurs valeurs respectives (ou
   dans le tableau si <parameter>result</parameter> est fourni).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       Si le second paramètre <parameter>result</parameter> est fourni,
       les variables y seront stockées, sous forme d'un tableau indexé.
      </para>
      <warning>
       <para>
        L'utilisation de cette fonction sans le paramètre <parameter>result</parameter> 
        est trés fortement <emphasis>découragé</emphasis> et <emphasis>déconseillé</emphasis> 
        à partir de PHP 7.2.
        À partir de PHP 8.0.0, le paramètre <parameter>result</parameter> est <emphasis>obligatoire</emphasis>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>result</parameter> n'est plus optionnel.
      </entry>
     </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        L'utilisation de <function>parse_str</function> sans le second argument 
        émet une note <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$str = "first=value&arr[]=foo+bar&arr[]=baz";

// Recommandé
parse_str($str, $output);
echo $output['first'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

// Déconseillé
parse_str($str);
echo $first;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>   
   Parce que les variables en PHP ne peuvent pas avoir des points et des 
   espaces dans leurs noms, ceux-ci sont convertis en soulignements. La même 
   chose s'applique à la dénomination des noms de clés respectifs en cas d'utilisation 
   de cette fonction avec le paramètre de <parameter>result</parameter> .
   <example>
    <title>Déformation des nom par <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
parse_str("My Value=Something");
echo $My_Value; // Something

parse_str("My Value=Something", $output);
echo $output['My_Value']; // Something
?>
]]>
    </programlisting>
   </example>
  </para> 
 </refsect1>
  <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <para>
    Toutes les variables créées (ou les valeurs retournées dans le tableau si le second paramètre est défini) sont déjà <function>urldecode</function>.
   </para>
  </note>
  <note>
   <para>
    Pour obtenir le <literal>QUERY_STRING</literal> actuel, vous pouvez utiliser 
    la variable <varname>$_SERVER['QUERY_STRING']</varname>. En outre, vous voudrez 
    peut-être lire la section sur les 
    <link linkend="language.variables.external"> variables de sources externes</link>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_url</function></member>
    <member><function>pathinfo</function></member>
    <member><function>http_build_query</function></member>
    <member><function>urldecode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
