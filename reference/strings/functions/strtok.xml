<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d335ba69a16f4013280de8e3e71d9ba19fe3cb3c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.strtok" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtok</refname>
  <refpurpose>Coupe une chaîne en segments</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <simpara>Signature alternative (non supporté avec les arguments nommés) :</simpara>
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>strtok</function> coupe la chaîne <parameter>string</parameter>
   en segments, chaque segment étant délimité par <parameter>token</parameter>.
   Par exemple, si vous avez une chaîne telle que
   <literal>"Voici un bon exemple"</literal>, vous pouvez en extraire les
   différents mots en utilisant l'espace comme <parameter>token</parameter>.
  </para>
  <para>
   Notez que seul le premier appel à <function>strtok</function> utilise
   l'argument <parameter>string</parameter>.
   Tous les appels ultérieurs à <function>strtok</function> nécessitent uniquement
   le <parameter>token</parameter> à utiliser, car elle sait où elle se situe
   dans la chaîne courante.
   Pour recommencer ou découper une nouvelle chaîne vous pouvez simplement
   appeler <function>strtok</function> avec le paramètre <parameter>string</parameter>
   de nouveau pour l'initialiser. Il est à noter qu'il est possible de mettre
   plusieurs tokens dans le paramètre <parameter>token</parameter>.
   La chaîne <parameter>string</parameter> sera découpée dès que l'un des
   caractères de l'argument <parameter>token</parameter> est trouvé.
  </para>
  <note>
   <para>
    Cette fonction ce comporte de manière légèrement différente de ce qu'on
    peut s'attendre étant familier avec <function>explode</function>.
    Premièrement, une séquence de deux ou plus <parameter>token</parameter>
    caractères contigu dans la chaîne analysé est considéré comme un unique
    délimiteur.
    De plus, un <parameter>token</parameter> situé au début ou à la fin de la
    chaîne est ignoré.
    Par exemple, si la chaîne <literal>";aaa;;bbb;"</literal> est utilisé,
    les appels successif à <function>strtok</function> avec
    <literal>";"</literal> en tant que <parameter>token</parameter> retournera
    les chaînes "aaa" et "bbb", et puis &false;.
    Par conséquent, la chaîne sera juste séparé en deux éléments, tandis que
    <literal>explode(";", $string)</literal> retournerait un tableau de 5 éléments.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne à découper en plusieurs chaînes de tailles plus petites (tokens).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>token</parameter></term>
     <listitem>
      <para>
       Le délimiteur utilisé pour découper <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Une <type>string</type> coupée, ou &false; si plus aucun token n'est disponible.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>strtok</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
// Utilisez aussi les nouvelles lignes et les tabulations 
// comme séparateur de mots
$tok = strtok($string, " \n\t");

while ($tok !== false) {
    echo "Word=$tok<br />";
    $tok = strtok(" \n\t");
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Comportement de <function>strtok</function> sur une partie vide trouvée</title>
    <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
    string(9) "something"
    bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>La différence entre <function>strtok</function> et <function>explode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = ";aaa;;bbb;";

$parts = [];
$tok = strtok($string, ";");
while ($tok !== false) {
    $parts[] = $tok;
    $tok = strtok(";");
}
echo json_encode($parts),"\n";

$parts = explode(";", $string);
echo json_encode($parts),"\n";
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
["aaa","bbb"]
["","aaa","","bbb",""]
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &return.falseproblem;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>explode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
