<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 60b29fbe11384d5233398d70fdc74e9078fe32ad Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.crypt">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Hachage à sens unique (indéchiffrable)</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  &note.not-bin-safe;
 </refsynopsisdiv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> retournera une chaîne haché utilisant l'algorithme
   standard d'Unix basé sur <abbrev>DES</abbrev>, ou un algorithme alternatif.
   La fonction <function>password_verify</function> est compatible avec la fonction
   <function>crypt</function>. Ainsi, un mot de passe haché par la fonction
   <function>crypt</function> peut être utilisé avec la fonction
   <function>password_verify</function>.
  </para>
  <para>
   Antérieur à PHP 8.0.0, le paramètre <parameter>salt</parameter> était optionnel.
   Cependant, <function>crypt</function> crée un hash faible sans le
   <parameter>salt</parameter>, et lève une erreur <constant>E_NOTICE</constant>
   sans celui-ci.
   Assurez-vous de spécifier un salt assez solide pour une meilleure sécurité.
  </para>
  <para>
   <function>password_hash</function> utilise un hash fort, génère
   un salt fort, et applique le tout automatiquement.
   <function>password_hash</function> est seulement un gestionnaire
   de <function>crypt</function> et est compatible avec les mots de
   passe hachés existants. L'utilisation de la fonction
   <function>password_hash</function> est fortement encouragée.
  </para>
  <para>
   Le type de hash est déclenché par l'argument <parameter>salt</parameter>.
   Si aucun <parameter>salt</parameter>
   n'est fourni, PHP va en générer deux caractères (DES), à moins que le
   système par défaut soit MD5, auquel cas un <parameter>salt</parameter>
   compatible MD5 sera généré. PHP définit une constante appelée
   <constant>CRYPT_SALT_LENGTH</constant> permettant de vous indiquer la longueur
   du <parameter>salt</parameter> disponible pour le système de hachage utilisé.
  </para>
  <para>
   <function>crypt</function>, lorsqu'elle est utilisée avec
   le chiffrement standard DES, retourne le <parameter>salt</parameter>
   dans les deux premiers caractères de la chaîne retournée. Elle
   n'utilise que les 8 premiers caractères de <parameter>string</parameter>,
   ce qui fait que toutes les chaînes plus longues, qui ont les mêmes
   premiers 8 octets retourneront le même résultat (tant que le
   <parameter>salt</parameter> est toujours le même).
  </para>
  <simpara>
   Les types de hash suivant sont supportés :
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> : chiffrement DES standard à 2
     caractères depuis la classe de caractères "./0-9A-Za-z". L'utilisation
     de caractères invalides dans le salt fera échouer la fonction crypt().
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> : Hachage DES étendu. Le "salt" sera une
     chaîne de 9 caractères composé d'un underscore, suivi de 4 caractères du compteur d'itération
     puis 4 caractères du "salt". Chacune de ces chaînes de 4 caractères code 24 bits,
     le caractère le moins significatif en premier. Les valeurs
     de <literal>0</literal> à <literal>63</literal> seront encodés comme <literal>./0-9A-Za-z</literal>.
     L'utilisation de caractères invalides dans le salt fera échouer la fonction crypt().
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> : hachage MD5 à 12 caractères
     commençant par <literal>$1$</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> : hachage Blowfish dont le salt est composé
     comme ceci ; "$2a$", "$2x$" or "$2y$", un paramètre à 2 chiffres, <literal>$</literal>,
     et 22 caractères depuis l'alphabet "./0-9A-Za-z". L'utilisation
     de caractères en dehors de cette classe dans le salt fera que la fonction crypt()
     retournera une chaîne vide (de longueur 0). Le paramètre à 2 chiffres est le logarithme
     base-2 du compteur d'itération pour l'algorithme de hachage basé sur Blowfish sous jasant et
     doivent être dans l'intervalle 04-31. De la même façon, si vous utilisez une valeur en dehors
     de cet intervalle, la fonction crypt() échouera.

     Les hashes "$2x$" sont potentiellement faible; les hashes "$2a$" sont
     compatible et atténue cette faiblesse. Pour de nouveaux hashes, "$2y$"
     devrait être utilisé.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA256</constant> - Hachage SHA-256 dont le salt est composé de 16 caractères
     préfixé par <literal>$5$</literal>. Si le salt commence par <literal>'rounds=&lt;N&gt;$'</literal>,
     la valeur numérique de N sera utilisée pour indiquer le nombre de fois que la boucle de
     hachage doit être exécutée, un peu comme le paramètre dans l'algorithme Blowfish.
     La valeur par défaut de <literal>rounds</literal> est de 5000, le minimum pouvant être de
     1000 et le maximum, de 999,999,999. Tout autre sélection de N en dehors de cet intervalle
     sera tronqué à la plus proche des 2 limites.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA512</constant> - Hachage SHA-512 dont le salt est composé de 16 caractères
     préfixé par <literal>$6$</literal>. Si le salt commence par <literal>'rounds=&lt;N&gt;$'</literal>,
     la valeur numérique de N sera utilisée pour indiquer le nombre de fois que la boucle de
     hachage doit être exécutée, un peu comme le paramètre dans l'algorithme Blowfish.
     La valeur par défaut de <literal>rounds</literal> est de 5000, le minimum pouvant être de
     1000 et le maximum, de 999,999,999. Tout autre sélection de N en dehors de cet intervalle
     sera tronqué à la plus proche des 2 limites.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne à hacher.
      </para>
      <caution>
       <para>
        Si vous utilisez l'algorithme <constant>CRYPT_BLOWFISH</constant>,
        le résultat du paramètre <parameter>string</parameter> sera tronqué
        à une longueur maximale de 72 octets.
       </para>
      </caution>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Si l'argument <parameter>salt</parameter> n'est pas fourni, le comportement
       est défini par l'implémentation de l'algorithme et peut provoquer des
       résultats inattendus.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la chaîne hachée ou une chaîne qui sera inférieure à 13 caractères
   et qui est garantie de différer du salt en cas d'erreur.
  </para>
  <warning>
   <simpara>
    Lors de la validation des mots de passe, une fonction de comparaison de
    chaînes qui n'est pas vulnérable aux attaques temporelles doit être utilisée
    pour comparer la sortie de la fonction <function>crypt</function> au hash
    précédemment connu.
    PHP fournit <function>hash_equals</function> pour ceci.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Le <parameter>salt</parameter> n'est plus optionnel.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>crypt</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$user_input = 'rasmuslerdorf';
$hashed_password = '$6$rounds=1000000$NJy4rIPjpOaU$0ACEYGg/aKCY3v8O8AfyiO7CTfZQ8/W231Qfh2tRLmfdvFD6XfHk12u6hMr9cYIA4hnpjLNSTRtUwYr9km9Ij/';

// Valider un hachage crypt() existant d'une maniére qui est compatible avec un logiciel non-PHP
if (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {
   echo "Mot de passe correct !";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Il n'existe pas de fonction de déchiffrement, car la fonction <function>crypt</function>
    utilise un algorithme à un seul sens (injection).
   </simpara>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash_equals</function></member>
    <member><function>password_hash</function></member>
    <member>La page de manuel Unix de la fonction crypt pour plus d'informations</member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
