<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a484d5d2bbad7e385a8864370b5280c4e05add8c Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.levenshtein" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>Calcule la distance Levenshtein entre deux chaînes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>string1</parameter></methodparam>
   <methodparam><type>string</type><parameter>string2</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>insertion_cost</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>replacement_cost</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>deletion_cost</parameter><initializer>1</initializer></methodparam>
  </methodsynopsis>
  <para>
   La distance Levenshtein est définie comme le nombre
   minimal de caractères qu'il faut remplacer, insérer ou supprimer
   pour transformer la chaîne <parameter>string1</parameter> en
   <parameter>string2</parameter>. La complexité de l'algorithme
   est en <literal>O(m*n)</literal>,
   où <literal>n</literal> et <literal>m</literal> sont les tailles
   respectives de <parameter>string1</parameter> et
   <parameter>string2</parameter> : c'est plutôt bien, en comparaison
   de <function>similar_text</function>, qui est en
   <literal>O(max(n,m)**3)</literal>, mais cela reste très coûteux.
  </para>
  <para>
   Si <parameter>insertion_cost</parameter>, <parameter>replacement_cost</parameter>
   et/oru <parameter>deletion_cost</parameter> sont différent de <literal>1</literal>,
   l'algorithme s'adapte pour choisir la transformation la moins coûteuse.
   E.g. si <code>$insertion_cost + $deletion_cost &lt; $replacement_cost</code>,
   Aucun remplacement ne sera effectué, mais plutôt des insertions et suppressions.
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string1</parameter></term>
     <listitem>
      <para>
       Une des chaînes à évaluer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string2</parameter></term>
     <listitem>
      <para>
       Une des chaînes à évaluer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>insertion_cost</parameter></term>
     <listitem>
      <para>
       Définit le coût de l'insertion.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement_cost</parameter></term>
     <listitem>
      <para>
       Définit le coût du remplacement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>deletion_cost</parameter></term>
     <listitem>
      <para>
       Définit le coût de l'effacement.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Cette fonction retourne la distance Levenshtein entre deux chaînes de caractères.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Antérieur à cette version, <function>levenshtein</function> devait être appelée
       avec soit deux soit cinq arguments.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Antérieur à cette version, <function>levenshtein</function> retournait <literal>-1</literal>
       si l'une des chaînes d'arguments dépassait 255 caractères.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>levenshtein</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// mot mal orthographié
$input = 'carrrot';

// tableau de mots à vérifier
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// aucune distance de trouvée pour le moment
$shortest = -1;

// boucle sur les mots pour trouver le plus près
foreach ($words as $word) {

    // calcule la distance avec le mot mis en entrée,
    // et le mot courant
    $lev = levenshtein($input, $word);

    // cherche une correspondance exacte
    if ($lev == 0) {

        // le mot le plus près est celui-ci (correspondance exacte)
        $closest = $word;
        $shortest = 0;

        // on sort de la boucle ; nous avons trouvé une correspondance exacte
        break;
    }

    // Si la distance est plus petite que la prochaine distance trouvée
    // OU, si le prochain mot le plus près n'a pas encore été trouvé
    if ($lev <= $shortest || $shortest < 0) {
        // définition du mot le plus près ainsi que la distance
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Mot entré : $input\n";
if ($shortest == 0) {
    echo "Correspondance exacte trouvée : $closest\n";
} else {
    echo "Vous voulez dire : $closest ?\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Mot entré : carrrot
Vous voulez dire : carrot ?
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
