<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="sqlite3.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::__construct</refname>
  <refpurpose>
   Instantie un objet SQLite3 et ouvre la base de données SQLite 3
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="SQLite3">
   <modifier>public</modifier> <methodname>SQLite3::__construct</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>encryptionKey</parameter><initializer>""</initializer></methodparam>
  </constructorsynopsis>
  <para>
   Initialise un objet SQLite3 et ouvre une connexion à la base de données
   SQLite 3. Si le chiffrement a été inclus durant la compilation, alors cette
   fonction tentera d'utiliser la clé correspondante.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Chemin vers la base de données SQLite, ou <literal>:memory:</literal> pour utiliser
       la base de données se trouvant en mémoire vive.
       Si <parameter>filename</parameter> est une chaîne vide, une base de 
       données temporaire privée sera créée sur le disque. Cette base de données 
       privée sera automatiquement supprimée dès que la connexion de la base de 
       données est fermée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Drapeaux optionnels utilisés pour déterminir la manière d'ouverture de la
       base de données SQLite. Par défaut, l'ouverture s'effectue en utilisant
       <literal>SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE</literal>.
       <itemizedlist>
        <listitem>
         <para>
          <literal>SQLITE3_OPEN_READONLY</literal> : Ouvre la base de données
          en lecture seule.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>SQLITE3_OPEN_READWRITE</literal> : Ouvre la base de données
          en lecture et en écriture.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>SQLITE3_OPEN_CREATE</literal> : Crée la base de données si
          elle n'existe pas.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>encryptionKey</parameter></term>
     <listitem>
      <para>
       Un clé de cryptage optionnel, à utiliser lors du cryptage/décryptage
       de la base de données SQLite. Si le module SQLite n'est pas installé,
       ce paramètre n'aura aucun effet.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une <classname>Exception</classname> en cas d'échec.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.0.10</entry>
      <entry>
       Le <parameter>filename</parameter> peut maintenant être vide pour utiliser une base de données privée, temporaire sur disque.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>SQLite3::__construct</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLite3('mysqlitedb.db');

$db->exec('CREATE TABLE foo (bar TEXT)');
$db->exec("INSERT INTO foo (bar) VALUES ('This is a test')");

$result = $db->query('SELECT bar FROM foo');
var_dump($result->fetchArray());
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
