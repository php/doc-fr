<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.sodium-crypto-pwhash-str" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_pwhash_str</refname>
  <refpurpose>Renvoie un hachage encodé en ASCII</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sodium_crypto_pwhash_str</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>int</type><parameter>opslimit</parameter></methodparam>
   <methodparam><type>int</type><parameter>memlimit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Utilise un algorithme de hachage dur en CPU et en mémoire avec un sel généré aléatoirement, et des limites de mémoire et de CPU pour générer un hachage encodé en ASCII adapté au stockage de mots de passe.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      <type>string</type>; The password to generate a hash for.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opslimit</parameter></term>
    <listitem>
     <para>
      Représente une quantité maximale de calculs à effectuer. Augmenter ce nombre fera que la fonction nécessitera plus de cycles CPU pour calculer une clé. Il existe des constantes disponibles pour définir la limite d'opérations à des valeurs appropriées en fonction de l'utilisation prévue, dans l'ordre de la force : <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE</constant>, <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE</constant> et <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE</constant>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memlimit</parameter></term>
    <listitem>
     <para>
      Le montant maximum de RAM que la fonction utilisera, en octets. Il existe des constantes pour vous aider à choisir une valeur appropriée, dans l'ordre de la taille : <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE</constant>, <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE</constant> et <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE</constant>. Typiquement, ces valeurs devraient être associées aux valeurs opslimit correspondantes.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Renvoie le hachage de mot de passe.
  </para>
  <para>
   Pour produire le même hachage de mot de passe à partir du même mot de passe, les mêmes valeurs pour <parameter>opslimit</parameter> et <parameter>memlimit</parameter> doivent être utilisées.
   Ces valeurs sont intégrées dans le hachage généré, donc tout ce qui est nécessaire pour vérifier le hachage est inclus. Cela permet
   à la fonction <function>sodium_crypto_pwhash_str_verify</function> de vérifier le hachage sans
   avoir besoin de stockage séparé pour les autres paramètres.
  </para>
 </refsect1>

  <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple de <function>sodium_crypto_pwhash_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = 'password';
echo sodium_crypto_pwhash_str(
    $password,
    SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
    SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE
);
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$argon2id$v=19$m=65536,t=2,p=1$oWIfdaXwWwhVmovOBc2NAQ$EbsZ+JnZyyavkafS0hoc4HdaOB0ILWZESAZ7kVGa+Iw
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Les hachages sont calculés en utilisant l'algorithme Argon2ID,
    fournissant une résistance à la fois aux attaques GPU et aux attaques par canaux latéraux.
    Contrairement à la fonction <function>password_hash</function>,
    il n'y a pas de paramètre de sel (un sel est généré automatiquement),
    et les paramètres <parameter>opslimit</parameter> et
    <parameter>memlimit</parameter> ne sont pas optionnels.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sodium_crypto_pwhash_str_verify</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
    <member><function>password_hash</function></member>
    <member><function>password_verify</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.libsodium.argon2;">Libsodium Argon2 docs</link></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
