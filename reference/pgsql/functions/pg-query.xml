<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c2eca73ef79ebe78cebb34053e41b565af504c4f Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.pg-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_query</refname>
  <refpurpose>
   Exécute une requête PostgreSQL
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>PgSql\Result</type><type>false</type></type><methodname>pg_query</methodname>
   <methodparam choice="opt"><type>PgSql\Connection</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_query</function> exécute la requête
   <parameter>query</parameter> sur la base de données spécifiée
   <parameter>connection</parameter>.
   <function>pg_query_params</function> doit être préféré dans la
   plupart des cas.
  </para>
  <para>
   Si une erreur se produit et &false; est retourné, les détails de l'erreur
   peuvent être récupérés en utilisant la fonction
   <function>pg_last_error</function> si la connexion est valide.
  </para>
  <para>
   <note>
    <simpara>
     Bien que <parameter>connection</parameter> puisse être omis, il n'est
     pas recommandé de le faire, car il peut se révéler difficile
     de retrouver les bogues dans les scripts.
    </simpara>
   </note>
  </para>
  <note>
   <para>
    Auparavant, cette fonction s'appelait <function>pg_exec</function>.
    <function>pg_exec</function> est toujours disponible pour des
    raisons de compatibilité, mais les utilisateurs sont encouragés à
    utiliser le nouveau nom.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection-with-unspecified-default;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       La requête ou les requêtes SQL à être exécutées. Lorsque plusieurs
       requêtes sont passées à la fonction, elles sont automatiquement
       exécutées comme étant une transaction, à moins qu'il y aille les
       commandes BEGIN/COMMIT incluses dans la requête. Cependant,
       l'utilisation de transactions multiples dans un seul appel de fonction
       n'est pas recommandée.
      </para>
      <warning>
       <para>
        L'inperpolation des chaînes de caractères fournies par l'utilisateur
        est extrèmement dangereux et vous devez garder en tête l'ensemble
        des vulnérabilités concernant les
        <link linkend="security.database.sql-injection">injections SQL</link>.
        Dans la plupart des cas, la fonction <function>pg_query_params</function>
        doit être préférée ; il est préférable de passer les valeurs fournies
        par l'utilisateur comme paramètres, plutôt que de les substituer
        dans la requête.
       </para>
       <para>
        Toutes données utilisateur substituées directement dans la chaîne
        de la requête doivent être
        <link linkend="function.pg-escape-string">proprement échappées</link>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Une instance <classname>PgSql\Result</classname> en cas de succès, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &pgsql.changelog.return-result-object;
     &pgsql.changelog.connection-object;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>pg_query</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
  echo "Une erreur s'est produite.\n";
  exit;
}

$result = pg_query($conn, "SELECT auteur, email FROM auteurs");
if (!$result) {
  echo "Une erreur s'est produite.\n";
  exit;
}

while ($row = pg_fetch_row($result)) {
  echo "Auteur: $row[0]  E-mail: $row[1]";
  echo "<br />\n";
}
 
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation de <function>pg_query</function> avec plusieurs requêtes</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");

// ces requêtes seront exécutées en tant qu'une seule transaction

$query = "UPDATE authors SET author=UPPER(author) WHERE id=1;";
$query .= "UPDATE authors SET author=LOWER(author) WHERE id=2;";
$query .= "UPDATE authors SET author=NULL WHERE id=3;";

pg_query($conn, $query);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_connect</function></member>
    <member><function>pg_pconnect</function></member>
    <member><function>pg_fetch_array</function></member>
    <member><function>pg_fetch_object</function></member>
    <member><function>pg_num_rows</function></member>
    <member><function>pg_affected_rows</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
