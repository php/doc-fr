<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 73fae4ee51b644b72028e610abefefced57c18ad Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.yaf-controller-abstract" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>la classe Yaf_Controller_Abstract</title>
 <titleabbrev>Yaf_Controller_Abstract</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Controller_Abstract intro -->
  <section xml:id="yaf-controller-abstract.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Controller_Abstract</classname> est le cœur du
    système Yaf ; architecture MVC (pour Model-View-Controller)
    permettant de séparer la logique applicative de la logique
    d'affichage.
   </para>
   <para>
    Tous les controlleurs personnalisés doivent hérités de la classe
    <classname>Yaf_Controller_Abstract</classname>.
   </para>
   <para>
    Vous devriez vous apercevoir que vous ne pouvez pas définir de fonction
    __construct pour votre controlleur personnalisé, aussi, la classe
    <classname>Yaf_Controller_Abstract</classname> fournit une méthode magique
    pour cela : <methodname>Yaf_Controller_Abstract::init</methodname>.
   </para>
   <para>
    Si vous avez défini une méthode init() dans votre controlleur personnalisé,
    elle sera appelée lors de l'instanciation de votre contrôleur.
   </para>
   <para>
    Les actions peuvent avoir des arguments, lorsqu'une requête arrive,
    s'il y a la même variable dans les paramètres de la requête (voir
    <methodname>Yaf_Request_Abstract::getParam</methodname>) après le routage,
    Yaf les passera à la méthode de l'action (voir la méthode
    <methodname>Yaf_Action_Abstract::execute</methodname>).
    <note>
     <para>
      Ces arguments sont directement récupérés sans filtrage ; il serait
      plus prudent de les analyser avant de les utiliser.
     </para>
    </note>
   </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-controller-abstract.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Controller_Abstract</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>Yaf_Controller_Abstract</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="yaf-controller-abstract.props.actions">actions</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.module">_module</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.name">_name</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.request">_request</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.response">_response</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.invoke-args">_invoke_args</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.view">_view</varname>
    </fieldsynopsis>

    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-controller-abstract')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-controller-abstract')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  
<!-- {{{ Yaf_Controller_Abstract properties -->
  <section xml:id="yaf-controller-abstract.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-controller-abstract.props.actions">
     <term><varname>actions</varname></term>
     <listitem>
      <para>
       Vous pouvez aussi définir une méthode d'action dans un script PHP séparé
       en utilisant cette propriété et <classname>Yaf_Action_Abstract</classname>.
      <example>
       <title>Définission d'une action dans un fichier séparé</title>
        <programlisting role="php">
<![CDATA[
<?php
class IndexController extends Yaf_Controller_Abstract {
    protected $actions = array(
        /** maintenant dummyAction est défini dans un fichier séparé */
        "dummy" => "actions/Dummy_action.php",
    );

    /* la méthode de l'action peut avoir des arguments */
    public function indexAction($name, $id) {
       /* $name et $id sont des données brûtes non sécurisées */
       assert($name == $this->getRequest()->getParam("name"));
       assert($id   == $this->_request->getParam("id"));
    }
}
?>
]]>
        </programlisting>
      </example>
      <example>
       <title>Dummy_action.php</title>
        <programlisting role="php">
<![CDATA[
<?php
class DummyAction extends Yaf_Action_Abstract {
    /* une classe d'action doit définir cette méthode comme point d'entrée */
    public function execute() {
    }
}
?>
]]>
        </programlisting>
      </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.module">
     <term><varname>_module</varname></term>
     <listitem>
      <para>
       Nom du module
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.name">
     <term><varname>_name</varname></term>
     <listitem>
      <para>
       Nom du contrôleur
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.request">
     <term><varname>_request</varname></term>
     <listitem>
      <para>
       L'objet de la requête courante
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.response">
     <term><varname>_response</varname></term>
     <listitem>
      <para>
       L'objet de la réponse courante
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.invoke-args">
     <term><varname>_invoke_args</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.view">
     <term><varname>_view</varname></term>
     <listitem>
      <para>
       Le moteur de visualisation
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-controller-abstract;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
