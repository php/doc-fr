<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<phpdoc:classref xml:id="class.yaf-router" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La classe Yaf_Router</title>
 <titleabbrev>Yaf_Router</titleabbrev>
 
 <partintro>
  
  <!-- {{{ Yaf_Router intro -->
  <section xml:id="yaf-router.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Router</classname> est le framework standard pour le routage.
    Le routage est le fait de prendre la partie finale d'une URI (la partie
    de l'URI qui vient après l'URI de base : voir la méthode
    <methodname>Yaf_Request_Abstract::setBaseUri</methodname>), et la décompose en
    paramètres pour déterminer quel module, contrôleur, et action de ce contrôleur
    doivent recevoir la requête. Cette valeur de module, de contrôleur, d'action
    et d'autres paramètres sont empaquetés dans un objet <classname>Yaf_Request_Abstract</classname>
    qui sera ensuite analysé par <classname>Yaf_Dispatcher</classname>. Le routage
    intervient uniquement lorsqu'une requête est initialement reçue et avant l'envoi
    au premier contrôleur. <classname>Yaf_Router</classname> est prévu pour autoriser
    les fonctionnalités similaires au mod_rewrite en utilisant des structures PHP.
    Ces structures sont basés sur le routage en Ruby on Rails et ne nécessitent
    aucun connaissance en ré-écriture d'URL de serveur web. Elles sont prévues pour fonctionner
    avec une seule règle Apache mod_rewrite (une parmis) :
    <example>
     <title>Règle de ré-écriture pour Apache</title>
     <programlisting role="conf">
<![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css|html)$ index.php
]]>
     </programlisting>
    </example>
    ou (préféré) :
    <example>
     <title>Règle de ré-écriture pour Apache</title>
     <programlisting role="conf">
<![CDATA[
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [NC,L]
RewriteRule ^.*$ index.php [NC,L]
]]>
     </programlisting>
    </example>
    Si vous utilisez Lighttpd, la règle suivante est valide :
    <example>
     <title>Règle de ré-écriture pour Lighttpd</title>
     <programlisting role="conf">
<![CDATA[
url.rewrite-once = (
  ".*\?(.*)$" => "/index.php?$1",
  ".*\.(js|ico|gif|jpg|png|css|html)$" => "$0",
  "" => "/index.php"
)
]]>
     </programlisting>
    </example>
    Si vous utilisez Nginx, la règle suivante est valide :
    <example>
     <title>Règle de ré-écriture pour Nginx</title>
     <programlisting role="conf">
<![CDATA[
server {
  listen ****;
  server_name  yourdomain.com;
  root   document_root;
  index  index.php index.html;

  if (!-e $request_filename) {
    rewrite ^/(.*)  /index.php/$1 last;
  }
}
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="yaf-router.default">
   <title>Routage par défaut</title>
   <para>
    <classname>Yaf_Router</classname> est fourni préconfiguré avec un routage par défaut
    <classname>Yaf_Route_Static</classname>, qui décompose les URIs en forme de
    contrôleur/action. De plus, un nom de module peut être spécifié comme premier
    élément du chemin, autorisant ainsi les URIs sous la forme module/contrôleur/action.
    Et finalement, les paramètres ajoutés à l'URI seront détectés aussi par défaut -
    contrôleur/action/var1/value1/var2/value2.
    <note>
     <para>
      Le nom du module doit être défini dans la configuration,
      par exemple application.module="Index,Foo,Bar" dans ce cas,
      uniquement index, foo et bar peuvent être considérés comme
      nom de module ; si la configuration n'existe pas, seul le module
      nommé "Index" sera utilisable.
     </para>
    </note>
   </para>
   
   <para>
    Voici quelques exemples sur la façon dont ces routages sont détectés :
    <example>
     <title>Exemple avec <classname>Yaf_Route_Static</classname> (route par défaut)</title>
     <programlisting role="conf">
<![CDATA[
// Supposons la configuration suivante :
$conf = array(
   "application" => array(
      "modules" => "Index,Blog",
   ),
);
     
Que le contrôleur :
http://example/news
    controller == news
Qu'une action (lorsqu'on définit yaf.action_prefer=1 en php.ini)
    action  == news

Module invalide lié à un nom de contrôleur :
http://example/foo
    controller == foo

Module + contrôleur :
http://example/blog/archive
    module     == blog
    controller == archive
     
Module + contrôleur + action :
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list
     
Module + contrôleur + action + paramètres :
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]>
     </programlisting>
    </example>
    
   </para>
  </section>
  
  <section xml:id="yaf-router.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Router</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Router</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.routes">_routes</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.current">_current</varname>
    </fieldsynopsis>
    
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
     <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  
  <!-- {{{ Yaf_Router properties -->
  <section xml:id="yaf-router.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-router.props.routes">
     <term><varname>_routes</varname></term>
     <listitem>
      <para>
       Pile des routes enregistrées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-router.props.current">
     <term><varname>_current</varname></term>
     <listitem>
      <para>
       Après la phase de routage, ceci indique le nom de la route
       utilisé pour router la demande courante. Vous pouvez récupérer
       ce nom en utilisant la méthode
       <methodname>Yaf_Router::getCurrentRoute</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 &reference.yaf.entities.yaf-router;
 
</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
