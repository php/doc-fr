<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 49d4fb555745d1981edac87a5a2d8ae53b5f75df Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="yaf-dispatcher.catchexception" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yaf_Dispatcher::catchException</refname>
  <refpurpose>Active/désactive la récupération des exceptions</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Yaf_Dispatcher</type><methodname>Yaf_Dispatcher::catchException</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>flag</parameter></methodparam>
  </methodsynopsis>
  <para>
   Lorsque application.dispatcher.throwException est actif (vous pouvez aussi
   appeler la méthode <methodname>Yaf_Dispatcher::throwException(TRUE)</methodname>
   pour l'activer), Yaf émettra une exception lorsqu'une erreur survient au lieu
   d'émettre une erreur.
  </para>
  <para>
   Si vous activez <methodname>Yaf_Dispatcher::catchException</methodname>
   (peut aussi être activé via
   <link linkend="configuration.yaf.dispatcher.catchexception">application.dispatcher.catchException</link>),
   toutes les exceptions non-capturées le seront par
   la méthode ErrorController::error si vous en avez définie une.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>flag</parameter></term>
    <listitem>
     <para>
      Un booléen.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>Yaf_Dispatcher::catchException</function></title>
   <programlisting role="php">
<![CDATA[
/* if you defined a ErrorController like following */
<?php
class ErrorController extends Yaf_Controller_Abstract {
     /** 
      * vous pouvez aussi appeler Yaf_Request_Abstract::getException pour récupérer
      * les exceptions non-capturées.
      */
     public function errorAction($exception) {
        /* Une erreur survient ! */
        switch ($exception->getCode()) {
            case YAF_ERR_NOTFOUND_MODULE:
            case YAF_ERR_NOTFOUND_CONTROLLER:
            case YAF_ERR_NOTFOUND_ACTION:
            case YAF_ERR_NOTFOUND_VIEW:
                echo 404, ":", $exception->getMessage();
                break;
            default :
                $message = $exception->getMessage();
                echo 0, ":", $exception->getMessage();
                break;
        }
     } 
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
/* Maintenant, si une erreur survient, en supposant un accès à un controlleur existant pas (ou vous pouvez lancer une exception vous-même) : */
404:Could not find controller script **/application/controllers/No-exists-controller.php
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yaf_Dispatcher::throwException</methodname></member>
   <member><methodname>Yaf_Dispatcher::setErrorHandler</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
