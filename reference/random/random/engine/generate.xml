<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43756e54fb34ece9b83559ccdde98864b9c3fb5c Maintainer: pierrick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="random-engine.generate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine::generate</refname>
  <refpurpose>Génère de l'aléatoire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine">
   <modifier>public</modifier> <type>string</type><methodname>Random\Engine::generate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Retourne de l'aléatoire et fait avancer l'état de l'algorithme d'un pas.
  </para>
  <para>
   L'aléatoire est représenté par une chaîne binaire contenant des octets aléatoires. Cette représentation
   permet d'interpréter sans ambiguïté les bits aléatoires générés par l'algorithme, par exemple pour
   tenir compte des différentes tailles de sortie utilisées par les différents algorithmes.
  </para>
  <para>
   Les algorithmes qui opèrent nativement sur des valeurs entières doivent retourner l'entier avec les octets dans l'ordre
   petit-boutiste (little-endian), par exemple en utilisant la fonction <function>pack</function> avec le code de format
   <literal>P</literal>. L'interface de haut niveau fournie par le
   <classname>Random\Randomizer</classname> interprétera les octets aléatoires retournés comme des entiers non signés
   petit-boutiste (little-endian) si une représentation numérique est nécessaire.
  </para>
  <para>
   Il est fortement recommandé que chaque bit de la chaîne retournée soit sélectionné de manière uniforme et indépendante,
   car certaines applications nécessitent de l'aléatoire basé au niveau des bits pour fonctionner correctement.
   Par exemple, les générateurs congruentiels linéaires génèrent souvent de l'aléatoire de moindre qualité pour les bits
   de poids faible de la valeur entière retournée et ne conviendraient donc pas aux applications
   qui requièrent de l'aléatoire au niveau des bits.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Une chaîne non vide contenant des octets aléatoires.
  </para>

  <note>
   <simpara>
    Le <classname>Random\Randomizer</classname> utilise en interne des entiers non signés de 64 bits.
    Si la chaîne retournée contient plus de 64 bits (8 octets) d'aléatoire, les octets excédentaires
    seront ignorés. D'autres applications peuvent être en mesure de traiter plus de 64 bits à la fois.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Si la génération d'aléatoire échoue, une <classname>Random\RandomException</classname>
     doit être émise. Tout autre <classname>Exception</classname> émise pendant la génération devrait être
     attrapée et enveloppée dans une <classname>Random\RandomException</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si la chaîne retournée est vide, une <classname>Random\BrokenRandomEngineError</classname>
     sera émise par le <classname>Random\Randomizer</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si l'algorithme implémenté est fortement biaisé, une <classname>Random\BrokenRandomEngineError</classname>
     peut être émise par le <classname>Random\Randomizer</classname> pour éviter les boucles infinies
     si un échantillonnage par rejet est nécessaire pour retourner des résultats non biaisés.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <function>Random\Engine::generate</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * Implémente un Générateur Congruentiel Linéaire de module 65536,
 * un multiplicateur de 61 et un incrément de 17, retournant un entier de 8 bits.
 *
 * Note: Ce moteur ne peut être utilisé qu'à des fins de démonstration..
 *       Les générateurs congruentiels linéaires génèrent généralement
 *       de l'aléatoire de faible qualité et cette implémentation spécifique a
 *       une période très courte de 16 bits qui n'est pas adaptée à
 *       presque tous les cas d'utilisation dans le monde réel.
 */
final class LinearCongruentialGenerator implements \Random\Engine
{
    private int $state;

    public function __construct(?int $seed = null)
    {
        if ($seed === null) {
            $seed = random_int(0, 0xffff);
        }

        $this->state = $seed & 0xffff;
    }

    public function generate(): string
    {
        $this->state = (61 * $this->state + 17) & 0xffff;

        return pack('C', $this->state >> 8);
    }
}

$r = new \Random\Randomizer(
    new LinearCongruentialGenerator(seed: 1)
);

echo "Nombre chanceux: ", $r->getInt(0, 99), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Nombre chanceux: 4
]]>
   </screen>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
