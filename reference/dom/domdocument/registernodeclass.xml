<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4f5e2b22575131fa5e9c3004b1c874e1acb06573 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>Enregistre la classe étendue utilisée pour créer un type de base de nœud</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="DOMDocument">
   <modifier>public</modifier> <type>bool</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseClass</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter>extendedClass</parameter></methodparam>
  </methodsynopsis>

  <para>
   Cette méthode vous permet d'enregistrer votre propre classe étendue DOM à utiliser
   ensuite dans l'extension DOM de PHP.
  </para>
  <para>
   Cette méthode ne fait pas partie du standard DOM.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseClass</parameter></term>
     <listitem>
      <para>
       La classe DOM qui vous voulez étendre. Vous pouvez trouver une liste
       de ces classes dans l'<link linkend="book.dom">introduction du chapitre</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedClass</parameter></term>
     <listitem>
      <para>
       Le nom de votre classe étendue. Si la valeur &null; est fournie, toutes
       les classes enregistrées précédemment étendant
       <parameter>baseClass</parameter> seront supprimées.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ajout d'un nouvelle méthode à DOMElement</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) { 
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) { 
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// À partir d'ici, l'ajout d'un élément à un autre se fait en un seul appel !
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Récupération d'éléments sous la forme d'une classe personnalisée</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>Text dans un fils</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// Et utilisons les avantages de la méthode __toString..
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
Text dans un fils
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Récupération du propriétaire du document</title>
    <para>
     Lors de l'instanciation d'un <classname>DOMDocument</classname>
     personnalisé, la propriété <varname>ownerDocument</varname> se réfère
     à la classe instanciée. Cependant, si toutes les références à cette classe
     sont supprimées, elle sera détruite et une nouvelle instance de
     <classname>DOMDocument</classname> sera créée à la place. Pour cette raison,
     vous pouvez utiliser la méthode <function>DOMDocument::registerNodeClass</function>
     avec <classname>DOMDocument</classname>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMDocument extends DOMDocument {
}

class MyOtherDOMDocument extends DOMDocument {
}

// Création d'un document MyDOMDocument avec quelques fragments XML
$doc = new MyDOMDocument;
$doc->loadXML("<root><element><child>texte dans un fils</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// Le propriétaire courant du nœud est MyDOMDocument
var_dump(get_class($child->ownerDocument));
// MyDOMDocument est détruit
unset($doc);
// Et une nouvelle instance de DOMDocument est créée
var_dump(get_class($child->ownerDocument));

// Importation d'un nœud depuis MyDOMDocument
$newdoc = new MyOtherDOMDocument;
$child = $newdoc->importNode($child);

// Enregistre un DOMDocument personnalisé
$newdoc->registerNodeClass("DOMDocument", "MyOtherDOMDocument");

var_dump(get_class($child->ownerDocument));
unset($doc);
// Un nouveau MyOtherDOMDocument est créé
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "MyDOMDocument"
string(11) "DOMDocument"
string(18) "MyOtherDOMDocument"
string(18) "MyOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="domdocument.registernodeclass.example.transient">
    <title>Les objets personalisé sont éphémère</title>
    <caution>
     <simpara>
      Les objets de la classe de noeux registré sont éphém_re, c.à.d. ils sont
      détruit quand ils ne sont plus référencer depuis du code PHP, et
      recréé quand ils sont denouveaux récupérer. Ceci implque que des valeurs
      de propriétés personalisé seront perdu après la recréation.
     </simpara>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMElement extends DOMElement
{
    public $myProp = 'default value';
}

$doc = new DOMDocument();
$doc->registerNodeClass('DOMElement', 'MyDOMElement');

$node = $doc->createElement('a');
$node->myProp = 'modified value';
$doc->appendChild($node);

echo $doc->childNodes[0]->myProp, PHP_EOL;
unset($node);
echo $doc->childNodes[0]->myProp, PHP_EOL;
?>]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
modified value
default value
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
