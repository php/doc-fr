<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 648875cf73af01acdb6afaa5ca38b0bf6631bf42 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.cubrid-pconnect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_pconnect</refname>
  <refpurpose>Ouvre une connexion persistante vers un serveur CUBRID</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_pconnect</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>  
   <methodparam><type>int</type><parameter>port</parameter></methodparam>  
   <methodparam><type>string</type><parameter>dbname</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>  
  </methodsynopsis>
  <para>
   Établit une connexion persistante vers un serveur CUBRID.
  </para>
  <para>
   <function>cubrid_pconnect</function> agit de la même façon que
   <function>cubrid_connect</function> avec deux différences majeures.
  </para>
  <para>
   Tout d'abord, lors de la connexion, la fonction tentera d'abord de trouver
   un lien (persistant) déjà ouvert avec le même nom d'hôte, sur le même port,
   utilisant la même base de données dbname ainsi que le même userid. Si un tel
   lien est trouvé, son identifiant sera retourné au lieu d'ouvrir une nouvelle
   connexion.
  </para>
  <para>
   Ensuite, la connexion vers le serveur MySQL ne sera pas fermée lorsque
   la fin du scripts est atteint. Au lieu de cela, le lien restera ouvert
   pour une utilisation future (<function>cubrid_close</function> ou
   <function>cubrid_disconnect</function> ne fermera pas les liens établis avec
   <function>cubrid_pconnect</function>).
  </para>
  <para>
   Ce type de lien était appelé auparavant 'persistante'.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Nom de l'hôte ou adresse IP du serveur CUBRID CAS.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Numéro du port du serveur CUBRID CAS (BROKER_PORT configuré dans $CUBRID/conf/cubrid_broker.conf).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbname</parameter></term>
     <listitem>
      <para>
       Nom de la base de données.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem>
      <para>
       Nom d'utilisateur pour la base de données.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem>
      <para>
       Mot de passe à associer avec le nom d'utilisateur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identifiant de connexion en cas de succès,&return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>cubrid_connect</function></title>
   <programlisting role="php">
<![CDATA[
<?php
printf("%-30s %s\n", "version de CUBRID PHP :", cubrid_version());

printf("\n");

$conn = cubrid_pconnect("localhost", 33000, "demodb", "dba");

if (!$conn) {
    die('Erreur de connexion ('. cubrid_error_code() .')' . cubrid_error_msg());
}

$db_params = cubrid_get_db_parameter($conn);

while (list($param_name, $param_value) = each($db_params)) {
    printf("%-30s %s\n", $param_name, $param_value);
}

printf("\n");

$server_info = cubrid_get_server_info($conn);
$client_info = cubrid_get_client_info();

printf("%-30s %s\n", "Infos Server :", $server_info);
printf("%-30s %s\n", "Infos Client:", $client_info);

printf("\n");

$charset = cubrid_get_charset($conn);

printf("%-30s %s\n", "Jeux de caractères CUBRID :", $charset);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
CUBRID PHP Version:            9.1.0.0001

PARAM_ISOLATION_LEVEL          3
LOCK_TIMEOUT                   -1
MAX_STRING_LENGTH              1073741823
PARAM_AUTO_COMMIT              1

Server Info:                   9.1.0.0212
Client Info:                   9.1.0

CUBRID Charset:                iso8859-1
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_connect_with_url</function></member>
    <member><function>cubrid_pconnect_with_url</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
