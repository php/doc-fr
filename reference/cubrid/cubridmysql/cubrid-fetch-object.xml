<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4754397753fd79f1c846868b66a2448babab1c54 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.cubrid-fetch-object" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_fetch_object</refname>
  <refpurpose>Récupère la prochaine ligne et la retourne sous la forme d'un objet</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>object</type><methodname>cubrid_fetch_object</methodname>
   <methodparam><type>resource</type><parameter>result</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>class_name</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>params</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette fonction retourne un objet avec les noms de la colonne
   du jeu de résultats comme propriétés. Les valeurs de ces propriétés
   sont extraites depuis la ligne courante du jeu de résultats.
  </para>
 </refsect1>

 <refsect1 role="parameters">
 &reftitle.parameters;
 <para>
  <variablelist>
  <varlistentry>
   <term><parameter>result</parameter></term>
   <listitem><para>Le paramètre <parameter>result</parameter> provient d'un
    appel à la fonction <function>cubrid_execute</function></para></listitem>
  </varlistentry>
  <varlistentry>
    <term><parameter>class_name</parameter></term>
      <listitem>
       <para>
        Le nom de la classe à instancier, à définir les propriétés et à retourner.
        Si non spécifié, un objet <classname>stdClass</classname> est retourné.
       </para>
     </listitem>
   </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
      <listitem>
       <para>
        Un tableau de paramètres optionnels à passer au constructeur
        de la classe <parameter>class_name</parameter>.
       </para>
     </listitem>
   </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Le type ne peut être que CUBRID_LOB ; ce paramètre
        sera utilisé uniquement lorsque vous avez besoin d'utiliser
        un objet lob.
       </para>
     </listitem>
   </varlistentry>
  </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un objet en cas de succès.
  </para>
   <para>
    &false; lorsqu'il n'y a plus de ligne, NULL si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>cubrid_fetch_object</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb");
$res = cubrid_execute($conn, "SELECT * FROM code");

var_dump(cubrid_fetch_object($res));

class demodb_code {
    public $s_name = null;
    public $f_name = null;

    public function toString() {
        var_dump($this);
    }
}

var_dump(cubrid_fetch_object($res, "demodb_code"));

// Si vous voulez utiliser un objet LOB, vous pouvez utiliser
// cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name'), CUBRID_LOB)

class demodb_code_construct extends demodb_code {
    public function __construct($s, $f) {
        $this->s_name = $s;
        $this->f_name = $f;
    }   
}

var_dump(cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name')));

// Si vous voulez utiliser un objet LOB, vous pouvez utiliser
// cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name'), CUBRID_LOB)

var_dump(cubrid_fetch_object($res));

cubrid_close_request($res);
cubrid_disconnect($conn);
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (2) {
  ["s_name"]=>
  string(1) "X"
  ["f_name"]=>
  string(5) "Mixed"
}
object(demodb_code)#1 (2) {
  ["s_name"]=>
  string(1) "W"
  ["f_name"]=>
  string(5) "Woman"
}
object(demodb_code_construct)#1 (2) {
  ["s_name"]=>
  string(6) "s_name"
  ["f_name"]=>
  string(6) "f_name"
}
object(stdClass)#1 (2) {
  ["s_name"]=>
  string(1) "B"
  ["f_name"]=>
  string(6) "Bronze"
}
]]>
    </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
   <member><function>cubrid_execute</function></member>
   <member><function>cubrid_fetch</function></member>
   <member><function>cubrid_fetch_array</function></member>
   <member><function>cubrid_fetch_assoc</function></member>
   <member><function>cubrid_fetch_row</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
