<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9e0804888ae46a50f28d98514a8d5e70a34e069c Maintainer: pierrick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="ffi.cast" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>FFI::cast</refname>
  <refpurpose>Effectue une conversion de type C</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="FFI">
   <modifier>public</modifier> <modifier>static</modifier> <type class="union"><type>FFI\CData</type><type>null</type></type><methodname>FFI::cast</methodname>
   <methodparam><type class="union"><type>FFI\CType</type><type>string</type></type><parameter>type</parameter></methodparam>
   <methodparam><type class="union"><type>FFI\CData</type><type>int</type><type>float</type><type>bool</type><type>null</type></type><parameter role="reference">ptr</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis role="FFI">
   <modifier>public</modifier> <type class="union"><type>FFI\CData</type><type>null</type></type><methodname>FFI::cast</methodname>
   <methodparam><type class="union"><type>FFI\CType</type><type>string</type></type><parameter>type</parameter></methodparam>
   <methodparam><type class="union"><type>FFI\CData</type><type>int</type><type>float</type><type>bool</type><type>null</type></type><parameter role="reference">ptr</parameter></methodparam>
  </methodsynopsis>
  <para>
   <methodname>FFI::cast</methodname> crée un nouvel objet <classname>FFI\CData</classname>
   qui fait référence à la même structure de données C, mais qui est associée à un type différent.
   L'objet résultant ne possède pas les données C et la source <parameter>ptr</parameter>
   doit survivre au résultat. Le type C peut être spécifié en tant que <type>string</type> avec
   n'importe quelle déclaration de type C valide ou en tant qu'objet <classname>FFI\CType</classname>, créé auparavant.
   Si cette méthode est appelée de manière statique, elle ne doit utiliser que des noms de types C prédéfinis (par ex.
   <literal>int</literal>, <literal>char</literal>, etc.); si la méthode est appelée en tant 
   que méthode d'instance, tout type déclaré pour l'instance est autorisé.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>type</parameter></term>
    <listitem>
     <para>
      Une déclaration C valide comme <type>string</type>, ou une instance de <classname>FFI\CType</classname>
      qui a déjà été créée.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ptr</parameter></term>
    <listitem>
     <para>
      Le gestionnaire du pointeur d'une structure de données C.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne l'objet <classname>FFI\CData</classname> fraîchement créé.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
