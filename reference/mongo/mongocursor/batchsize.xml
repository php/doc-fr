<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: af5f2f87b3b0bb9ee0f83ccb787a4e7db1eb6bd4 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.batchsize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::batchSize</refname>
  <refpurpose>Limite le nombre de résultats retourné pour un lot</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::batchSize</methodname>
   <methodparam><type>int</type><parameter>batchSize</parameter></methodparam>
  </methodsynopsis>
  <para>
   Un curseur récupère un lot d'objets de résultats et les stocke en
   local. Cette méthode définit la valeur batchSize permettant de configurer
   la quantité de documents à récupérer en un passage, depuis le serveur.
   Cependant, la quantité de documents retournée ne pourra jamais être
   supérieure à la limite maximale (habituellement 4 Mo).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>batchSize</parameter>
     </term>
     <listitem>
      <para>
       Le nombre de résultats à retourner pour un lot. Chaque lot nécessite
       un aller-retour avec le serveur.
      </para>
      <para>
       Si <parameter>batchSize</parameter> vaut <emphasis>2 ou plus</emphasis>,
       il représentera la taille de chaque lot d'objets récupérés.
       Il peut être ajuster pour optimiser les performances et limiter les
       données transférées.
      </para>
      <para>
       Si <parameter>batchSize</parameter> vaut <literal>1</literal> ou une
       valeur négative, cela va limiter le nombre de documents retournés à la
       valeur absolue de batchSize, et le curseur sera fermé. Par exemple,
       si batchSize vaut <literal>-10</literal>, alors le serveur retournera
       un maximum de 10 documents (si ces documents tiennent dans 4Mo), puis
       le curseur sera fermé.
      </para>
      <warning>
       <para>
        Le fait de définir <parameter>batchSize</parameter> à <literal>1</literal>
        est spécial, et signifie la même chose que de le définir à
        <literal>-1</literal>, i.e. une valeur de <literal>1</literal> rend le
        curseur capable de ne retourner d'<emphasis>un seul</emphasis> document.
       </para>
      </warning>
      <para>
       Notez que cette fonctionnalité est différente de la méthode
       <function>MongoCursor::limit</function> car les documents doivent tenir
       dans une taille maximale, et elle supprime la nécessité d'envoyer une
       requête pour fermer le curseur côté serveur. La taille du lot peut être changée
       après l'itération d'un curseur, au quel cas la configuration sera appliquée
       lorsque le prochain lot sera récupéré.
      </para>
      <para>
       Cette méthode ne peut pas écraser la limite MongoDB de la quantité de données
       à retourner au client (i.e., si vous définissez la taille du lot à
       1.000.000.000, MongoDB continuera de retourner uniquement 4-16Mo de résultats
       par lot). 
      </para>
      <para>
       Afin d'assurer un comportement consistent, les règles de
       <function>MongoCursor::batchSize</function> et <function>MongoCursor::limit</function>
       sont assez complexes mais fonctionnent "comme attendues". Les règles sont :
       les limites dures écrasent les limites légères avec une préférence donnée
       à la méthode <function>MongoCursor::limit</function> sur la méthode
       <function>MongoCursor::batchSize</function>. Après cela, tout ce qui est défini
       et est inférieure à ce qui précède prendra le dessus ; voir ci-dessous pour plus
       d'exemples.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Retourne ce curseur.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCursor::batchSize</function> et des combinaisons
    avec la fonction <function>MongoCursor::limit</function></title>
   <programlisting role="php">
<![CDATA[
<?php

// un lot, au maximum de 10 éléments. Le -10 fera que le serveur retournera 10 éléments,
// puis, fermera le curseur.
$cursor->limit(20)->batchSize(-10);

// premier lot : un maximum de 10 éléments
$cursor->limit(10);

// premier lot : un maximum de 10 éléments
$cursor->limit(10)->batchSize(20);

// Les résultats sont récupérés en lot de 10 éléments, avec un maximum de 20 éléments
// retournés (cela signifie deux lots de 10).
$cursor->limit(20)->batchSize(10);

// Les résultats sont récupérés en lot de 7 éléments, avec un maximum de 30 éléments
// retournés (cela signifie que le driver demandera 4 lots de 7 éléments, et un lot
// de 2).
$cursor->limit(30)->batchSize(7)
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   La documentation coeur de MongoDB sur
   la fonction <link xlink:href="&url.mongodb.dochub.batchsize;">batchSize</link>.
  </para>
  <para>
   <simplelist>
    <member><function>MongoCursor::limit</function></member>
    <member><methodname>MongoCursorInterface::batchSize</methodname></member>
   </simplelist>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.4.5</entry>
       <entry>
        <para>
         Avant la version 1.4.5, cette méthode lançait une exception de type
         <classname>MongoCursorException</classname> si le curseur avait déjà
         commencé son itération.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
