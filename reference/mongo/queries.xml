<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f1e951b988e8aafe49b33bdf2f7812740c66c2d2 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongo.queries" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Interrogation</title>
 
 <simplesect xml:id="mongo.queries.secondaries">
  <title>Distribution des requêtes aux secondaires</title>
  
  <para>
   Toutes les requêtes (en lecture et en écriture) ne sont envoyées qu'au membre
   primaire du jeu de réplication par défaut. Ce comportement est cependant
   facilement configurable en utilisant les
   <link linkend="mongo.readpreferences">préférences de lecture</link> qui
   vous permettent de définir quelques préférences de lecture génériques (comme
   l'autorisation des lectures sur un secondaire du serveur le plus proche),
   mais aussi fournissent une façon de spécifier un serveur précis, dans un pays
   spécifique, un centre de données précis, ou même un matériel donné, en utilisant
   les <link linkend="mongo.readpreferences.tagsets">tags des jeux de réplication</link>.
  </para>
  <para>
   Les préférences de lecture peuvent être configurées à tous les niveaux du driver.
   <simplelist>
    <member>Sous la forme d'un paramètre ou d'une option à <methodname>MongoClient::__construct</methodname></member>
    <member>Spécifiquement, en appelant la méthode <methodname>MongoClient::setReadPreference</methodname></member>
    <member>Au niveau de la base de données, avec la méthode <methodname>MongoDB::setReadPreference</methodname></member>
    <member>Au niveau de la collection, avec la méthode <methodname>MongoCollection::setReadPreference</methodname></member>
    <member>Au niveau du curseur, avec la méthode <methodname>MongoCursor::setReadPreference</methodname> ou la méthode <methodname>MongoCommandCursor::setReadPreference</methodname></member>
   </simplelist>
   Chaque classe hérite de la configuration des préférences de lecture de le contexte appelant.
  </para>
  <example xml:id="mongo.queries.secondaries.inheritence-example">
   <title>Héritage des préférences de lecture depuis le niveau de la base de données vers le curseur</title>
   <programlisting role="php">
<![CDATA[
<?php
$db->setReadPreference(MongoClient::RP_SECONDARY_PREFERRED);
$c = $db->myCollection;

$cursor = $c->find();
?>
]]>
   </programlisting>
  </example>
  <para>
   Dans cet exemple, la requête sera exécutée sur un secondaire. La collection hérite de
   <constant>MongoClient::RP_SECONDARY_PREFERRED</constant> depuis la base de données,
   et le curseur en hérite de la collection.
  </para>
 </simplesect>
 
 
 <simplesect xml:id="mongo.queries.choosing.secondary">
  <title>Comment les secondaires sont-ils choisis ?</title>
  
  <para>
   Chaque instance de <classname>MongoClient</classname> choisit son secondaire
   en utilisant le secondaire ayant le ping le moins élevé. Ainsi, si nous
   avons un client PHP en Europe et un en Australie et que nous
   avons un secondaire dans chacun de ces data-centers, nous pouvons faire :
  </para>
  <example xml:id="mongo.queries.choosing.secondary-example">
   <programlisting role="php">
<![CDATA[
<?php
$options = array("replicaSet" => "setName", "readPreference" => MongoClient::RP_SECONDARY_PREFERRED);

// sur un client Australien
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Lecture depuis : ", $cursor->info()["server"], "\n";

// sur un client européen
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Lecture depuis : ", $cursor->info()["server"], "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Lecture depuis : australianHost
Lecture depuis : europeanHost
]]>
    </screen>
    <para>
     Notez que nous devons exécuter une requête avant qu'un secondaire
     ne soit choisi : les secondaires sont choisis par le driver et pour
     chaque requête, séparément.
    </para>
   </example>
   
   <para>
    Vous pouvez voir le choix du driver, en analysant le statut courant
    du membres du jeu, en exécutant la méthode <methodname>MongoClient::getHosts</methodname> ou
    la méthode <methodname>MongoClient::getConnections</methodname>.
   </para>
   
   <para>
    Si aucun secondaire n'est lisible, le driver enverra les lectures au primaire,
    tel que nous l'avons spécifié avec
    <constant>MongoClient::RP_SECONDARY_PREFERRED</constant>, qui aura comme comportement
    de repli que d'exécuter une requete sur un primaire, si aucune secondaire n'est
    disponible. Un serveur est considéré comme lisible si son état vaut 2 (secondaire)
    et sa santé vaut 1. Vous pouvez vérifier cela avec les méthodes
    <methodname>MongoClient::getHosts</methodname> et
    <methodname>MongoClient::getConnections</methodname>.
   </para>
   
 </simplesect>
 <simplesect xml:id="mongo.queries.notes">
  <title>Diverses notes</title>
   
   <para>
    Les écritures sont toujours envoyées au serveur principal et par défaut,
    toutes les lectures sont aussi envoyées au primaire.
   </para>
   <!--
   <para>
    The following database commands can be sent to secondaries when using the
    apropriate Read Preference:
    <simplelist>
     <member><methodname>MongoCollection::group</methodname></member>
     <member><methodname>MongoCollection::aggregate</methodname></member>
     <member><methodname>MongoCollection::distinct</methodname></member>
     <member><methodname>MongoCursor::count</methodname></member>
     <member>collStats</member>
     <member>dbStats</member>
     <member>geoNear</member>
     <member>geoSearch</member>
     <member>geoWalk</member>
     <member>inline mapreduce</member>
    </simplelist>
    All other commands are always sent to the primary.
   </para>
-->
 </simplesect>
 
 
 <simplesect xml:id="mongo.queries.querying">
  <title>Interrogation sur un _id</title>
  <para>
   Chaque objet inséré se voit assigné automatiquement un champ unique <literal>_id</literal>,
   qui est bien utile pour être utilisé dans les requêtes. Ceci fonctionne de façon
   similaire à la fonctionnalité "donne moi le dernier ID inséré", excepté que
   <literal>_id</literal> est choisi par le <emphasis>client</emphasis>.
  </para>
 <para>
  Supposez que vous voulez trouver un document que vous venez tout juste d'insérer.
  L'insertion ajoute un champ <literal>_id</literal> au document, aussi, vous pouvez
  effectuer votre requête de la sorte :
  
  <example xml:id="mongo.queries.querying-example">
   <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// Maintenant, $joe a un champ _id
$joe = $people->findOne(array("_id" => $person['_id']));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Tant que l'utilisateur ne l'a pas spécifié autrement, le champ <literal>_id</literal>
   est un <classname>MongoId</classname>. L'erreur la plus courante
   est d'essayer d'utiliser une chaîne qui correspond à un
   <classname>MongoId</classname>. Gardez à l'esprit que cet identifiant
   a 2 types de données différents, et ne correspond pas l'un l'autre,
   de la même façon que la chaîne "array()" n'est pas la même chose
   qu'un tableau vide. Par exemple :
   
   <example xml:id="mongo.queries.querying.wrong">
    <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// Conversion de l'_id en une chaîne
$pid = $person['_id'] . "";

// ECHEC - $pid est une chaîne, et non un MongoId
$joe = $people->findOne(array("_id" => $pid));
?>
]]>
    </programlisting>
   </example>
  </para>
 </simplesect>

 <simplesect xml:id="mongo.queries.arrays">
  <title>Les tableaux</title>
  <para>
   Les tableaux sont spéciaux à plus d'un titre. Tout d'abord, il y a 2 types
   utilisés par MongoDB : des tableaux "normaux" et des tableaux associatifs.
   Les tableaux associatifs peuvent avoir plusieurs types de clés et de valeurs.
   Les tableaux "normaux" sont définis comme tableaux dans ces indices numériques
   ascendants, en commençant par 0 et s'incrémentant de 1 pour chaque élément.
   Ces 2 types correspondent à ce que vous connaissez déjà comme type en PHP.
  </para>
  
  <para>
   Actuellement, si vous voulez sauvegarder la liste des récompenses
   dans un document, vous pouvez :
  </para>

  <example xml:id="mongo.queries.arrays-example">
   <programlisting role="php">
<![CDATA[
<?php

$collection->save(array("awards" => array("gold", "silver", "bronze")));

?>
]]>
   </programlisting>
  </example>
  
 <para>
  Les requêtes peuvent effectuer des recherches directement dans les éléments.
  Supposez que nous souhaitons trouver tous les documents dont l'élément du
  tableau est à une valeur fournie. Par exemple, les documents dont la
  récompense est l'or, comme ceci :
 </para>
  
 <screen>
<![CDATA[
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "awards" : ["gold", "silver", "bronze"]}
]]>
 </screen>
  
 <para>
  Ceci peut être effectué avec une requête simple, en ignorant le fait que "awards"
  est un tableau :
 </para>
  
 <example xml:id="mongo.queries.arrays-example-2">
    <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards" => "gold"));

?>
]]>
   </programlisting>
  </example>
 
 <para>
  Supposez que vous interrogiez la base de données avec un objet plus complexe,
  dont chaque élément du tableau sont eux-mêmes des objets, comme ceci :
 </para>
 
 <screen>
<![CDATA[
{ 
     "_id" : ObjectId("4b06c282edb87a281e09dad9"), 
     "awards" : 
     [
        {
            "first place" : "gold"
        },
        {
            "second place" : "silver" 
        },
        {
            "third place" :  "bronze"
        }
     ]
}
]]>
 </screen>
  
 <para>
  Continuons d'ignorer que c'est un tableau. Nous pouvons utiliser
  la notation basée sur les points pour interroger le sous-objet :
 </para>
  
   <example xml:id="mongo.queries.querying-arrays-nested">
    <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards.first place" => "gold"));

?>
]]>
   </programlisting>
  </example>
 <para>
  Notez qu'il importe peu qu'il y ait un espace dans le nom du champ
  (bien qu'il convient de ne pas en mettre, juste pour rendre le code
  plus lisible).
 </para>
 
 <para>
  Vous pouvez également utiliser un tableau contenant plusieurs valeurs
  à chercher. Actuellement, si nous cherchons les documents "gold" et "copper",
  nous pouvons le faire comme ceci :
 </para>

  <example xml:id="mongo.queries.querying-arrays-in">
   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards" => array('$in' => array("gold", "copper"))));

?>
]]>
   </programlisting>
  </example>
 </simplesect>

 <simplesect role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
<!--
     <row>
      <entry>1.3.1</entry>
      <entry>
       Several database commands can now be executed on secondaries.
      </entry>
     </row>
-->
     <row>
      <entry>1.3.0</entry>
      <entry>
       Introduction du framework pour les <link linkend="mongo.readpreferences">préférence
       de lecture</link> permettant une contrôle fin des lectures sur les secondaires.
      </entry>
     </row>
     <row>
      <entry>1.3.0</entry>
      <entry>
       L'utilisation de <literal>slaveOkay</literal> devient obsolète ; l'alternative est <link
       linkend="mongo.readpreferences">les préférences de lecture</link>.
      </entry>
     </row>
     <row>
      <entry>1.1.0</entry>
      <entry>
       Introduction de la possibilité de router les lectures vers les secondaires
       des membres du jeu de réplication, en utilisant la méthode
       <methodname>Mongo::setSlaveOkay</methodname>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </simplesect>

</chapter>
 
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
 