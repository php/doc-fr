<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<phpdoc:classref xml:id="class.mongocursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>&class.theclass; <classname>MongoCursor</classname></title>
 <titleabbrev>MongoCursor</titleabbrev>

 <partintro>

  <!-- {{{ Mongocursor intro -->
  <section xml:id="mongocursor.intro">
   &reftitle.intro;
   <para>
    Un curseur est utilisé pour itérer les résultats d'une requête.
    Par exemple regarder tous les résultats d'une requête quelconque :
    <example xml:id="mongocursor.intro-example">
     <title>Utilisation basique de <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
var_dump(iterator_to_array($cursor));

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    En général, vous ne créez pas de
    <classname>MongoCursor</classname> en utilisant le constructeur mais en 
    appelant <function>MongoCollection::find</function> (comme ci-dessus).
   </para>
   <para>
    Supposons que, dans l'exemple ci-dessus, <literal>$collection</literal> pèse
    50Go. On ne voudra certainement pas tout charger en mémoire, c'est ce que permet
    un curseur : permettre au client d'accéder aux données au fur et à mesure. 
   </para>
   <para>
    Si nous avons des jeux de résultats très grands, nous pouvons itérer dessus, ceci chargera
    seulement quelques méga-octets dans la mémoire. Par exemple :
    <example>
     <title>Parcourt d'un <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();

foreach ($cursor as $doc) {
    // faire quelque chose avec chaque document $doc
}

?>
]]>
     </programlisting>
    </example>
    Les documents ici sont créés puis détruits au fur et à mesure de l'itération.
   </para>
   <para>
    Notez que cela signifie qu'un curseur ne contient pas les données du jeu de résultats,
    il ne fait que les piloter. Ainsi si vous affichez un curseur (par exemple, avec
    <function>var_dump</function> ou <function>print_r</function>), vous n'obtiendrez que l'objet
    curseur, pas les documents. Pour obtenir les documents, vous pouvez utiliser une des techniques
    ci-dessus.
   </para>
  </section>

  <section>
   <title>Etats des curseurs</title>
   <para>
    Un <classname>MongoCursor</classname> a 2 états différents : Avant et après
    la requête. Lorsqu'un curseur est créé, il n'a pas encore contacté la base de données,
    il est en état pré-requête et le client peut toujours préciser ce qu'il attend de la requête,
    par exemple ajouter des limites, des tris ou encore des options avancées.
   </para>
   <para>
    Lorsque le client tente de récupérer un résultat (en appelant la fonction
    <function>MongoCursor::next</function>, directement ou indirectement),
    le curseur passe à l'état post-requête. À ce moment-là, la requête a été
    exécutée par la base et ne peut plus être modifiée.
   </para>
   <para>
    <example xml:id="mongocursor.stages.adding-options">
     <title>Ajout d'options à <classname>MongoCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find()->limit(10);

// la base n'a pas encore été interrogée,
// il est donc encore temps d'ajouter des options
$cursor = $cursor->sort(array("a" => 1));

var_dump($cursor->getNext());
// maintenant, la base a été interrogée, et les options ne sont plus prises en compte

// Cet commnande va produire une exception :
$cursor->skip(4);
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="mongocursor.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursor</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">Champs statiques</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>bool</type>
     <varname linkend="mongocursor.props.slaveokay">slaveOkay</varname>
     <initializer>&false;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>int</type>
     <varname linkend="mongocursor.props.timeout">timeout</varname>
     <initializer>30000</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

   <section>
    <title>Variables statiques</title>

   <variablelist>
    <varlistentry xml:id="mongocursor.props.slaveokay">
     <term><varname>slaveOkay</varname></term>
     <listitem>
      <para>
       Est ce que la requête doit avoir le drapeau "slaveOkay" activé, ce qui permet
       des lectures sur le secondaire (les secondaires sont par défaut déstinés à des sauvegardes
       et donc inaccessibles en lectures). Peut être surchargé avec
       <function>MongoCursor::slaveOkay</function>.
      </para>
      <para>
       Cette fonctionnalité est <emphasis>obsolète</emphasis>. Veuillez
       utiliser <xref linkend="mongo.readpreferences" /> à la place.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="mongocursor.props.timeout">
     <term><varname>timeout</varname></term>
     <listitem>
      <para>
       Affecte le timeout en millisecondes pour les réponses des bases
       de données. Pour un timeout infini, utilisez <literal>-1</literal>.
       Peut être surchargé avec <function>MongoCursor::timeout</function>.
       Ceci ne provoque pas une annulation de l'opération par le serveur
       MongoDB mais fait en sorte que le pilote s'arrête d'attendre une réponse
       et envoie une exception <classname>MongoCursorTimeoutException</classname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  
  <section role="seealso">
   &reftitle.seealso;
   <para>
    Documentation de MongoDB <link xlink:href="&url.mongodb.dochub.cursors;">concernant les
    curseurs</link>.
   </para>
  </section>
  
 </partintro>

 &reference.mongo.entities.mongocursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
