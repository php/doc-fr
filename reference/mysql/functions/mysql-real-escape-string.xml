<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Protège une commande SQL de la présence de caractères spéciaux</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   &mysql.alternative.note;
   <simplelist role="alternatives">
    <member><function>mysqli_real_escape_string</function></member>
    <member><methodname>PDO::quote</methodname></member>
   </simplelist>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>mysql_real_escape_string</function> protège une commande SQL
   de la chaîne <parameter>unescaped_string</parameter>, en "échappant" les caractères
   spéciaux tout en prenant en compte le jeu de caractères courant de la connexion <parameter>link_identifier</parameter>.
   Le résultat peut être utilisé sans problème avec la fonction <function>mysql_query</function>.
   Si des données binaires doivent être insérées, cette fonction doit être utilisée.
  </para>
  <para>
   <function>mysql_real_escape_string</function> appelle la fonction 
   <function>mysql_escape_string</function>
   de la bibliothèque MySQL qui ajoute un antislash aux caractères suivants :
   <literal>NULL</literal>, <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> et <literal>\x1a</literal>.
  </para>
  <para>
   Cette fonction doit toujours (avec quelques exceptions) être utilisée
   avant d'envoyer la requête à MySQL afin de protéger vos données d'injection
   de caractères pouvant dévoyer cette requête.
  </para>
  
  <caution>
   <title>Securité : le jeu de caractères par défaut</title>
   <para>
    Le jeu de caractèrs doit être défini soit au niveau
    serveur, soit avec la fonction API <function>mysql_set_charset</function>
    pour qu'il ait un effet sur la fonction
    <function>mysql_real_escape_string</function>. Voir
    la section sur les concepts
    on <link linkend="mysqlinfo.concepts.charset">des jeux de caractères</link>
    pour plus d'informations.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       La chaîne à échapper.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la chaîne échappée, ou &false; si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Exécuter cette fonction sans qu'une connexion MySQL ne soit présente
   va également émettre une erreur PHP de niveau <constant>E_WARNING</constant>.
   N'exécuter cette fonction qu'avec une connexion MySQL valide.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple simple avec <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Connexion
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
OR die(mysql_error());

// Requête
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
mysql_real_escape_string($user),
mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>mysql_real_escape_string</function> et la nécessité
     de la présence d'une connexion</title>
    <para>
     Cet exemple démonte ce qui survient si une connexion MySQL n'est pas présente
     lors de l'appel à la fonction.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Nous n'avons pas de connexion MySQL

$lastname  = "O'Reilly";
$_lastname = mysql_real_escape_string($lastname);

$query = "SELECT * FROM actors WHERE last_name = '$_lastname'";

var_dump($_lastname);
var_dump($query);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Warning: mysql_real_escape_string(): No such file or directory in /this/test/script.php on line 5
Warning: mysql_real_escape_string(): A link to the server could not be established in /this/test/script.php on line 5

bool(false)
string(41) "SELECT * FROM actors WHERE last_name = ''"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Un exemple d'attaque par injection SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// Nous ne vérifions pas $_POST['password'], il peut contenir ce que l'utilisateur veut ! Par exemple :
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Demande à la base de vérifier si un utilisateur correspond
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// Cela signifie que la requête envoyée à MySQL sera :
echo $query;
?>
]]>
    </programlisting>
    <para>
     La requête envoyée à MySQL :
    </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Cela permet à n'importe qui de s'identifier sans mot de passe valide.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Une connexion MySQL est nécessaire avant d'utiliser la fonction
    <function>mysql_real_escape_string</function>, sinon, une erreur
    de niveau <constant>E_WARNING</constant> sera générée, et &false; sera 
    retourné. Si <parameter>link_identifier</parameter> n'est pas défini, 
    la dernière connexion MySQL est utilisée.
   </para>
  </note>
  <note>
   <para>
    Si <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> est activée,
    appliquez d'abord la fonction <function>stripslashes</function> à vos données. 
    Utiliser cette fonction sur des données qui ont déjà été protégées, 
    les protégera une deuxième fois.
   </para>
  </note>
  <note>
   <para>
    Si cette fonction n'est pas utilisée pour protéger vos données, la requête
    sera vulnérable aux <link linkend="security.database.sql-injection">attaques 
    par injection SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> n'échappe ni 
    <literal>%</literal>, ni <literal>_</literal>. Ce sont des jokers en MySQL si 
    combinés avec <literal>LIKE</literal>, <literal>GRANT</literal>,
    ou <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_set_charset</function></member>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>La directive <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link></member>
    <member>La directive <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
