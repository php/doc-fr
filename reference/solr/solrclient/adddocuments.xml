<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b8758b0605e80c4e3610137b7502a6abeea5c69b Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="solrclient.adddocuments" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SolrClient::addDocuments</refname>
  <refpurpose>Ajoute une collection d'instances SolrInputDocument à l'index</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>SolrClient::addDocuments</methodname>
   <methodparam><type>array</type><parameter>docs</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>overwrite</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>commitWithin</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Ajoute une collection de documents à l'index.
  </para>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>docs</parameter></term>
     <listitem>
      <para>
       Un tableau contenant la collection d'instances SolrInputDocument.
       Ce tableau doit être une variable réelle.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>overwrite</parameter></term>
     <listitem>
      <para>
       Si l'on doit écraser les documents ou non. Si vaut &false;,
       les documents seront dupliqués (plusieurs documents avec le même ID).
      </para>
      <warning>
       <para>
        PECL Solr &lt; 2.0 $allowDups était utilisé au lieu de $overwrite,
        qui remplissait exactement la même fonctionnalité, mais à l'opposé.
       </para>
       <para>
        $allowDups = false est identique à $overwrite = true
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>commitWithin</parameter></term>
     <listitem>
      <para>
       Nombre de millisecondes d'attente avant de valider automatiquement ce
       document. Disponible depuis Solr 1.4. Par défaut, vaut 0, ce qui signifie
       que ce mécanisme est désactivé.
      </para>
      <para>
       Lorsque cette valeur est spécifiée, le contrôle du moment de la validation
       est laissé à Solr, cherchant à optimiser le nombre de validations à son minimum,
       tout en gardant une exigence forte concernant la latence des mises à jour,
       et Solr fera automatiquement une validation lorsque le plus vielle ajout
       du buffer est atteint.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <type>SolrUpdateResponse</type> en cas de succès,
   et lance une exception si une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>SolrClientException</classname> si le client a échoué
   ou s'il y a eu un problème avec la connexion.
  </para>
  <para>
   Lance une exception <classname>SolrServerException</classname> si le serveur
   Solr a échoué dans l'exécution de la requête.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>SolrClient::addDocuments</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

$options = array
(
    'hostname' => SOLR_SERVER_HOSTNAME,
    'login'    => SOLR_SERVER_USERNAME,
    'password' => SOLR_SERVER_PASSWORD,
    'port'     => SOLR_SERVER_PORT,
);

$client = new SolrClient($options);

$doc = new SolrInputDocument();

$doc->addField('id', 334455);
$doc->addField('cat', 'Software');
$doc->addField('cat', 'Lucene');

$doc2 = clone $doc;

$doc2->deleteField('id');
$doc2->addField('id', 334456);

$docs = array($doc, $doc2);

$updateResponse = $client->addDocuments($docs);

// Aucune modification ne sera écrite sur le disque tant que l'argument $commitWithin ne soit passé, ou la méthode SolrClient::commit appelée.

print_r($updateResponse->getResponse());

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
SolrObject Object
(
    [responseHeader] => SolrObject Object
        (
            [status] => 0
            [QTime] => 2
        )

)

]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SolrClient::addDocument</methodname></member>
    <member><methodname>SolrClient::commit</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
