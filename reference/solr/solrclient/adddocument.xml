<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b8758b0605e80c4e3610137b7502a6abeea5c69b Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="solrclient.adddocument" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SolrClient::addDocument</refname>
  <refpurpose>Ajoute un document à l'index</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>SolrUpdateResponse</type><methodname>SolrClient::addDocument</methodname>
   <methodparam><type>SolrInputDocument</type><parameter>doc</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>overwrite</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>commitWithin</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode ajoute un document à l'index.
  </para>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>doc</parameter></term>
     <listitem>
      <para>
       L'instance SolrInputDocument.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>overwrite</parameter></term>
     <listitem>
      <para>
       Si l'on doit ou non écraser un document existant.
       Si vaut &false;, il sera dupliqué (plusieurs documents avec le même ID).
      </para>
      <warning>
       <para>
        PECL Solr &lt; 2.0 $allowDups était utilisé à la place de $overwrite ;
        il s'agit de la même fonctionnalité, mais avec une valeur opposée.
       </para>
       <para>
        $allowDups = false est identique à $overwrite = true
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>commitWithin</parameter></term>
     <listitem>
      <para>
       Nombre de millisecondes après lequel le document doit être valié.
       Disponible depuis Solr 1.4. Par défaut, vaut 0 (désactivé).
      </para>
      <para>
       Lorsque cette valeur est spécifiée, elle laisse le contrôle à Solr
       sur le moment où la validation doit être réalisée, permettant ainsi
       d'optimiser le nombre de validations, et donc, de mieux contrôler
       les eigences de latence des mises à jour ; Solr va automatiquement
       réaliser une validation lorsque le plus vieille ajout du buffer est atteint.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <type>SolrUpdateResponse</type> et lance une
   exception si une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>SolrClientException</classname> si le client a échoué
   ou s'il y a eu un problème avec la connexion.
  </para>
  <para>
   Lance une exception <classname>SolrServerException</classname> si le serveur
   Solr a échoué dans l'exécution de la requête.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>SolrClient::addDocument</methodname> example</title>
    <programlisting role="php">
<![CDATA[

<?php

$options = array
(
    'hostname' => SOLR_SERVER_HOSTNAME,
    'login'    => SOLR_SERVER_USERNAME,
    'password' => SOLR_SERVER_PASSWORD,
    'port'     => SOLR_SERVER_PORT,
);

$client = new SolrClient($options);

$doc = new SolrInputDocument();

$doc->addField('id', 334455);
$doc->addField('cat', 'Software');
$doc->addField('cat', 'Lucene');

$updateResponse = $client->addDocument($doc);

// vous devriez valider ces modifications si vous n'utilisez pas $commitWithin
$client->commit();

print_r($updateResponse->getResponse());

?>

]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[

SolrObject Object
(
    [responseHeader] => SolrObject Object
        (
            [status] => 0
            [QTime] => 1
        )

)

]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple 2 avec <methodname>SolrClient::addDocument</methodname></title>
    <programlisting role="php">
<![CDATA[

<?php

$options = array
(
    'hostname' => SOLR_SERVER_HOSTNAME,
    'login'    => SOLR_SERVER_USERNAME,
    'password' => SOLR_SERVER_PASSWORD,
    'port'     => SOLR_SERVER_PORT,
);

$client = new SolrClient($options);

$doc = new SolrInputDocument();

$doc->addField('id', 334455);
$doc->addField('cat', 'Software');
$doc->addField('cat', 'Lucene');

// Inutile d'appeler commit() car $commitWithin est passé ; ainsi,
// le serveur Solr va valider automatiquement dans les 10 secondes

$updateResponse = $client->addDocument($doc, false, 10000);

print_r($updateResponse->getResponse());

?>

]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[

SolrObject Object
(
    [responseHeader] => SolrObject Object
        (
            [status] => 0
            [QTime] => 1
        )

)

]]>
    </screen>
    </example> 
    
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SolrClient::addDocuments</methodname></member>
    <member><methodname>SolrClient::commit</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
