<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0545e305cf06937b14b3f0694d6e716c9881ffd7 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="solrclient.commit" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SolrClient::commit</refname>
  <refpurpose>Commit tous les ajouts/modifications effectués sur l'index</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>SolrUpdateResponse</type><methodname>SolrClient::commit</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>softCommit</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>waitSearcher</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>expungeDeletes</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Commit tous les ajouts/modifications effectués sur l'index.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>softCommit</parameter></term>
     <listitem>
      <para>
       Va rafraîchir la vue de l'index d'une façon plus performante,
       mais sans aucune garantie d'être sur le disque. (Solr4.0+)
      </para>
      <para>
       Un commit "soft" est plus rapide sachant qu'il ne modifie que l'index,
       et ne synchronise pas les fichiers d'index, ni n'écrit de nouveaux descripteurs
       d'index. Si le JVM crash ou s'il y a un perte d'énergie, les modificiations
       qui sont survenues après le dernier commit "hard" seront perdues.
       Les collections de recherche, qui ont des besoins proches du temps réel
       (qui nécessitent donc que les modifications soient rapidement visibles)
       doivent avoir des commit soft régulièrement, et moins de commit hard.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>waitSearcher</parameter></term>
     <listitem>
      <para>
       Attend jusqu'à ce qu'un nouvel objet de recherche soit ouvert
       et enregistré comme objet de recherche principal, rendant visible
       les modifications. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expungeDeletes</parameter></term>
     <listitem>
      <para>
       Supprime définitivement les effacements. (Solr1.4+)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <classname>SolrUpdateResponse</classname> en cas de succès,
   et lance une exception si une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>SolrClientException</classname> si le client a échoué
   ou s'il y a eu un problème avec la connexion.
  </para>
  <para>
   Lance une exception <classname>SolrServerException</classname> si le serveur
   Solr a échoué dans l'exécution de la requête.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL solr 1.1.0, PECL solr 2.0.0</entry>
       <entry>
        Suppression de l'argument $maxSegments
       </entry>
      </row>
      <row>
       <entry>PECL solr 2.0.0b</entry>
       <entry>
        Modification de l'API : SolrClient::commit ([ int $maxSegments = 0 [, bool $softCommit = false [, bool $waitSearcher = true[, bool $expungeDeletes = false ]]] )
       </entry>
      </row>
      <row>
       <entry>PECL solr 0.9.2</entry>
       <entry>
        Signature : SolrClient::commit ([ int $maxSegments = 1 [, bool $waitFlush = true [, bool $waitSearcher = true ]]] ). 
        $waitFlush : bloc tant que les modifications de l'index ne sont pas écrites sur le disque.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    PECL Solr &gt;= 2.0 ne supporte que le serveur Solr &gt;= 4.0 
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SolrClient::optimize</methodname></member>
    <member><methodname>SolrClient::rollback</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
