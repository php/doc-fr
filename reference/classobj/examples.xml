<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6f11457f11d91834e1240c3351d8c4e289371b6d Maintainer: yannick Status: ready -->
<!-- Reviewed: no Maintainer: pmartin -->

<appendix xml:id="classobj.examples">
 &reftitle.examples;
 <para>
  Dans cet exemple, nous commençons par définir une classe
  de base ainsi qu'une extension de cette classe. La classe
  de base décrit un légume, s'il peut être consommé, et qu'elle est sa couleur.
  La sous-classe <varname>Spinach</varname> ajoute une méthode
  pour le cuisiner, et une autre pour déterminer s'il est cuit.
 </para>
 <para>
  <example>
   <title>Définitions des Classes</title>
   <para><varname>Vegetable</varname></para>
   <programlisting role="php">
<![CDATA[
<?php
class Vegetable {
    public $edible;
    public $color;
    public function __construct($edible, $color = "green")
    {
        $this->edible = $edible;
        $this->color = $color;
    }
    public function isEdible()
    {
        return $this->edible;
    }
    public function getColor()
    {
        return $this->color;
    }
}
?>
]]>
   </programlisting>
   <para><varname>Spinach</varname></para>
   <programlisting role="php">
<![CDATA[
<?php
class Spinach extends Vegetable {
    public $cooked = false;
    public function __construct()
    {
        parent::__construct(true, "green");
    }
    public function cook()
    {
        $this->cooked = true;
    }
    public function isCooked()
    {
        return $this->cooked;
    }
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Nous créons ensuite deux objets depuis ces classes et affichons
  des informations sur ceux-ci, incluant leur classe
  parente. Nous définissons également des fonctions utilitaires,
  principalement afin d'obtenir un affichage plus joli des variables.
 </para>

 <para>
  <example>
   <title>test_script.php</title>
   <programlisting role="php">
<![CDATA[
<?php
// register autoloader to load classes
spl_autoload_register();
function printProperties($obj)
{
    foreach (get_object_vars($obj) as $prop => $val) {
        echo "\t$prop = $val\n";
    }
}
function printMethods($obj)
{
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method) {
        echo "\tfunction $method()\n";
    }
}
function objectBelongsTo($obj, $class)
{
    if (is_subclass_of($obj, $class)) {
        echo "Object belongs to class " . get_class($obj);
        echo ", a subclass of $class\n";
    } else {
        echo "Object does not belong to a subclass of $class\n";
    }
}
// instantiate 2 objects
$veggie = new Vegetable(true, "blue");
$leafy = new Spinach();
// print out information about objects
echo "veggie: CLASS " . get_class($veggie) . "\n";
echo "leafy: CLASS " . get_class($leafy);
echo ", PARENT " . get_parent_class($leafy) . "\n";
// show veggie properties
echo "\nveggie: Properties\n";
printProperties($veggie);
// and leafy methods
echo "\nleafy: Methods\n";
printMethods($leafy);
echo "\nParentage:\n";
objectBelongsTo($leafy, Spinach::class);
objectBelongsTo($leafy, Vegetable::class);
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
veggie: CLASS Vegetable
leafy: CLASS Spinach, PARENT Vegetable
veggie: Properties
        edible = 1
        color = blue
leafy: Methods
        function __construct()
        function cook()
        function isCooked()
        function isEdible()
        function getColor()
Parentage:
Object does not belong to a subclass of Spinach
Object belongs to class Spinach, a subclass of Vegetable
]]>
   </screen>
   <para>
    Une chose importante à noter dans l'exemple ci-dessus est
    que l'objet <varname>$leafy</varname> est une instance
    de la classe <classname>Spinach</classname> qui est une
    sous-classe de <classname>Vegetable</classname>.
   </para>
  </example>
 </para>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

