<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdo.begintransaction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::beginTransaction</refname>
  <refpurpose>
   Démarre une transaction
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDO::beginTransaction</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <methodname>PDO::beginTransaction</methodname> désactive le mode
   <literal>autocommit</literal>. Lorsque l'autocommit est désactivé,
   les modifications faites sur la base de données via les instances des
   objets PDO ne sont pas appliquées tant que vous ne mettez pas fin à la
   transaction en appelant la fonction <methodname>PDO::commit</methodname>.
   L'appel de <methodname>PDO::rollBack</methodname> annulera toutes les modifications
   faites à la base de données et remettra la connexion en mode autocommit.
  </para>
  <para>
   Quelques bases de données, dont MySQL, exécuteront automatiquement un COMMIT
   lorsqu'une requête de définition de langage de base de données (DDL) comme
   DROP TABLE ou CREATE TABLE est exécutée dans une transaction. Ce COMMIT
   implicite vous empêchera d'annuler toutes autres modifications faites dans cette
   transaction.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance l'exception <classname>PDOException</classname> si une transaction a déjà démarrée ou que le pilote ne prend pas encharge les tansactions.
  </para>
  &pdo.errors.exception-not-errmode;
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Annule une transaction</title>
    <para>
     L'exemple suivant commence une transaction et exécute deux requêtes
     qui modifient la base de données avant d'annuler les modifications. Sur MySQL,
     cependant, la requête DROP TABLE validera automatiquement la transaction,
     donc, aucune des modifications de la transaction ne sera annulée.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Démarre une transaction, désactivation de l'auto-commit */
$dbh->beginTransaction();

/* Modification du schéma de la base ainsi que des données */
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
SET name = 'hamburger'");

/* On s'aperçoit d'une erreur et on annule les modifications */
$dbh->rollBack();

/* Le connexion à la base de données est maintenant de retour en mode auto-commit */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::commit</methodname></member>
    <member><methodname>PDO::rollBack</methodname></member>
    <member><link linkend="pdo.transactions">Transactions et auto-commit</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
