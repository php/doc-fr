<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   Prépare une requête à l'exécution et retourne un objet
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   Prépare une requête SQL à être exécutée par la méthode
   <methodname>PDOStatement::execute</methodname>. Le modèle de déclaration peut contenir
   zéro ou plusieurs paramètres nommés (<literal>:nom</literal>) ou marqueurs
   (<literal>?</literal>) pour lesquels les valeurs réelles seront substituées
   lorsque la requête sera exécutée.
   L'utilisation à la fois des paramètres nommés ainsi que les marqueurs est
   impossible dans un modèle de déclaration ; seul l'un ou l'autre style de paramètre.
   Utilisez ces paramètres pour lier les entrées utilisateurs, ne les incluez pas
   directement dans la requête.
  </para>
  <para>
   Vous devez inclure un marqueur avec un nom unique pour chaque valeur que
   vous souhaitez passer dans la requête lorsque vous appelez
   <methodname>PDOStatement::execute</methodname>. Vous ne pouvez pas utiliser
   un marqueur avec deux noms identiques dans une requête préparée, à moins que 
   le mode émulation ne soit actif.
  </para>
<note>
   <para>
    Les marqueurs de paramètres peuvent représenter uniquement un littéral de 
    données complet.
    Ni une partie de littéral, ni un mot clé, ni un identifiant, ni toute autre 
    requête arbitraire ne peuvent être liés en utilisant les paramètres.       
    Par exemple, vous ne pouvez associer plusieurs valeurs à un seul marqueur de nom entrant, dans la clause IN() d'une requête SQL. 
   </para>
  </note>
  <para>
   Appeler <methodname>PDO::prepare</methodname> et
   <methodname>PDOStatement::execute</methodname> pour les requêtes
   qui doivent être exécutées plusieurs fois avec différentes valeurs de
   paramètres optimisent les performances de votre application en autorisant
   le pilote à négocier coté client et/ou serveur avec le cache des requêtes
   et les meta-informations. Deplus appeler <methodname>PDO::prepare</methodname> et
   <methodname>PDOStatement::execute</methodname> aident à prévenir les attaques par
   injection SQL en éliminant le besoin de protéger les paramètres manuellement.
  </para>
  <para>
   PDO émule les requêtes préparées / les paramètres liés pour les pilotes
   qui ne le supportent pas nativement, et peut également réécrire les
   paramètres nommés ou les marqueurs en quelques choses de plus
   approprié, si le pilote supporte un style et pas l'autre.
  </para>
  <note>
   <simpara>
    L'analyseur utilisé pour les déclarations préparés
    émulées et pour réécrire les paramètres nommés ou du style point
    d'intérogation supporte l'échappement antislash non standard pour les
    guillemets simple et double. Ceci signifie que des guillemets terminant qui
    sont précédés par un antislash ne seront pas reconnue comme tel, ce qui peut
    résulter dans une mauvaise détection des paramètres causant la déclaration
    préparer d'échouer lorsqu'elle est exécuté. Un contournement est de ne pas
    utiliser les requêtes émulées pour de telles requêtes SQL, et d'éviter de
    réécrite les paramètres en utilisant un style de paramètre qui est
    supporté nativement par le pilote.
   </simpara>
  </note>
  <para>
   À partir de PHP 7.4.0, les points d'interrogation peuvent être échappés en les dédoublant.
   Cela signifie que la chaîne <literal>??</literal> sera traduite en <literal>?</literal>
   lors de l'envoi de la requête à la base de données.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Doit être un modèle de requête SQL valide pour le serveur de base de données ciblée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Ce tableau contient une ou plusieurs paires clé=&gt;valeur pour définir
       les valeurs des attributs pour l'objet <classname>PDOStatement</classname>
       que cette méthode retourne. Vous pouvez utiliser ceci pour définir la valeur
       <literal>PDO::ATTR_CURSOR</literal> à
       <literal>PDO::CURSOR_SCROLL</literal> pour demander un curseur scrollable.
       Quelques pilotes ont des options spécifiques qui peuvent être définies
       au moment de la préparation.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si le serveur de base de données prépare avec succès cette requête,
   <methodname>PDO::prepare</methodname> retourne un objet <classname>PDOStatement</classname>.
   Si le serveur de base de données ne réussit pas à préparer la requête,
   <methodname>PDO::prepare</methodname> retourne &false; ou émet une exception
   <classname>PDOException</classname> (suivant le
   <link linkend="pdo.error-handling">gestionnaire des erreurs</link>).
  </para>
  <note>
   <para>
    L'émulation de requêtes préparées ne communique pas avec le serveur de base
    de données. Aussi, la fonction <methodname>PDO::prepare</methodname> ne vérifie
    pas la requête.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Modèle de déclaration SQL avec des paramètres nommés</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$sql = 'SELECT nom, couleur, calories
    FROM fruit
WHERE calories < :calories AND couleur = :couleur';
$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
$sth->execute(array('calories' => 150, 'couleur' => 'red'));
$red = $sth->fetchAll();
/* Les clés du tableau peuvent être préfixées par des deux-points ":" également (facultatif) */
$sth->execute(array(':calories' => 175, ':couleur' => 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Modèle de déclaration SQL avec des marqueurs</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->execute(array(150, 'rouge'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'jaune'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Modèle de déclaration SQL avec un point d'interrogation échappé</title>
    <programlisting role="php">
<![CDATA[
<?php
/* note: ceci n'est valable que pour les bases de données PostgreSQL */
$sth = $dbh->prepare('SELECT * FROM issues WHERE tag::jsonb ?? ?');
$sth->execute(['feature']);
$featureIssues = $sth->fetchAll();
$sth->execute(['performance']);
$performanceIssues = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
