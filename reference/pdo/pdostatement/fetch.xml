<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Récupère la ligne suivante d'un jeu de résultats PDO
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  
  <para>
   Récupère une ligne depuis un jeu de résultats associé à l'objet
   <literal>PDOStatement</literal>. Le paramètre
   <parameter>mode</parameter> détermine la façon dont PDO retourne
   la ligne.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Contrôle comment la prochaine ligne sera retournée à l'appelant. Cette valeur
       doit être une des constantes <literal>PDO::FETCH_*</literal>,
       et par défaut, vaut la valeur de <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>
       (qui vaut par défaut la valeur de la constante <literal>PDO::FETCH_BOTH</literal>).
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: retourne un tableau indexé par le nom
         de la colonne comme retourné dans le jeu de résultats
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (défaut): retourne un tableau indexé
         par les noms de colonnes et aussi par les numéros de colonnes, 
         commençant à l'index 0, comme retournés dans le jeu de résultats
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>: retourne &true; et assigne les valeurs
         des colonnes de votre jeu de résultats dans les variables PHP à laquelle
         elles sont liées avec la méthode
         <methodname>PDOStatement::bindColumn</methodname>
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>: retourne une nouvelle instance
         de la classe demandée, liant les colonnes du jeu de résultats aux noms des
         propriétés de la classe et en appelant le constructeur par la suite, 
         sauf si <literal>PDO::FETCH_PROPS_LATE</literal> est également donné. 
         Si <parameter>fetch_style</parameter>
         inclut PDO::FETCH_CLASS (c'est-à-dire <literal>PDO::FETCH_CLASS |
         PDO::FETCH_CLASSTYPE</literal>), alors le nom de la classe est
         déterminé à partir d'une valeur de la première colonne.
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal> : met à jour une instance existante 
         de la classe demandée, liant les colonnes du jeu de résultats aux noms des propriétés
         de la classe
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal> : combine
         <literal>PDO::FETCH_BOTH</literal> et <literal>PDO::FETCH_OBJ</literal>,
         créant ainsi les noms des variables de l'objet, comme elles sont accédées
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal> : retourne un tableau de la même
         forme que <literal>PDO::FETCH_ASSOC</literal>, excepté que s'il y a
         plusieurs colonnes avec les mêmes noms, la valeur pointée par cette clé
         sera un tableau de toutes les valeurs de la ligne qui a ce nom comme colonne
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal> : retourne un tableau indexé par le
         numéro de la colonne comme elle est retourné dans votre jeu de résultat,
         commençant à 0
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal> : retourne un objet anonyme avec les
         noms de propriétés qui correspondent aux noms des colonnes retournés dans le
         jeu de résultats
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal> : lorsqu'il est utilisé avec 
         <literal>PDO::FETCH_CLASS</literal>, le constructeur de la classe est 
         appelé avant que les propriétés ne soient assignées à partir des 
         valeurs de colonne respectives.
         </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Pour un objet PDOStatement représentant un curseur scrollable,
       cette valeur détermine quelle ligne sera retournée à l'appelant.
       Cette valeur doit être une des constantes 
       <literal>PDO::FETCH_ORI_*</literal>, et par défaut, vaut 
       <literal>PDO::FETCH_ORI_NEXT</literal>. Pour demander un curseur
       scrollable pour votre objet PDOStatement, vous devez définir
       l'attribut <literal>PDO::ATTR_CURSOR</literal> à <literal>PDO::CURSOR_SCROLL</literal>
       lorsque vous préparez la requête SQL avec la fonction
       <methodname>PDO::prepare</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para> 
       Pour un objet PDOStatement représentant un curseur scrollable pour
       lequel le paramètre <parameter>cursorOrientation</parameter> est défini
       à <literal>PDO::FETCH_ORI_ABS</literal>, cette valeur spécifie
       le numéro absolu de la ligne dans le jeu de résultats qui doit être
       récupérée.
      </para>
      <para>
       Pour un objet PDOStatement représentant un curseur scrollable pour
       lequel le paramètre <parameter>cursorOrientation</parameter> est défini
       à <literal>PDO::FETCH_ORI_REL</literal>, cette valeur spécifie la ligne
       à récupérer relativement à la position du curseur avant l'appel à la fonction
       <methodname>PDOStatement::fetch</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur retournée par cette fonction en cas de succès dépend du type récupéré.
   Dans tous les cas, &false; est retourné si une erreur survient ou s'il n'y a plus de lignes.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Récupération de lignes en utilisant différentes méthodes</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* styles PDOStatement::fetch */
print("PDO::FETCH_ASSOC: ");
print("Retourne la ligne suivante en tant qu'un tableau indexé par le nom des colonnes\n");
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Retourne la ligne suivante en tant qu'un tableau indexé par le nom et le numéro de la colonne\n");
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés\n");
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés\n");
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print("\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Retourne la ligne suivante en tant qu'un tableau indexé par le nom des colonnes
Array
(
    [nom] => apple
    [couleur] => red
)

PDO::FETCH_BOTH: Retourne la ligne suivante en tant qu'un tableau indexé par le nom et le numéro de la colonne
Array
(
    [nom] => banana
    [0] => banana
    [couleur] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés PDORow Object
(
    [nom] => orange
    [couleur] => orange
)

PDO::FETCH_OBJ: Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés kiwi
]]>
    </screen>
   </example>
   <example>
    <title>Récupération des lignes avec un curseur scrollable</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR, PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR, PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Lecture en avant :\n";
readDataForwards($conn);

print "Lecture en arrière :\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lecture en avant :
21    10    5
16    0     5
19    20    10

Lecture en arrière :
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>
   
   <example><title>Ordre de construction</title>
    <simpara>
     Lorsque des objets sont récupérés via <literal>PDO::FETCH_CLASS</literal>, 
     les propriétés de l'objet sont assignées en premier, puis le constructeur 
     de la classe est appelé. Si <literal>PDO::FETCH_PROPS_LATE</literal> est 
     également donné, cet ordre est inversé, c'est à dire d'abord le 
     constructeur est appelé, et ensuite les propriétés sont assignées.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Je suis {$this->name}.\n";
        } else {
            echo "Je n'ai pas encore de nom.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Je suis Alice.
Je suis Alice.
Je n'ai pas encore de nom.
Je suis Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
