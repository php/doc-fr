<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdostatement.bindcolumn" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindColumn</refname>
  <refpurpose>
  Lie une colonne à une variable PHP
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindColumn</methodname>
    <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>column</parameter></methodparam>
    <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>maxLength</parameter><initializer>0</initializer></methodparam>
    <methodparam choice="opt"><type>mixed</type><parameter>driverOptions</parameter><initializer>&null;</initializer></methodparam>
   </methodsynopsis>

   <para>
    <methodname>PDOStatement::bindColumn</methodname> fait en sorte qu'une
    variable PHP soit liée à une colonne données dans le jeu de résultats
    dans une requête. Chaque appel à la fonction 
    <methodname>PDOStatement::fetch</methodname> ou 
    <methodname>PDOStatement::fetchAll</methodname> met à jour toutes les variables
    qui sont liées aux colonnes.
  </para>
  <note>
   <para>
    Étant donné que les informations sur les colonnes ne sont pas toujours disponibles
    à PDO tant que la requête n'est pas exécutée, les applications portables
    doivent appeler cette fonction <emphasis>après</emphasis>
    la fonction <methodname>PDOStatement::execute</methodname>.
   </para>
   <para>
    Cependant, pour pouvoir lier une colonne de type LOB avec un flux
    lors de l'utilisation du <emphasis>pilote PostGreSQL</emphasis>,
    les applications doivent appeler cette méthode
    <emphasis>avant</emphasis> d'appeler
    <methodname>PDOStatement::execute</methodname>, sous peine de recevoir
    l'objet OID sous forme d'&integer;.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Numéro de la colonne (en commençant à 1) ou nom de la colonne dans 
       le jeu de résultats. Si vous utilisez les noms de colonnes, 
       assurez-vous que le nom corresponde à la casse de la colonne, comme
       retourné par le pilote.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Nom de la variable PHP à laquelle la colonne doit être liée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
    <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Type du paramètre, spécifié par les constantes
       <link linkend="pdo.constants"><literal>PDO::PARAM_*</literal></link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>maxLength</parameter></term>
     <listitem>
      <para>
       Une astuce pour la pré-allocation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driverOptions</parameter></term>
     <listitem>
      <para>
       Paramètres optionnels pour la bibliothèque.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Lie l'affichage du jeu de résultats à des variables PHP</title>
    <para>
     Lie les colonnes du jeu de résultats aux variables PHP est une façon
     agréable de rendre les données contenues dans chaque ligne 
     immédiatement disponible à votre application. L'exemple suivant
     montre comment PDO vous autorise à lier et récupérer les colonnes
     avec une variété d'options.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare('SELECT name, colour, calories FROM fruit');
$stmt->execute();

/* Lie par les numéros de colonnes */
$stmt->bindColumn(1, $name);
$stmt->bindColumn(2, $colour);

/* Lie par les noms de colonnes */
$stmt->bindColumn('calories', $cals);
while ($stmt->fetch(PDO::FETCH_BOUND)) {
    print $name . "\t" . $colour . "\t" . $cals . "\n";
}
readData($dbh);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
pomme   rouge     150
banane  jaune  175
kiwi    vert   75
orange  orange  150
mangue   rouge     200
fraise      rouge     25
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
