<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdostatement.closecursor" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>
   Ferme le curseur, permettant à la requête d'être de nouveau exécutée
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>

  <para>
   <methodname>PDOStatement::closeCursor</methodname> libère la connexion
   au serveur, permettant ainsi à d'autres requêtes SQL d'être exécutées, mais
   laisse la requête dans un état lui permettant d'être de nouveau exécutée.
  </para>
  <para>
   Cette méthode est utile pour les drivers de base de données qui ne supportent
   pas l'exécution d'objet PDOStatement lorsqu'un objet PDOStatement exécuté
   précédemment a encore des lignes non récupérées. Si votre driver de base de
   données souffre de cette limitation, le problème se manifestera de lui-même
   dans une erreur en dehors de la séquence.
  </para>
  <para>
   <methodname>PDOStatement::closeCursor</methodname> est implémenté soit
   en tant que méthode optionnelle spécifique au pilote, avec un maximum
   d'efficacité, ou en tant que solution générique si aucune fonction
   spécifique au pilote n'est installée.
   Sémantiquement, la fonction générique PDO revient à
   écrire le code suivant dans votre script PHP :
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
?>
]]>
   </programlisting>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>PDOStatement::closeCursor</methodname></title>
    <para>
     Dans l'exemple suivant, l'objet PDOStatement <varname>$stmt</varname>
     retourne de multiples lignes, mais l'application récupère uniquement
     la première ligne, laissant l'objet PDOStatement dans l'état où il lui reste
     des lignes non récupérées. Pour vous assurez que l'application fonctionnera
     avec tous les drivers de base de données, l'auteur insère un appel à la fonction
     <methodname>PDOStatement::closeCursor</methodname> sur
     <varname>$stmt</varname> avant l'exécution d'objet PDOStatement
     <varname>$otherStmt</varname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Création d'un objet PDOStatement */
$stmt = $dbh->prepare('SELECT foo FROM bar');

/* Création d'un second objet PDOStatement */
$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');

/* Exécute la première requête */
$stmt->execute();

/* Récupération de la première ligne uniquement depuis le résultat */
$stmt->fetch();

/* L'appel suivant à closeCursor() peut être requis par quelques drivers */
$stmt->closeCursor();

/* Maintenant, nous pouvons exécuter la deuxième requête */
$otherStmt->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
