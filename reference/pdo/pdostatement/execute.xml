<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdostatement.execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::execute</refname>
  <refpurpose>
   Exécute une requête préparée
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::execute</methodname>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>params</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Exécute une <link linkend="pdo.prepared-statements">requête préparée</link>. 
   Si la requête préparée inclut des marqueurs de positionnement, vous pouvez :
   <itemizedlist>
    <listitem><para><methodname>PDOStatement::bindParam</methodname> et/ou 
     <methodname>PDOStatement::bindValue</methodname> doit être appelé pour lier 
     des variables ou des valeurs (respectivement) aux marqueurs de paramètres. 
     Les variables liées passent leurs valeurs en entrée et reçoivent les 
     valeurs de sortie, s'il y en a, de leurs marqueurs de positionnement 
     respectifs</para></listitem>
    <listitem>
     <para>ou passer un tableau de valeurs de paramètres, uniquement en entrée</para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Un tableau de valeurs avec autant d'éléments qu'il y a de paramètres à
       associer dans la requête SQL qui sera exécutée.
       Toutes les valeurs sont traitées comme des constantes
       <constant>PDO::PARAM_STR</constant>.
      </para>
      <para>
       Les valeurs multiples ne peuvent pas être liées à un seul paramètre; par 
       exemple, il n'est pas autorisé de lier deux valeurs à un seul paramètre 
       nommé dans une clause IN().
      </para>
      <para>
       La liaison de plus de valeurs que spécifié n'est pas possible ; s'il y a 
       plus de clés dans <parameter>params</parameter> que dans le
       code SQL utilisé pour <methodname>PDO::prepare</methodname>, alors la 
       requête préparée échouera et une erreur sera levée.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exécute une requête préparée avec des variables et valeurs liées</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en liant des variables et valeurs */
$calories = 150;
$couleur = 'ver';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < :calories AND couleur LIKE :couleur');
$sth->bindParam('calories', $calories, PDO::PARAM_INT);
/* Les noms peuvent aussi être préfixés par des deux-points ":" (facultatif) */
$sth->bindValue(':colour', "%$colour%");
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exécute une requête préparée avec un tableau de valeurs nommées</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < :calories AND couleur = :couleur');
$sth->execute(array('calories' => $calories, 'colour' => $colour));
/* Les clés du tableau peuvent aussi être préfixées par des deux-points ":" (facultatif) */
$sth->execute(array(':calories' => $calories, ':couleur' => $couleur));
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exécute une requête préparée avec un tableau de valeurs positionnels</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$calories = 150;
$colour = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->execute(array($calories, $couleur));
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exécute une requête préparée avec des variables lié à un marqueur de positionnement</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Exécute une requête préparée en liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $couleur, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exécute une requête préparée en utilisant un tableau pour les clauses IN</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Exécute une commande préparée en utilisant un tableau de valeurs pour les clauses IN */
$params = array(1, 21, 63, 171);
/* Crée une chaîne pour les marqueurs */
$place_holders = implode(',', array_fill(0, count($params), '?'));

/*
    Ce morceau de code va préparer la requête avec assez de marqueurs pour chaque valeur
    du tableau $params. Les valeurs du tableau $params sont ensuite liées aux marqueurs
    de la requête préparée lorsque la requête est exécutée. Ce n'est pas la même chose
    que d'utiliser la méthode PDOStatement::bindParam() sachant qu'elle impose une
    référence vers les valeurs. La méthode PDOStatement::execute() ne fait que lier
    par la valeur.
*/
$sth = $dbh->prepare("SELECT id, name FROM contacts WHERE id IN ($place_holders)");
$sth->execute($params);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Quelques drivers nécessitent de <link linkend="pdostatement.closecursor">fermer
    le curseur</link> avant d'exécuter la requête suivante.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::bindParam</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
