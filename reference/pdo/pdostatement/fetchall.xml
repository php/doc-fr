<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Récupère les lignes restantes d'un ensemble de résultats
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Contrôle le contenu du tableau retourné comme documenté dans la fonction
       <methodname>PDOStatement::fetch</methodname>.
       Valeur par défaut : <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (qui prend sa valeur par défaut de <constant>PDO::FETCH_BOTH</constant>).
      </para>
      <para>
       Pour retourner un tableau contenant toutes les valeurs d'une seule colonne
       depuis le jeu de résultats, spécifiez <constant>PDO::FETCH_COLUMN</constant>.
       Vous pouvez spécifier quelle colonne vous voulez avec le paramètre
       <parameter>column</parameter>.
      </para>
      <para>
       Pour récupérer uniquement les valeurs uniques d'une seule colonne depuis
       le jeu de résultats, utilisez <constant>PDO::FETCH_COLUMN</constant> avec
       <constant>PDO::FETCH_UNIQUE</constant>.
      </para>
      <para>
       Pour retourner un tableau associatif groupé par les valeurs d'une
       colonne spécifique, utilisez <constant>PDO::FETCH_COLUMN</constant> avec
       <constant>PDO::FETCH_GROUP</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Cet argument prend une valeur différente en fonction de la valeur de
       l'argument <parameter>mode</parameter>:
       <itemizedlist>
        <listitem>
         <para>
          <constant>PDO::FETCH_COLUMN</constant>: Retourne le numéro de la colonne
          demandée (indexée à partir de 0).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_CLASS</constant>: Retourne une instance de la classe désirée.
          Les colonnes sélectionnées sont liées aux attributs de la classe.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_FUNC</constant>: Retourne la valeur de retour de la fonction
          de rappel précisée.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Arguments du constructeur personnalisé de la classe lorsque l'argument <parameter>mode</parameter>
       est à <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <methodname>PDOStatement::fetchAll</methodname> retourne un tableau contenant
   toutes les lignes du jeu d'enregistrements. Le tableau représente chaque ligne
   comme soit un tableau de valeurs des colonnes, soit un objet avec des propriétés
   correspondant à chaque nom de colonne.
   Un tableau vide est retourné s'il y a zéro résultat.
  </para>
  <para>
   L'utilisation de cette méthode pour récupérer de gros jeux de résultats
   peut augmenter les ressources du système, mais également ces ressources.
   Plutôt que de récupérer toutes les données et de les manipuler avec PHP,
   utilisez le serveur de base de données pour manipuler les jeux de résultats.
   Par exemple, utilisez les clauses <literal>WHERE</literal> et 
   <literal>ORDER BY</literal> dans vos requêtes SQL pour restreindre les résultats
   avant de les récupérer et de les traiter avec PHP.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Cette méthode retourne désormais toujours un &array;,
       auparavant &false; pouvait être retourné en cas d'échec.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Récupération de toutes les lignes d'un jeu de résultats</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* Récupération de toutes les lignes d'un jeu de résultats */
print("Récupération de toutes les lignes d'un jeu de résultats :\n");
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Récupération de toutes les lignes d'un jeu de résultats :
Array
(
    [0] => Array
        (
            [nom] => apple
            [0] => apple
            [couleur] => red
            [1] => red
        )

    [1] => Array
        (
            [nom] => pear
            [0] => pear
            [couleur] => green
            [1] => green
        )

    [2] => Array
        (
            [nom] => watermelon
            [0] => watermelon
            [couleur] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example>
    <title>Récupération de toutes les valeurs d'une seule colonne depuis un jeu de résultats</title>
    <para>
     L'exemple suivant montre comment retourner toutes les valeurs
     d'une seule colonne depuis un jeu de résultats, même si la requête SQL
     retourne plusieurs colonnes par lignes.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Récupération de toutes les valeurs de la première colonne */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>Grouper toutes les valeurs d'une seule colonne</title>
    <para>
     L'exemple suivant montre comment retourner un tableau associatif
     groupé par les valeurs de la colonne spécifiée d'un jeu de résultats.
     Le tableau contient trois clés : les valeurs <literal>apple</literal>
     et <literal>pear</literal> sont retournées sous la forme de tableaux
     qui contiennent deux couleurs différentes, tandis que
     <literal>watermelon</literal> est retourné sous la forme d'un tableau
     qui contient uniquement une seule couleur.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Grouper les valeurs de la première colonne */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(3) "red"
    }
  ["pear"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(6) "yellow"
    }
  ["watermelon"]=>
    array(1) {
      [0]=>
        string(5) "pink"
    }
}

]]>
    </screen>
   </example>
   <example><title>Instancier une classe pour chaque résultat</title>
    <para>
     L'exemple suivant montre le comportement de
     <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example><title>Appel d'une fonction pour chaque résultat</title>
    <para>
     L'exemple suivant montre le comportement de
     <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
