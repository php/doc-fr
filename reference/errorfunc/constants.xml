<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="errorfunc.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"> &reftitle.constants;
 &extension.constants.core;
  <note>
   <simpara>
    Vous pouvez utiliser ces constantes dans le fichier &php.ini; mais pas 
    hors de PHP, comme dans le fichier &httpd.conf;, où
    vous devez utiliser les valeurs des champs de bits.
   </simpara>
  </note>
 <table xml:id="errorlevels">
  <title>Erreurs et historique</title>
  <tgroup cols="4">
   <thead>
    <row>
     <entry>Valeur</entry>
     <entry>&Constants;</entry>
     <entry>&Description;</entry>
     <entry>Note</entry>
    </row>
   </thead>
   <tbody>
    <row xml:id="errorfunc.constants.errorlevels.e-error">
     <entry>1</entry>
     <entry>
      <constant>E_ERROR</constant> 
      (&integer;)
     </entry>
     <entry>
      Les erreurs sont aussi affichées par défaut, et 
      l'exécution du script est interrompue. Elles indiquent 
      des erreurs qui ne peuvent pas être ignorées, comme 
      des problèmes d'allocation de mémoire, par exemple. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-warning">
     <entry>2</entry>
     <entry>
      <constant>E_WARNING</constant> 
      (&integer;)
     </entry>
     <entry>
      Les alertes sont affichées par défaut, mais n'interrompent 
      pas l'exécution du script. Elles indiquent un 
      problème qui doit être intercepté par le script 
      durant l'exécution du script. Par exemple, appeler <function>ereg</function>
      avec une expression rationnelle invalide. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-parse">
     <entry>4</entry>
     <entry>
      <constant>E_PARSE</constant> 
      (&integer;)
     </entry>
     <entry>
       Les erreurs d'analyse ne doivent être générées
       que par l'analyseur. Elles ne sont citées ici que dans le 
       but d'être exhaustif. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-notice">
     <entry>8</entry>
     <entry>
      <constant>E_NOTICE</constant> 
      (&integer;)
     </entry>
     <entry>
      Les remarques ne sont pas affichées par défaut, et indiquent que 
      le script a rencontré quelque chose qui peut être une erreur, 
      mais peut aussi être un événement normal dans la vie 
      du script. Par exemple, essayer d'accéder à une valeur qui 
      n'a pas été déclarée, ou appeler <function>stat</function> sur 
      un fichier qui n'existe pas. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-core-error">
     <entry>16</entry>
     <entry>
      <constant>E_CORE_ERROR</constant> 
      (&integer;)
     </entry>
     <entry>
      Elles sont similaires aux erreurs <constant>E_ERROR</constant>, mais 
      elles sont générées par le code source de PHP. Les fonctions 
      ne doivent pas générer ce genre d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-core-warning">
     <entry>32</entry>
     <entry>
      <constant>E_CORE_WARNING</constant> 
      (&integer;)
     </entry>
     <entry>
      Elles sont similaires à <constant>E_WARNING</constant>, mais elles sont 
      générées par le code source de PHP. Les fonctions ne doivent
      pas générer ce genre d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-compile-error">
     <entry>64</entry>
     <entry>
      <constant>E_COMPILE_ERROR</constant> 
      (&integer;)
     </entry>
     <entry>
      Elles sont similaires à <constant>E_ERROR</constant>, mais elles sont générées
      par le moteur Zend. Les fonctions ne doivent pas générer ce genre
      d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-compile-warning">
     <entry>128</entry>
     <entry>
      <constant>E_COMPILE_WARNING</constant> 
      (&integer;)
     </entry>
     <entry>
      Elles sont similaires à <constant>E_WARNING</constant>, mais elles sont générées
      par le moteur Zend. Les fonctions ne doivent pas générer ce genre 
      d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-error">
     <entry>256</entry>
     <entry>
      <constant>E_USER_ERROR</constant> 
      (&integer;)
     </entry>
     <entry>
      Message d'erreur généré par l'utilisateur. Comparable à
      <constant>E_ERROR</constant>. Elle est générée par le programmeur en PHP
      par l'utilisation de la fonction <function>trigger_error</function>. 
      Les fonctions de PHP ne doivent pas générer ce genre d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-warning">
     <entry>512</entry>
     <entry>
      <constant>E_USER_WARNING</constant> 
      (&integer;)
     </entry>
     <entry>
      Message d'erreur généré par l'utilisateur. Comparable à
      <constant>E_WARNING</constant>. Elle est générée par le programmeur en PHP 
      par l'utilisation de la fonction <function>trigger_error</function>. 
      Les fonctions de PHP ne doivent pas générer ce genre d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-notice">
     <entry>1024</entry>
     <entry>
      <constant>E_USER_NOTICE</constant> 
      (&integer;)
     </entry>
     <entry>
      Message d'erreur généré par l'utilisateur. Comparable à
      <constant>E_NOTICE</constant>. Elle est générée par le programmeur en PHP
      par l'utilisation de la fonction <function>trigger_error</function>.
      Les fonctions de PHP ne doivent pas générer ce genre d'erreur. 
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-strict">
     <entry>2048</entry>
     <entry>
      <constant>E_STRICT</constant> 
      (&integer;)
     </entry>
     <entry>
      Permet d'obtenir des suggestions de
      PHP pour modifier votre code, assurant ainsi une meilleure
      interopérabilité et compatibilité de celui-ci.
     </entry>
     <entry>
      Pas inclus dans <constant>E_ALL</constant> antérieur à PHP 5.4.0.
     </entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-recoverable-error">
     <entry>4096</entry>
     <entry>
      <constant>E_RECOVERABLE_ERROR</constant> 
      (&integer;)
     </entry>
     <entry>
      Erreur fatale qui peut être captée. Ceci indique qu'une erreur
      probablement dangereuse s'est produite, mais n'a pas laissé le moteur Zend
      dans un état instable. Si l'erreur n'est pas attrapée par un
      gestionnaire d'erreur défini par l'utilisateur (voyez aussi
      <function>set_error_handler</function>, l'application arrête
      prématurément comme si cela était une <constant>E_ERROR</constant>.
     </entry>
     <entry>À partir de PHP 5.2.0</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-deprecated-error">
     <entry>8192</entry>
     <entry>
      <constant>E_DEPRECATED</constant> 
      (&integer;)
     </entry>
     <entry>
      Alertes d'exécution. Activer cette option pour recevoir
      des alertes sur les portions de votre code qui pourraient ne pas
      fonctionner avec les futures versions.
     </entry>
     <entry>À partir de PHP 5.3.0</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-deprecated">
     <entry>16384</entry>
     <entry>
      <constant>E_USER_DEPRECATED</constant> 
      (&integer;)
     </entry>
     <entry>
      Message d'alerte généré par l'utilisateur. Fonctionne de la même façon que
      <constant>E_DEPRECATED</constant>, mis à part que le message est généré
      par votre code PHP en utilisant la fonction <function>trigger_error</function>.
     </entry>
     <entry>À partir de PHP 5.3.0</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-all">
     <entry>32767</entry>
     <entry>
      <constant>E_ALL</constant> 
      (&integer;)
     </entry>
     <entry>
      Toutes les erreurs et alertes supportées sauf le niveau 
      <constant>E_STRICT</constant> avant la version 5.4.0 de PHP.
     </entry>
     <entry>
      32767 en PHP 5.4.x,
      30719 en PHP 5.3.x,
      6143 en PHP 5.2.x, et
      2047 auparavant
     </entry>
    </row>

   </tbody>
  </tgroup>
 </table>

 <para>
  Les valeurs ci-dessus (numérique ou symbolique) sont utilisées pour
  constituer des champs de bits, qui spécifient le niveau de rapport d'erreur.
  Vous pouvez utiliser les 
  <link linkend="language.operators.bitwise">opérateurs de bits</link> 
  pour combiner ces valeurs pour en faire des masques qui filtrent certaines erreurs.
  Notez bien que seuls '|', '~', '!', '^' et '&amp;' seront compris dans le fichier &php.ini;.
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
