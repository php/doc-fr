<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
  <refpurpose>Génère une représentation stockable d'une valeur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   Retourne un tableau en chaine de caractères.
  </para>
  <para>
   C'est une technique pratique pour stocker ou passer des valeurs PHP
   entre scripts, sans perdre leur structure ni leur type.
  </para>
  <para>
   Pour récupérer une variable sérialisée et retrouver une
   valeur PHP, utilisez <function>unserialize</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       La valeur à sérialiser. <function>serialize</function> accepte
       tous les types sauf les ressources &resource; et certains &object;s (voir note ci-dessous).
       Vous pouvez même sérialiser un tableau
       qui contient des références sur lui-même. Les références cycliques dans des
       tableaux/objets seront également stockées. Toutes les autres
       références seront perdues.
      </para>
      <para>
       Lors de la sérialisation d'un objet, PHP tentera d'appeler les fonctions
       membres <link linkend="object.serialize">__serialize()</link> ou
       <link linkend="object.sleep">__sleep()</link> avant de sérialiser.
       Cela permet à l'objet de faire un dernier nettoyage, etc.
       avant d'être sérialisé. De même, lorsque l'objet est restauré en
       utilisant <function>unserialize</function>, la fonction membre
       <link linkend="object.unserialize">__unserialize()</link> ou
       <link linkend="object.wakeup">__wakeup()</link> est appelée.
      </para>
      <note>
       <para>
        Les attributs privés d'un objet auront le nom de la classe préfixé
        au nom de l'attribut ; les attributs protégés seront préfixés avec un
        astérisque '*'. Ces valeurs préfixées ont des caractères nuls des
        deux cotés.
       </para>
      </note>     
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une &string; contenant une représentation sous forme de flux d'octets
   qui peut être stocker partout.
  </para>
  <para>
   Il est à noter que c'est une chaîne binaire qui peut inclure des octets nuls,
   et doit donc être stockée et gérée comme telle. Par exemple, la sortie de
   <function>serialize</function> doit généralement être stockée dans un champ
   de type BLOB d'une base de données,
   plutôt que dans un champ de type CHAR ou TEXT.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>serialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// $session_data contient un tableau multidimensionnel , avec les
// informations de session de l'utilisateur courant. On utilise serialize()
// pour les stocker dans une base de données

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, array_reverse($sqldata))) {
        /* Un problème est survenu ! */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Il est à noter que de nombreux objets internes de PHP ne peuvent pas être
    sérialisés. Cependant, ceux qui le peuvent implémentent soit l'interface
    <interfacename>Serializable</interfacename> soit les méthodes magiques
    <link linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>
    ou <link linkend="object.sleep">__sleep()</link>/<link linkend="object.wakeup">__wakeup()</link>.
    Si une classe interne ne remplit aucune de ces conditions, elle ne peut pas
    être sérialisée de manière fiable.
   </para>
   <para>
    Il existe des exceptions historiques à cette règle, où des objets internes peuvent être
    sérialisés alors qu'ils n'implémentent pas l'interface ou n'exposent pas les méthodes
    magiques prévues à cet effet.
   </para>
  </note>
  <warning>
   <para>
    Lorsque la fonction <function>serialize</function> sérialise des objets,
    l'antislash de fin n'est pas inclus dans l'espace de nom du nom de la classe
    et ce, pour un maximum de compatibilité.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><function>var_export</function></member>
    <member><function>json_encode</function></member>
    <member><link linkend="language.oop5.serialization">Serializing Objects</link></member>
    <member><link linkend="object.sleep">__sleep()</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
