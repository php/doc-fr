<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6834bf7ae4817a818a726529f6055ade2ae2bf1c Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Détermine si une valeur peut être appelé comme une fonction
   dans la portée courante
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Vérifie que <parameter>value</parameter> est un <type>callable</type>,
   ou qu'il peut être appelé à l'aide de la fonction
   <function>call_user_func</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       La valeur à vérifier.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Si l'argument <parameter>syntax_only</parameter> vaut &true;, la
       fonction ne va vérifier que si <parameter>value</parameter> peut être
       une fonction ou une méthode. Il rejettera toutes les valeurs
       qui ne sont pas des objets <link linkend="object.invoke">invocables</link>,
       des <classname>Closure</classname>, des &string;s, ou des &array;s qui n'ont pas
       une structure valide pour être utilisées comme un callback. Un tableau appelable valide
       contient 2 entrées : la première doit être un objet
       ou une chaîne de caractères, et la seconde une chaîne de caractères.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Reçoit le "nom de la fonction callable", par exemple
       <literal>"SomeClass::someMethod"</literal>. Notez cependant que,
       malgré l'implication selon laquelle <literal>SomeClass::someMethod()</literal>
       est une méthode statique callable, ce n'est pas le cas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne &true; si <parameter>value</parameter> peut être appelé comme
   une fonction, &false; sinon.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Vérification si une chaîne peut être appelée comme une fonction</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Vérification si un tableau peut être appelé comme une fonction</title>
    <programlisting role="php">
<![CDATA[
<?php

class someClass
{
    public function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title><function>is_callable</function> et les constructeurs</title>
    <simpara>
     <function>is_callable</function> rapporte les constructeurs comme
     n'étant pas appelable.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Un object est tout le temps appelable s'il implémente
    <link linkend="object.invoke">__invoke()</link>, et que la méthode est visible
    dans le portée courante.
   </member>
   <member>Un nom de classe est appelable si elle implémente
    <link linkend="object.callstatic">__callStatic()</link>
   </member>
   <member>
    Si un object implémente <link linkend="object.call">__call()</link>, alors cette fonction
    retournera &true; pour n'importe quelle méthode sur cet object, même si
    la méthode n'est pas définie.
   </member>
   <member>
    Cette fonction peut déclancher l'autochargement si appelé avec le nom
    d'une classe.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
