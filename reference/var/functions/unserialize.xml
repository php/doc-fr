<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ce3a2d381693ccbc10cc4a808c3eb853f3c85c9e Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>Crée une variable PHP à partir d'une valeur sérialisée</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> prend une variable sérialisée
   (voir <function>serialize</function>) et la convertit en variable PHP.
  </simpara>
  <warning>
   <para>
    Ne passez pas d'entrée utilisateur non fiable à la fonction 
    <function>unserialize</function> quelle que soit la valeur de 
    <literal>allowed_classes</literal> dans <parameter>options</parameter>.
    La désérialisation peut résulter
    en une exécution de code chargé et exécuté lors de l'instanciation
    et l'autochargement d'objet, et ainsi, un utilisateur mal intentionné
    peut être capable d'exploiter ce comportement. Utilisez un standard d'échange
    sûr, comme JSON (via les fonctions <function>json_decode</function> 
    et <function>json_encode</function>) si vous devez passer des données sérialisées
    à l'utilisateur.
   </para>
   <para>
    Si vous avez besoin de désérialiser des données sérialisées enregistré à l'extérieur,
    considérez l'utilisation de <function>hash_hmac</function> pour valider les
    données. Assurez-vous que les données n'ont été modifiées par personne d'autre
    que vous.
   </para>
  </warning>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       La chaîne sérialisée.
      </para>
      <para>
       Si la variable désérialisée est un objet, après avoir réussi à le
       reconstruire, PHP tentera automatiquement d'appeller les méthodes
       <link linkend="object.unserialize">__unserialize()</link> ou
       <link linkend="object.wakeup">__wakeup</link> (si l'une d'elles existent).
      </para>
      <para>
       <note>
        <title>unserialize_callback_func directive</title>
        <para>
         Il est possible de définir une fonction de rappel qui sera appelée si
         une classe indéfinie est utilisée lors de la désérialisation
         (ce qui évitera de recevoir un <type>object</type> "<literal>__PHP_Incomplete_Class</literal>").
         Utilisez votre &php.ini; ou le fichier &htaccess; pour définir
         <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link>.
         Chaque fois qu'une classe non-définie sera instanciée, cette fonction sera
         appelée. Pour désactiver cette fonctionnalité, laissez simplement la 
         chaîne de caractère vide.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Toute option à fournir à <function>unserialize</function>, sous la forme d'un
       tableau associatif.
      </para>
      <table>
       <title>Options valides</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Nom</entry>
          <entry>Type</entry>
          <entry>Description</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type>mixed</type></entry>
          <entry>
           <simpara>
            Soit un tableau de noms de classes qui doivent être acceptées, &false;
            pour accepter aucune classe, ou &true; pour accepter toutes les
            classes. Si cette option est définie, et
            <function>unserialize</function> rencontre un objet d'une classe
            qui n'est pas accepté, alors l'objet sera instancié plutôt comme
            <classname>__PHP_Incomplete_Class</classname>.
           </simpara>
           <simpara>
            Le fait d'ommettre cette option revient à le définir comme &true; :
            PHP va tenter d'instancier les objets de n'importe quelle classe.
           </simpara>
          </entry>
         </row>
         <row>
          <entry><literal>max_depth</literal></entry>
          <entry><type>int</type></entry>
          <entry>
           <simpara>
            La profondeur maximale autorisée des structures lors de la désérialisation, 
            qui est destinée à empêcher les débordements de pile. La limite de profondeur 
            par défaut est de <literal>4096</literal> et peut être désactivée en définissant 
            <literal>max_depth</literal> à <literal>0</literal>.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur convertie est retournée par la fonction, et peut être de
   type &boolean;, &integer;, &float;, &string;, &array; ou &object;.
  </para>
  <para>
   Si la chaîne passée ne peut être désérialisée, cette fonction retourne
   &false; et une erreur <constant>E_NOTICE</constant> est émise.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Les objets peuvent lancer <classname>Throwable</classname>s dans leur gestionnaire
   de désérialisation.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Ajout de l'élément <literal>max_depth</literal> aux
        <parameter>options</parameter> pour définir la profondeur 
        maximale autorisée des structures lors de la désérialisation.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        L'élément <literal>allowed_classes</literal> de
        <parameter>options</parameter>) est maintenant strictement typé, c'est à dire si
        quelque chose autre qu'un tableau <type>array</type> ou un <type>bool</type>
        est donné <function>unserialize</function> retourne &false; et émet une
        <constant>E_WARNING</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Ici, on utilise <function>unserialize</function> pour charger les données de sessions
// depuis la base de données, dans $session_data. Cet exemple complète
// celui fourni avec <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // si la préparation ou la lecture échouent, on crée un tableau vide
    $session_data = array();
} else {
    // les données sauvées sont dans $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // Erreur... initialisation d'un tableau vide
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec la directive <option>unserialize_callback_func</option></title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func', 'mycallback');

function mycallback($classname) 
{
    // Incluez simplement un fichier contenant votre définition de classe
    // vous saurez quelle classe grâce à $classname
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; est retourné dans les cas où une erreur survient et si vous
    tentez de désérialiser une valeur sérialisée égale à &false;. Il est
    possible d'intercepter ce cas spécial en comparant
    <parameter>data</parameter> avec <literal>serialize(false)</literal>
    ou en attrapant l'erreur <constant>E_NOTICE</constant> émise.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autoloading Classes</link></member>
    <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
