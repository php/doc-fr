<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 071a588364ddef3af5e008b3d6213f98c617b5a0 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.recursivecallbackfilteriterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La classe RecursiveCallbackFilterIterator</title>
 <titleabbrev>RecursiveCallbackFilterIterator</titleabbrev>

 <partintro>

<!-- {{{ RecursiveCallbackFilterIterator intro -->
  <section xml:id="recursivecallbackfilteriterator.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="recursivecallbackfilteriterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>RecursiveCallbackFilterIterator</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <classname>RecursiveCallbackFilterIterator</classname>
     </ooclass>

     <ooclass>
      <modifier>extends</modifier>
      <classname>CallbackFilterIterator</classname>
     </ooclass>

     <oointerface>
      <interfacename>RecursiveIterator</interfacename>
     </oointerface>
    </classsynopsisinfo>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='CallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='FilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IteratorIterator'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <!-- {{{ examples -->
  <section xml:id="recursivecallbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    La fonction de rappel doit accepter jusqu'à 3 arguments :
    l'élément courant, la clé courante, et l'itérateur courant,
    respectivement.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.args">
    <title>Arguments disponibles pour la fonction de rappel</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * Fonction de rappel pour RecursiveCallbackFilterIterator
 *
 * @param $current   La valeur de l'élément courant
 * @param $key       La clé de l'élément courant
 * @param $iterator  Itérateur à filtrer
 * @return boolean   TRUE pour accepter l'élément courant, FASLE sinon
 */
function my_callback($current, $key, $iterator) {
    // Votre filtre ici
}

?>
]]>
    </programlisting>
   </example>
   <para>
    Le filtrage d'un itérateur récursif implique généralement 2 conditions.
    La première est que, pour autoriser la récursion, la fonction
    de rappel doit retourner &true; si l'élément de l'itérateur courant
    a un fils. La seconde est une condition de filtrage normale, comme
    la vérification de la taille de fichier ou la vérification de l'extension
    comme dans l'exemple suivant.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.basic">
    <title>Exemple simple d'une fonction de rappel récursive</title>
<programlisting role="php">
<![CDATA[
<?php

$dir = new RecursiveDirectoryIterator(__DIR__);

// Filtrage des gros fichiers ( > 100MB)
$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
    // Permet la récursion
    if ($iterator->hasChildren()) {
        return TRUE;
    }
    // Vérifie les gros fichiers
    if ($current->isFile() && $current->getSize() > 104857600) {
        return TRUE;
    }
    return FALSE;
});
 
foreach (new RecursiveIteratorIterator($files) as $file) {
    echo $file->getPathname() . PHP_EOL;
}

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->

 </partintro>

 &reference.spl.entities.recursivecallbackfilteriterator;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
