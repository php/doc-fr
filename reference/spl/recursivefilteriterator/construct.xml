<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: fda6c4efe20f441b2412e9dc37361e3cf25dcab9 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="recursivefilteriterator.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RecursiveFilterIterator::__construct</refname>
  <refpurpose>Crée un objet RecursiveFilterIterator depuis un objet RecursiveIterator</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>RecursiveFilterIterator::__construct</methodname>
   <methodparam><type>RecursiveIterator</type><parameter>iterator</parameter></methodparam>
  </constructorsynopsis>
  <para>
   Crée un objet <classname>RecursiveFilterIterator</classname> depuis un objet <classname>RecursiveIterator</classname>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       L'objet <classname>RecursiveIterator</classname> à filtrer.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>RecursiveFilterIterator</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
class TestsOnlyFilter extends RecursiveFilterIterator {
    public function accept() {
        // Accepte l'élément courant si nous pouvons le parcourir
        // ou si sa valeur commence par "test"
        return $this->hasChildren() || (strpos($this->current(), "test") !== FALSE);
    }
}

$array    = array("test1", array("taste2", "test3", "test4"), "test5");
$iterator = new RecursiveArrayIterator($array);
$filter   = new TestsOnlyFilter($iterator);

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
    echo $value . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
test1
test3
test4
test5
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <methodname>RecursiveFilterIterator</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
class StartsWithFilter extends RecursiveFilterIterator {

    protected $word;

    public function __construct(RecursiveIterator $rit, $word) {
        $this->word = $word;
        parent::__construct($rit);
    }

    public function accept() {
        return $this->hasChildren() OR strpos($this->current(), $this->word) === 0;
    }
    
    public function getChildren() {
        return new self($this->getInnerIterator()->getChildren(), $this->word);
    }
}

$array    = array("test1", array("taste2", "test3", "test4"), "test5");
$iterator = new RecursiveArrayIterator($array);
$filter   = new StartsWithFilter($iterator, "test");

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
    echo $value . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
test1
test3
test4
test5
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>RecursiveFilterIterator::getChildren</methodname></member>
    <member><methodname>RecursiveFilterIterator::hasChildren</methodname></member>
    <member><methodname>FilterIterator::accept</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
