<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2ca090342977839edca2f7f4e52305a1b5da6095 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="arrayobject.natsort" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ArrayObject::natsort</refname>
  <refpurpose>Trie les éléments avec un tri naturel</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ArrayObject">
   <modifier>public</modifier> <type>true</type><methodname>ArrayObject::natsort</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Cette méthode implémente un algorithme de tri qui place les chaînes
   alphanumériques dans le même ordre que celui qu'un humain utiliserait,
   tout en conservant la corrélation entre les clé et les valeurs. Ceci
   porte le nom de tri naturel. Par exemple, le tri naturel se distingue
   du tri informatique, tel qu'utilisé dans 
   <link linkend="arrayobject.asort">ArrayObject::asort</link>, comme
   illustré ci-dessous.
  </para>
  &note.sort-unstable;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &return.type.true;
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ArrayObject::natsort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array("img12.png", "img10.png", "img2.png", "img1.png");

$arr1 = new ArrayObject($array);
$arr2 = clone $arr1;

$arr1->asort();
echo "Tri standard\n";
print_r($arr1);

$arr2->natsort();
echo "\nTri en ordre naturel\n";
print_r($arr2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Tri standard
ArrayObject Object
(
    [storage:ArrayObject:private] => Array
        (
            [3] => img1.png
            [1] => img10.png
            [0] => img12.png
            [2] => img2.png
        )

)

Tri en ordre naturel
ArrayObject Object
(
    [storage:ArrayObject:private] => Array
        (
            [3] => img1.png
            [2] => img2.png
            [1] => img10.png
            [0] => img12.png
        )

)
]]>
    </screen>
    <para>
     Pour plus d'informations, voyez le site de Martin Pool 
     <link xlink:href="&url.strnatcmp;"><literal>Natural Order String Comparison</literal></link>.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ArrayObject::asort</methodname></member>
    <member><methodname>ArrayObject::ksort</methodname></member>
    <member><methodname>ArrayObject::natcasesort</methodname></member>
    <member><methodname>ArrayObject::uasort</methodname></member>
    <member><methodname>ArrayObject::uksort</methodname></member>
    <member><function>natsort</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
