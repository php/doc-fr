<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d51166ca16fda8e766849505b84f9306ef443f71 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="arrayobject.natcasesort" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ArrayObject::natcasesort</refname>
  <refpurpose>Trie un tableau en utilisant le tri naturel sans la casse</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ArrayObject">
   <modifier>public</modifier> <type>bool</type><methodname>ArrayObject::natcasesort</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Cette méthode est la version insensible à la casse de 
   <link linkend="arrayobject.natsort">ArrayObject::natsort</link>.
  </para>
  <para>
   Cette méthode implémente un algorithme de tri qui ordonne les 
   chaînes alpha-numérique de la même façon qu'un humain le ferait.
   Ceci est décrit comme un tri naturel.
  </para>
  &note.sort-unstable;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ArrayObject::natcasesort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');

$arr1 = new ArrayObject($array);
$arr2 = clone $arr1;

$arr1->asort();
echo "Tri standard\n";
print_r($arr1);

$arr2->natcasesort();
echo "\nTri naturel\n";
print_r($arr2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Tri standard
ArrayObject Object
(
    [storage:ArrayObject:private] => Array
        (
            [0] => IMG0.png
            [5] => IMG3.png
            [4] => img1.png
            [2] => img10.png
            [1] => img12.png
            [3] => img2.png
        )

)

Tri naturel
ArrayObject Object
(
    [storage:ArrayObject:private] => Array
        (
            [0] => IMG0.png
            [4] => img1.png
            [3] => img2.png
            [5] => IMG3.png
            [2] => img10.png
            [1] => img12.png
        )

)
]]>
    </screen>
    <para>
     Pour plus d'information, voir la page la
     <link xlink:href="&url.strnatcmp;">comparaison de chaînes en ordre naturel</link>
     de Martin Pool.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ArrayObject::asort</methodname></member>
    <member><methodname>ArrayObject::ksort</methodname></member>
    <member><methodname>ArrayObject::natsort</methodname></member>
    <member><methodname>ArrayObject::uasort</methodname></member>
    <member><methodname>ArrayObject::uksort</methodname></member>
    <member><function>natcasesort</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

