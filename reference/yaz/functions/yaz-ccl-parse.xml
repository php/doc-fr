<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.yaz-ccl-parse" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>yaz_ccl_parse</refname>
  <refpurpose>Appelle l'analyseur CCL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>yaz_ccl_parse</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">result</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette fonction appelle l'analyseur CCL. Il convertit une requête
   CCL FIND en une requête RPN qui peut être passée à
   <function>yaz_search</function> pour effectuer une recherche.
  </para>
  <para>
   Pour définir un champ CCL valide, utilisez la fonction
   <function>yaz_ccl_conf</function> avant d'utiliser cette fonction.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       La ressource de connexion retournée par
       <function>yaz_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       La requête CCL FIND.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       Si la fonction a été exécutée correctement, cet argument sera un
       tableau contenant la requête RPN valide sous la clé
       <literal>rpn</literal>.
      </para>
      <para>
       Lors d'un échec, trois index sont écrits dans ce tableau pour indiquer
       la cause de l'échec :
       <itemizedlist>
        <listitem>
         <para>
          <literal>errorcode</literal> - le code d'erreur CCL (&integer;)
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>errorstring</literal> - l'erreur CCL en chaîne de caractères
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>errorpos</literal> - position approximée dans la requête
          qui est en échec (&integer; qui est la position d'un caractère)
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Analyse CCL</title>
   <para>
    Nous allons essayer de chercher en utilisant CCL. Dans l'exemple
    ci-dessous, <literal>$ccl</literal> est une requête CCL.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

yaz_ccl_conf($id, $fields);  // voir l'exemple sur la fonction yaz_ccl_conf
if (!yaz_ccl_parse($id, $ccl, $cclresult)) {
    echo 'Erreur : ' . $cclresult["errorstring"];
} else {
    $rpn = $cclresult["rpn"];
    yaz_search($id, "rpn", $rpn);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
