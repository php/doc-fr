<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: mikaelkael -->
<refentry xml:id="function.oci-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_execute</refname>
  <refpurpose>Exécute une commande SQL Oracle</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_execute</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>OCI_COMMIT_ON_SUCCESS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Exécute une requête <parameter>statement</parameter> précédemment
   retournée par la fonction <function>oci_parse</function>.
  </para>
  <para>
   Après exécution, les requêtes comme <literal>INSERT</literal>
   auront par défaut les données validées (commitées) sur la base de données.
   Pour les requêtes comme <literal>SELECT</literal>, l'exécution
   effectue la logique de la requête. Les résultats de la requête
   peuvent être récupérés par PHP avec des fonctions comme
   <function>oci_fetch_array</function>.
  </para>
  <para>
   Chaque requête analysé peut être exécutée plusieurs fois, inutile
   donc de les analyser de nouveau. Ceci est pratique pour des requêtes
   de type <literal>INSERT</literal> lorsque des données y sont liées
   grâce à la fonction <function>oci_bind_by_name</function>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Un identifiant de requête OCI valide.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Un second paramètre optionnel peut prendre une des constantes suivantes :
       <table>
        <title>Modes d'exécution</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Description</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_COMMIT_ON_SUCCESS</constant></entry>
           <entry>Validation automatique sur la connexion lorsque la requête
            a été exécutée avec succès. C'est le comportement par défaut.</entry>
          </row>
          <row>
           <entry><constant>OCI_DESCRIBE_ONLY</constant></entry>
           <entry>Rend les méta-donnes de la requête disponible aux fonctions
            comme <function>oci_field_name</function> mais ne crée pas de jeu
            de résultats. Tout appel à des fonctions de récupération comme
            <function>oci_fetch_array</function> échouera.</entry>
          </row>
          <row>
           <entry><constant>OCI_NO_AUTO_COMMIT</constant></entry>
           <entry>Ne valide pas automatiquement les modifications.</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
       L'utilisation du mode <constant>OCI_NO_AUTO_COMMIT</constant> démarre
       ou continue une transaction. Les transactions sont automatiquement annulées
       lorsque la connexion est fermée ou lorsque le script se termine.
       Appelez explicitement la fonction <function>oci_commit</function> pour
       valider la transaction ou la fonction <function>oci_rollback</function>
       pour l'annuler.
      </para>
      <para>
       Lors de l'insertion ou de la mise à jour de données, l'utilisation
       de transactions est fortement recommandée pour garantir la consistance
       relationnelle des données, mais aussi en raison d'un gain non négligeable
       de performance.
      </para>
      <para>
       Si le mode <constant>OCI_NO_AUTO_COMMIT</constant> est utilisé pour
       toutes opérations y compris les requêtes, et que les fonctions
       <function>oci_commit</function> et <function>oci_rollback</function>
       ne sont jamais appelées, OCI8 effectuera une annulation à la fin du
       script même si les données ont changées. Pour éviter ce comportement,
       la plupart des scripts n'utilise pas le mode
       <constant>OCI_NO_AUTO_COMMIT</constant> pour les requêtes ou 
       les procédures stockées PL/SQL. Assurez-vous de la consistance
       transactionnelle appropriée de vos applications lors de l'utilisation
       de la fonction <function>oci_execute</function> avec différents modes dans
       le même script.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>oci_execute</function> pour des requêtes</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>oci_execute</function> sans spécifier de mode</title>
    <programlisting role="php">
<![CDATA[
<?php

// Avant exécution, créez la table :
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');

oci_execute($stid); // La ligne est validée et est immédiatement visible par les autres utilisateurs

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>oci_execute</function> et <constant>OCI_NO_AUTO_COMMIT</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

// Avant exécution, créez la table :
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $i, 10);
for ($i = 1; $i <= 5; ++$i) {
    oci_execute($stid, OCI_NO_AUTO_COMMIT);
}
oci_commit($conn);  // valide toutes les nouvelles valeurs : 1, 2, 3, 4, 5

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>oci_execute</function> et différents modes dans le même script</title>
    <programlisting role="php">
<![CDATA[
<?php

// Avant exécution, créez la table :
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');
oci_execute($stid, OCI_NO_AUTO_COMMIT);  // data not committed

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (456)');
oci_execute($stid);  // valide à la fois les valeurs 123 et 456

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>oci_execute</function> et
     <constant>OCI_DESCRIBE_ONLY</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM locations');
oci_execute($s, OCI_DESCRIBE_ONLY);
for ($i = 1; $i <= oci_num_fields($stid); ++$i) {
    echo oci_field_name($stid, $i) . "<br>\n";
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Les transactions sont automatiquement annulées lorsque les connexions
    sont fermées, ou lorsque le script se termine, suivant ce qui arrive en premier.
    Appelez explicitement la fonction <function>oci_commit</function> pour valider
    une transaction.
   </para>
   <para>
    Tout appel à la fonction <function>oci_execute</function> qui utilise le mode
    <constant>OCI_COMMIT_ON_SUCCESS</constant> explicitement ou par défaut
    validera toutes les transactions en cours.
   </para>
   <para>
    Toutes les requêtes Oracle DDL comme <literal>CREATE</literal>
    ou <literal>DROP</literal> valideront toutes les transactions en cours.
   </para>
  </note>
  <note>
   <para>
    À cause du fait que la fonction <function>oci_execute</function> envoie
    généralement la requête à la base de données, la fonction
    <function>oci_execute</function> peut identifier les erreurs de syntaxe
    de la requête que la fonction <function>oci_parse</function> aurait pû
    ne pas détecter.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
