<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 187032b3ea20fa28f1c9f29ba38d06820428f849 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->

<reference xml:id="class.mongodb-driver-bulkwritecommand" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La classe MongoDB\Driver\BulkWriteCommand</title>
 <titleabbrev>MongoDB\Driver\BulkWriteCommand</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\BulkWriteCommand intro -->
  <section xml:id="mongodb-driver-bulkwritecommand.intro">
   &reftitle.intro;
   <para>
    <classname>MongoDB\Driver\BulkWriteCommand</classname> récupère une ou plusieurs
    opérations d'écriture qui doivent être envoyées au serveur à l'aide de la commande
    <link xlink:href="&url.mongodb.docs.command;bulkWrite">bulkWrite</link>
    introduite dans MongoDB 8.0. Après avoir ajouté un nombre quelconque opération d'écriture,
    operation de modification et d'opérations de suppression, la commande peut être exécutée via
    <methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname>.
   </para>
   <para>
    Contrairement à <classname>MongoDB\Driver\BulkWrite</classname>, où toutes les opérations
    d'écriture doivent cibler la même collection, chaque opération d'écriture dans
    <classname>MongoDB\Driver\BulkWriteCommand</classname> doivent cibler une
    collection différente.
   </para>
   <para>
    Les opérations d'écriture peuvent être triées (par défaut) ou non triées. Les opérations
    triées sont envoyées au serveur, dans l'ordre fourni, pour une exécution
    sérielle. Si une écriture échoue, toutes les opérations restantes seront annulées.
    Les opérations non triées sont envoyées au serveur dans un ordre arbitraire
    où elles peuvent être exécutées en parallèle. Toutes les erreurs qui se produisent
    sont signalées après que toutes les opérations ont été tentées.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-bulkwritecommand.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\BulkWriteCommand</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\BulkWriteCommand</classname>
     </ooclass>

     <oointerface>
      <interfacename>Countable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-bulkwritecommand')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="mongodb-driver-bulkwritecommand.examples">
   &reftitle.examples;

   <example>
    <title>Opérations d'écriture mixées</title>
    <para>
     Les opérations d'écriture mixées (par exemple, insertions, mises à jour et suppressions) seront envoyé
     au serveur à l'aide d'une seule
     commande 
     <link xlink:href="&url.mongodb.docs.command;bulkWrite">bulkWrite</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$bulk = new MongoDB\Driver\BulkWriteCommand;

// Delete documents from both collections
$bulk->deleteMany('db.coll_one', []);
$bulk->deleteMany('db.coll_two', []);

// Insert documents into two collections
$bulk->insertOne('db.coll_one', ['_id' => 1]);
$bulk->insertOne('db.coll_two', ['_id' => 2]);
$bulk->insertOne('db.coll_two', ['_id' => 3]);

// Update a document in "coll_one"
$bulk->updateOne('db.coll_one', ['_id' => 1], ['$set' => ['x' => 1]]);

$result = $manager->executeBulkWriteCommand($bulk);

printf("%d document(s) ont été inséré(s)\n", $result->getInsertedCount());
printf("%d document(s) ont été mise à jour(s)\n", $result->getModifiedCount());

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
3 document(s) ont été inséré(s)
1 document(s) ont été mise à jour(s
]]>
    </screen>
   </example>
   <example>
    <title>Opérations d'écriture ordonnées causant une erreur</title>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$bulk = new MongoDB\Driver\BulkWriteCommand;

$bulk->deleteMany('db.coll', []);
$bulk->insertOne('db.coll', ['_id' => 1]);
$bulk->insertOne('db.coll', ['_id' => 2]);
$bulk->insertOne('db.coll', ['_id' => 1]);
$bulk->insertOne('db.coll', ['_id' => 3]);

try {
    $result = $manager->executeBulkWriteCommand($bulk);
} catch (MongoDB\Driver\Exception\BulkWriteCommandException $e) {
    $result = $e->getPartialResult();

    var_dump($e->getWriteErrors());
}

printf("%d document(s) ont été inséré(s)\n", $result->getInsertedCount());

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(1) {
  [3]=>
  object(MongoDB\Driver\WriteError)#5 (4) {
    ["message"]=>
    string(78) "E11000 duplicate key error collection: db.coll index: _id_ dup key: { _id: 1 }"
    ["code"]=>
    int(11000)
    ["index"]=>
    int(3)
    ["info"]=>
    object(stdClass)#6 (0) {
    }
  }
}
2 document(s) ont été inséré(s)
]]>
    </screen>
   </example>
  </section>

  <section xml:id="mongodb-driver-bulkwritecommand.seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname></member>
    <member><classname>MongoDB\Driver\BulkWriteCommandResult</classname></member>
    <member><classname>MongoDB\Driver\Exception\BulkWriteCommandException</classname></member>
    <member><classname>MongoDB\Driver\WriteConcern</classname></member>
    <member><classname>MongoDB\Driver\WriteConcernError</classname></member>
    <member><classname>MongoDB\Driver\WriteError</classname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.bulkwritecommand;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
