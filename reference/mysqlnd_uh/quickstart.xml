<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 001af012d75d0594cc038b35a38ae325ced01b9d Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mysqlnd-uh.quickstart" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Démarrage rapide et exemples</title>
 <para>
  Le plugin de gestion utilisateur mysqlnd peut être compris comme un proxy
  client-serveur pour toutes les extensions PHP MySQL (<link linkend="ref.mysqli">mysqli</link>,
  <link linkend="ref.mysql">mysql</link>,
  <link linkend="ref.pdo-mysql">PDO_MYSQL</link>), si elles ont été compilées
  pour utiliser la bibliothèque <link linkend="book.mysqlnd">mysqlnd</link>.
  Les extensions utilisent la bibliothèque <literal>mysqlnd</literal> en interne,
  au niveau du langage C, pour communiquer avec le serveur MySQL. PECL/mysqlnd_uh
  permet d'intercepter beaucoup d'appels <literal>mysqlnd</literal>. De plus,
  la plupart des activités des extensions PHP MySQL peuvent être monitorées.
 </para>
 <para>
  En raison du fait que la surveillance survient au niveau de la bibliothèque,
  à une couche en dessous de l'application, il est possible de surveiller
  les applications sans avoir à les modifier.
 </para>
 <para>
  Au niveau C, la bibliothèque <literal>mysqlnd</literal> est structurée en modules
  ou en classes. L'extension accroche toutes les méthodes de la classe <literal>connection</literal>
  interne à <literal>mysqlnd</literal> et les expose via la classe
  <classname>MysqlndUhConnection</classname> de l'espace utilisateur.
  Quelques méthodes de la classe <literal>statement</literal> interne à mysqlnd
  sont disponibles aux utilisateurs PHP avec la classe <classname>MysqlndUhPreparedStatement</classname>.
  En surchargeant les classes <classname>MysqlndUhConnection</classname> et
  <classname>MysqlndUhPreparedStatement</classname>, les utilisateurs
  peuvent avoir accès aux appels fonctions interne à <literal>mysqlnd</literal>.
 </para>
 <note>
  <para>
   Les appels aux fonctions internes à <literal>mysqlnd</literal> n'ont pas pour but
   d'être exposées aux utilisateurs PHP. Une manipulation de leurs activités peut
   conduire à un crash de PHP ou à une fuite mémore. Aussi, ceci ne saurait être
   considéré comme un bogue. Veuillez garder à l'esprit que vous accédez à des fonctions
   de la bibliothèque C via PHP qui sont attendus à effectuer certaines actions,
   qui peuvent ou non être émulées dans l'espace utilisateur. Aussi, il est fortement
   recommandé de toujours appeler la méthode implémentée parente lors d'une surcharge
   de la classe <classname>MysqlndUhConnection</classname> ou de la classe
   <classname>MysqlndUhPreparedStatement</classname>. Pour éviter le pire,
   l'extension effectue quelques contrôles. Voir aussi les
   <link linkend="mysqlnd-uh.configuration">&ConfigureOptions; Mysqlnd_uh</link>.
  </para>
 </note>


 <section xml:id="mysqlnd-uh.quickstart.configuration">
  <title>Configuration</title>
  <para>
   Le plugin est implémenté comme une extension PHP.
   Voir aussi les
   <link linkend="mysqlnd-uh.installation">instructions d'installation</link>
   pour installer l'extension
   <link xlink:href="&url.pecl.package;mysqlnd_ms">PECL/mysqlnd_uh</link>.
   Puis, chargez l'extension dans PHP et activez le plugin dans le fichier
   de configuration de PHP en utilisant la directive de configuration PHP
   <link linkend="ini.mysqlnd-uh.enable">mysqlnd_uh.enable</link>.
   L'exemple ci-dessous montre les configurations par défaut de l'extension.
  </para>
  <para>
   <example>
    <title>Activation du plugin (php.ini)</title>
    <programlisting role="ini">
<![CDATA[
mysqlnd_uh.enable=1
mysqlnd_uh.report_wrong_types=1
]]>
    </programlisting>
    </example>
  </para>
 </section>

 <section xml:id="mysqlnd-uh.quickstart.how-it-works">
  <title>Comment fonctionne-t-il ?</title>
  <para>
   Cette section décrit le contexte et les rouages de l'extension
   mysqlnd_uh.
  </para>
  <para>
   Deux classes sont fournies par l'extension : <classname>MysqlndUhConnection</classname>
   et <classname>MysqlndUhPreparedStatement</classname>. <classname>MysqlndUhConnection</classname>
   vous permet d'accéder à la plupart des méthodes de la classe interne <literal>connection</literal>
   de <literal>mysqlnd</literal>. La seconde expose quelques méthodes
   sélectionnées de la classe <literal>statement</literal> interne
   à <literal>mysqlnd</literal>. Par exemple, la méthode
   <methodname>MysqlndUhConnection::connect</methodname> est liée à la fonction C
   <literal>mysqlnd_conn__connect</literal> de la bibliothèque
   <literal>mysqlnd</literal>.
  </para>
  <para>
   Comme plugin mysqlnd, l'extension PECL/mysqlnd_uh remplace les fonctions
   de la bibliothèque C <literal>mysqlnd</literal> avec ces propres fonctions.
   A chaque fois qu'une extension PHP MySQL est compilée pour une utilisation
   de <literal>mysqlnd</literal>, qu'un appel à une fonction mysqlnd
   est réalisée, la fonction installée par le plugin est exécutée au lieu
   de la fonction originale <literal>mysqlnd</literal>. Si, par exemple, la
   fonction <function>mysqli_connect</function> appèle <literal>mysqlnd_conn__connect</literal>,
   la fonction de connexion installée par PECL/mysqlnd_uh sera appelée.
   Les fonctions installées par PECL/mysqlnd_uh sont les méthodes des classes
   internes.
  </para>
  <para>
   Les classes internes PHP et leurs méthodes ne font rien, mais un appel
   à leurs homologues de la bibliothèque C <literal>mysqlnd</literal>
   permet d'obtenir un comportement identique à la fonction originale
   <literal>mysqlnd</literal> qu'elles remplacent. Le code ci-dessous
   illustre rapidement ce que la classe fait.
  </para>
  <para>
   <example>
    <title>Ce que fait une classe interne</title>
    <programlisting>
<![CDATA[
class MysqlndUhConnection {
  public function connect(($conn, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
    MYSQLND* c_mysqlnd_connection = convert_from_php_to_c($conn);
    ...
    return call_c_function(mysqlnd_conn__connect(c_mysqlnd_connection, ...));
  }
}
]]>
    </programlisting>
    </example>
  </para>
  <para>
   Les classes internes fonctionnent comme un proxy transparent.
   Il vous est possible de remplacer le proxy par le votre, en surchargeant 
   la classe <classname>MysqlndUhConnection</classname> ou la classe
   <classname>MysqlndUhPreparedStatement</classname> pour étendre
   les fonctionnalités du proxy, suivi de l'enregistrement du nouvel
   objet proxy. Les objets proxy sont installés en utilisant les
   fonctions <function>mysqlnd_uh_set_connection_proxy</function> et
   <function>mysqlnd_uh_set_statement_proxy</function>.
  </para>
  <para>
   <example>
    <title>Installation d'un proxy</title>
        <programlisting role="php">
<![CDATA[
<?php
class proxy extends MysqlndUhConnection {
 public function connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
   printf("%s(%s)\n", __METHOD__, var_export(func_get_args(), true));
   $ret = parent::connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags);
   printf("%s retourne %s\n", __METHOD__, var_export($ret, true));
   return $ret;
 }
}
mysqlnd_uh_set_connection_proxy(new proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
proxy::connect(array (
  0 => NULL,
  1 => 'localhost',
  2 => 'root',
  3 => '',
  4 => 'test',
  5 => 3306,
  6 => NULL,
  7 => 131072,
))
proxy::connect retourne true
]]>
    </screen>
   </example>
  </para>
 </section>

 <section xml:id="mysqlnd-uh.quickstart.proxy-installation">
  <title>Installation d'un proxy</title>
  <para>
   L'extension fournit 2 classes internes : <classname>MysqlndUhConnection</classname>
   et <classname>MysqlndUhPreparedStatement</classname>. Les classes sont utilisées
   pour intercepter les appels à la bibliothèque <literal>mysqlnd</literal>. Leurs
   méthodes correspondent aux fonctions internes de <literal>mysqlnd</literal>. Par
   défaut, elles fonnctionnent comme un pproxy transparent et ne font rien mis à part
   appeler les homologues <literal>mysqlnd</literal>. En surchargeant les classes, vous
   pouvez installer votre propre proxy pour surveiller <literal>mysqlnd</literal>.
  </para>
  <para>
   Voir aussi le guide <link linkend="mysqlnd-uh.quickstart.how-it-works">sur
   le fonctionnement interne</link> de cette extension.
  </para>
  <para>
   Les proxies de connexions sont des objets de type <classname>MysqlndUhConnection</classname>.
   Les objets de proxy de connexion sont installés avec la fonction
   <function>mysqlnd_uh_set_connection_proxy</function>.
   Si vous installez la classe interne <classname>MysqlndUhConnection</classname> comme proxy,
   rien ne surviendra. Elle fonctionne comme un proxy transparent.
  </para>
 <para>
   <example>
    <title>Enregistration du proxy, mysqlnd_uh.enable=1</title>
        <programlisting role="php">
<![CDATA[
<?php
mysqlnd_uh_set_connection_proxy(new MysqlndUhConnection());
$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   La directive de configuration <literal>PHP_INI_SYSTEM</literal>
   <literal><link linkend="ini.mysqlnd-uh.enable">mysqlnd_uh.enable</link></literal>
   contrôle si un proxy doit être défini. Si désactivé, l'extension va
   émettre une erreur de niveau <literal>E_WARNING</literal>.
  </para>
  <para>
   <example>
    <title>Installation d'un proxy désactivée</title>
     <programlisting role="ini">
<![CDATA[
mysqlnd_uh.enable=0
]]>
    </programlisting>
        <programlisting role="php">
<![CDATA[
<?php
mysqlnd_uh_set_connection_proxy(new MysqlndUhConnection());
$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PHP Warning:  MysqlndUhConnection::__construct(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enabled = false.  You must not use any of the base classes in %s on line %d
PHP Warning:  mysqlnd_uh_set_connection_proxy(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enable = false. The proxy has not been installed  in %s on line %d
]]>
    </screen>
   </example>
  </para>
  <para>
   Pour monitorer <literal>mysqlnd</literal>, vous devez écrire votre propre
   objet proxy en surchargeant la classe <classname>MysqlndUhConnection</classname>.
   Reportez-vous à la section référence des fonctions pour une liste de toutes
   les méthodes qui peuvent être surchargées. Sinon, vous pouvez utiliser
   la réflection pour inspecter la classe interne
   <classname>MysqlndUhConnection</classname>.
  </para>
  <para>
   
   Crée une nouvelle classe <literal>proxy</literal>. Dérivez-la depuis la
   classe interne <classname>MysqlndUhConnection</classname>.
   Remplacez la méthode <function>MysqlndUhConnection::connect</function>.
   Affichez la valeur du paramètre hôte passée à la méthode.
   Assurez-vous que vous appelez l'implémentation parente de la méthode
   <literal>connect</literal>. Si vous ne le faîtes pas, vous obtiendrez des
   résultats non prévisibles et surtout non désirés, incluant un crash mémoire
   ou une fuite mémoire.
  </para>
  <para>
   Enregistrez votre proxy et ouvrez trois connexions en utilisant les extensions
   PHP MySQL <link linkend="ref.mysqli">mysqli</link>,
   <link linkend="ref.mysql">mysql</link>, et
   <link linkend="ref.pdo-mysql">PDO_MYSQL</link>. Si ces extensions ont été
   compilées pour utiliser la bibliothèque <literal>mysqlnd</literal>,
   la méthode <literal>proxy::connect</literal> sera appelée trois fois,
   une fois par connexion ouverte.
  </para>
  <para>
   <example>
    <title>Proxy de connexion</title>
        <programlisting role="php">
<![CDATA[
<?php
class proxy extends MysqlndUhConnection {
  public function connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
   printf("Connexion ouverte vers '%s'\n", $host);
   /* Appelez toujours l'implémentation parente ! */
   return parent::connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags);
  }
}
mysqlnd_uh_set_connection_proxy(new proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
$mysql = mysql_connect("localhost", "root", "");
$pdo = new PDO("mysql:host=localhost;dbname=test", "root", "");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Connexion ouverte vers 'localhost'
Connexion ouverte vers 'localhost'
Connexion ouverte vers 'localhost'
]]>
    </screen>
   </example>
  </para>
  <para>
   L'utilisation de proxies de requête préparée suit le même masque : créez
   un objet proxy de type <classname>MysqlndUhPreparedStatement</classname>
   et installez le proxy en utilisant la fonction
   <function>mysqlnd_uh_set_statement_proxy</function>.
  </para>
  <para>
   <example>
    <title>Proxy de requête préparée</title>
        <programlisting role="php">
<![CDATA[
<?php
class stmt_proxy extends MysqlndUhPreparedStatement {
 public function prepare($res, $query) {
  printf("%s(%s)\n", __METHOD__, $query);
  return parent::prepare($res, $query);
 }
}
mysqlnd_uh_set_statement_proxy(new stmt_proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
$stmt = $mysqli->prepare("SELECT 'mysqlnd hacking made easy' AS _msg FROM DUAL");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
stmt_proxy::prepare(SELECT 'mysqlnd hacking made easy' AS _msg FROM DUAL)
]]>
    </screen>
   </example>
  </para>
 </section>

 <section xml:id="mysqlnd-uh.quickstart.query-monitoring">
  <title>Surveillance de base des requête</title>
  <para>
   La surveillance de base d'une requête est simple avec PECL/mysqlnd_uh.
   Combiné avec la fonction <function>debug_print_backtrace</function>,
   ça peut devenir un outil très puissant, par exemple, pour trouver l'origine
   d'une requête. Ceci peut être nécessaire lors de la recherche de requêtes
   lentes, mais aussi après une re-factorisation de la base de données pour
   trouver le code continuant à accéder à une ancienne table ou base de données.
   Ce genre de recherche peut devenir vite compliqué en l'absence de
   ce genre d'outils, surtout si vous utilisez une application qui
   auto-génère des requêtes.
  </para>
  <para>
   <example>
    <title>Surveillance de base</title>
        <programlisting role="php">
<![CDATA[
<?php
class conn_proxy extends MysqlndUhConnection {
 public function query($res, $query) {
  debug_print_backtrace();
  return parent::query($res, $query);
 }
}
class stmt_proxy extends MysqlndUhPreparedStatement {
 public function prepare($res, $query) {
  debug_print_backtrace();
  return parent::prepare($res, $query);
 }
}
mysqlnd_uh_set_connection_proxy(new conn_proxy());
mysqlnd_uh_set_statement_proxy(new stmt_proxy());

printf("Proxies installed...\n");
$pdo = new PDO("mysql:host=localhost;dbname=test", "root", "");
var_dump($pdo->query("SELECT 1 AS _one FROM DUAL")->fetchAll(PDO::FETCH_ASSOC));

$mysqli = new mysqli("localhost", "root", "", "test");
$mysqli->prepare("SELECT 1 AS _two FROM DUAL");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
#0  conn_proxy->query(Resource id #19, SELECT 1 AS _one FROM DUAL)
#1  PDO->query(SELECT 1 AS _one FROM DUAL) called at [example.php:19]
array(1) {
  [0]=>
  array(1) {
    ["_one"]=>
    string(1) "1"
  }
}
#0  stmt_proxy->prepare(Resource id #753, SELECT 1 AS _two FROM DUAL)
#1  mysqli->prepare(SELECT 1 AS _two FROM DUAL) called at [example.php:22]
]]>
    </screen>
   </example>
  </para>
  <para>
   Pour une surveillance de base des requêtes, vous devriez installer une connexion
   et un proxy de requête préparée. Le proxy de connexion doit surcharger la classe
   <function>MysqlndUhConnection::query</function>. Toutes les requêtes
   de base de données qui n'utilisent pas des requêtes préparées nativement
   devront appeler cette méthode. Dans l'exemple ci-dessus, la fonction
   <literal>query</literal> est invoquée par un appel PDO. Par défaut,
   <literal>PDO_MySQL</literal> utilise une émulation de requête préparée.
  </para>
  <para>
   Toutes les requêtes préparées natives sont préparées avec la méthode
   <literal>prepare</literal> de <literal>mysqlnd</literal> exportée via
   <methodname>MysqlndUhPreparedStatement::prepare</methodname>.
   Surchargez la classe <classname>MysqlndUhPreparedStatement</classname>
   et écrasez la fonction <literal>prepare</literal> pour une surveillance
   des requêtes préparées natives.
  </para>
 </section>


</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
