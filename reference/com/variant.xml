<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 49ff12041acd30489ef8cb7b1e08ec1ddf4dc6bc Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.variant" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>variant</titleabbrev>
 <title>La classe variant</title>
 <partintro>

<!-- {{{ variant intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>
    
    Le VARIANT est l'équivalent COM de zval pour PHP ; c'est une structure qui
    peut contenir une valeur avec un intervalle de différent types possibles.
    La classe variant fournie par l'extension COM vous permet d'avoir plus de
    contrôle sur ce que PHP envoie et reçoit de COM.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>variant</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <classname>variant</classname>
     </ooclass>
    </classsynopsisinfo>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='variant'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.variant.examples">
   <title>Exemples variant</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>Exemple variant</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new variant(42);
print "The type is " . variant_get_type($v) . "<br/>";
print "The value is " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Lors du retour d'une valeur ou récupérer une propriété variant, le variant
     est converti en une valeur PHP seulement quand il y a une correspondance
     directe entre les types qui ne produiraient pas une perte d'information.
     Dans tous les autres cas, la valeur est retourné en tant qu'une instance
     de la classe variant. Vous pouvez forcer PHP de convertir ou évaluer le
     variant en tant que type PHP natif en utilisant les opérateurs de transtypage
     explicitement, ou implicitement vers une &string; en l'affichant
     grâce à <function>print</function>. Vous pouvez utiliser la grande variété
     de fonctions variant pour effectuer des opérations arithmétrique sans
     forcer une conversion et risquer une perte de données.
    </para>
   </note>
   <para>
    Voir aussi <function>variant_get_type</function>.
   </para>
  </section>

 </partintro>

 &reference.com.entities.variant;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
