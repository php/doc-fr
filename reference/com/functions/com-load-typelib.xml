<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b9043112d87ec0ca6db17276d7013acc2368ed33 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.com-load-typelib" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>com_load_typelib</refname>
  <refpurpose>Charge un Typelib</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>com_load_typelib</methodname>
   <methodparam><type>string</type><parameter>typelib</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>case_insensitive</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Charge un Typelib et enregistre son contenu dans le moteur, comme s'ils avaient été définis
   en utilisant <function>define</function>.
  </para>
  <para>
   Notez qu'il est plus efficace d'utiliser <link linkend="ini.com.typelib-file">com.typelib-file</link>
   &php.ini; l'option de configuration pour précharger et enregistrer les constantes, même si cela
   est moins flexible.
  </para>
  <para>
   Si <link linkend="ini.com.autoregister-typelib">com.autoregister-typelib</link> est activé,
   alors PHP essayera d'enregistrer automatiquement les constantes associées à l'objet COM
   lorsque vous créerez l'objet. Cela dépendra de l'interface fournie par l'objet COM
   lui-même et ne sera pas toujours possible.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>typelib</parameter></term>
     <listitem>
      <para>
       <parameter>typelib</parameter> peut être une des valeurs suivantes :
       <itemizedlist>
        <listitem>
         <para>
          Le nom d'un fichier <literal>.tlb</literal> ou le module exécutable contenant
          le Typelib.
         </para>
        </listitem>
        <listitem>
         <para>
          Le GUID du Typelib, suivi du numéro de version ; par exemple
          <literal>{00000200-0000-0010-8000-00AA006D2EA4},2,0</literal>.
         </para>
        </listitem>
        <listitem>
         <para>
          Le nom du Typelib, e.g <literal>Microsoft OLE DB ActiveX Data
          Objects 1.0 Library</literal>.
         </para>
        </listitem>
       </itemizedlist>
       PHP va essayer de résoudre le Typelib dans cet ordre, et le processus
       prendra de plus en plus de ressources pour arriver à la fin de la liste ;
       la recherche du Typelib par son nom est manipulée physiquement
       en énumérant le registre jusqu'à ce qu'un résultat y soit trouvé.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>case_insensitive</parameter></term>
     <listitem>
      <para>
       Le paramètre <parameter>case_insensitive</parameter> se comporte à l'inverse
       du paramètre <literal>$case_insensitive</literal> de la fonction <function>define</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
