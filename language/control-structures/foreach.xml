<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 44ae7cb94991c11c93bc23f8a6544f81bb36cf1a Maintainer: jpauli Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  La structure de langage <literal>foreach</literal> fournit une façon simple de
  parcourir des <type>array</type> et objets <interfacename>Traversable</interfacename>.
  <literal>foreach</literal> générera une erreur lorsqu'il est utilisé avec
  une variable contenant un type de données différent ou avec une variable non initialisée.
  <informalexample>
   <simpara>
    <literal>foreach</literal> peut éventuellement obtenir la <literal>clé</literal> de chaque élément :
   </simpara>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $value) {
    statement_list
}

foreach (iterable_expression as $key => $value) {
    statement_list
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  La première forme passe en revue le tableau
  <literal>iterable_expression</literal>. À chaque itération, la valeur de
  l'élément courant est assignée à <literal>$value</literal>.
 </simpara>
 <simpara>
  La seconde forme assignera en plus la clé de l'élément courant
  à la variable <literal>$key</literal> à chaque itération.
 </simpara>
 <simpara>
  Il est à noter que <literal>foreach</literal> ne modifie pas le pointeur
  interne du tableau, qui est utilisé par les fonctions tel que
  <function>current</function> et <function>key</function>.
 </simpara>
 <simpara>
  Il est possible de personnaliser
  <link linkend="language.oop5.iterations">l'itération sur des objets</link>.
 </simpara>

 <example>
  <title>Utilisations courantes de <literal>foreach</literal></title>
  <programlisting role="php">
<![CDATA[
<?php

/* Exemple : valeur uniquement */

$array = [1, 2, 3, 17];

foreach ($array as $value) {
    echo "Valeur courante de \$array: $value.\n";
}

/* Exemple : clé et valeur */

$array = [
    "un" => 1,
    "deux" => 2,
    "trois" => 3,
    "dix-sept" => 17
];

foreach ($array as $key => $value) {
    echo "\$array[$key] => $value.\n";
}

/* Exemple : tableaux clé-valeur multidimensionnels */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";

foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "Valeur à la position x=$x et y=$y : $value\n";
    }
}

/* Exemple : tableaux dynamiques */

foreach (range(1, 5) as $value) {
    echo "$value\n";
}
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   <literal>foreach</literal> ne prend pas en charge la possibilité de
   supprimer les messages d'erreur en utilisant le
   <link linkend="language.operators.errorcontrol"><literal>@</literal></link>.
  </para>
 </note>


 <sect2 xml:id="control-structures.foreach.list">
  <title>Extraction des tableaux internes</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   Il est possible d'itérer sur un tableau de tableaux et de décomposer le tableau imbriqué
   dans des variables de boucle en utilisant soit
   <link linkend="language.types.array.syntax.destructuring">la déstructuration de tableau</link>
   via <literal>[]</literal> ou en utilisant le constructeur de langage <function>list</function> comme valeur.

   <note>
    <simpara>
     A noter que
     <link linkend="language.types.array.syntax.destructuring">la déstructuration de tableau</link>
     via <literal>[]</literal> n'est possible qu'à partir de PHP 7.1.0
    </simpara>
   </note>
  </para>

  <para>

   <informalexample>
    <simpara>
     Dans les deux exemples suivants, <literal>$a</literal> sera défini sur
     le premier élément du tableau imbriqué et <literal>$b</literal> contiendra
     le deuxième élément :
    </simpara>
    <programlisting role="php">
     <![CDATA[
     <?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Lorsqu'il y a moins de variables que d'éléments dans le tableau,
   les éléments restants seront ignorés.
   De même, les éléments peuvent être ignorés en utilisant une virgule :

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
     [1, 2, 3],
    [3, 4, 6],
];

foreach ($array as [$a, $b]) {
    // Notez qu'il n'y a pas de $c ici.
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // Ignorer $a et $b
    echo "$c\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Une notification sera générée s'il n'y a pas assez d'éléments dans le tableau
   pour remplir la fonction <function>list</function> :

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C: 

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C: 
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>foreach et références</title>
  <para>
   Il est possible de modifier directement les éléments du tableau dans une boucle en précédant
   <literal>$value</literal> de <literal>&amp;</literal>.
   Dans ce cas, la valeur sera assignée par
   <link linkend="language.references">référence</link>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr est maintenant [2, 4, 6, 8]
unset($value); // rompre la référence avec le dernier élément
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    La référence à <literal>$value</literal> du dernier élément du tableau
    demeure même après la boucle <literal>foreach</literal>. Il est recommandé
    de détruire ces références en utilisant <function>unset</function>.
    Sinon, le comportement suivant se produira :
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr est maintenant [2, 4, 6, 8]

// sans unset($value), $value est toujours une référence au dernier élément : $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] sera mis à jour avec chaque valeur de $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...jusqu'à ce que finalement l'avant-dernière valeur soit copiée sur la dernière valeur
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>Itérer sur les valeurs d'un tableau constant par référence</title>
   <programlisting role="php">
<![CDATA[
<?php
foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
