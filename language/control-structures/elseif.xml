<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: bbaf4fea6946bf6d0b67573d5f2f96c5a2c5d678 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.elseif" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>elseif/else if</title>
 <?phpdoc print-version-for="elseif"?>
 <para>
  <literal>elseif</literal>, comme son nom l'indique, est une combinaison
  de <literal>if</literal> et de <literal>else</literal>. Comme l'expression
  <literal>else</literal>, il permet d'exécuter une instruction
  après un <literal>if</literal> dans le cas où le "premier"
  if est évalué comme &false;. Mais,
  à la différence de l'expression <literal>else</literal>,
  il n'exécutera l'instruction que si l'expression conditionnelle
  <literal>elseif</literal> est évaluée comme
  &true;. L'exemple suivant affichera
  <computeroutput>a est plus grand que b</computeroutput>,
  <computeroutput>a est égal à b</computeroutput> ou
  <computeroutput>a est plus petit que b</computeroutput> :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
if ($a > $b) {
    echo "a est plus grand que b";
} elseif ($a == $b) {
    echo "a est égal à b";
} else {
    echo "a est plus petit que b";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Vous pouvez avoir plusieurs <literal>elseif</literal> qui se suivent
  les uns après les autres, après un <literal>if</literal> initial.
  Le premier <literal>elseif</literal> qui sera évalué
  à &true; sera exécuté. En PHP, il est possible d'écrire
  <literal>else if</literal> en deux mots et son comportement sera identique
  à celle de <literal>elseif</literal> (en un seul mot). La sémantique
  des deux expressions est légèrement différente (tout comme en C), mais au bout du compte,
  le résultat sera exactement le même.
 </simpara>
 <simpara>
  L'expression <literal>elseif</literal> est exécutée
  seulement si le <literal>if</literal> précédent et tout
  autre <literal>elseif</literal> précédent sont
  évalués comme &false;, et que
  votre <literal>elseif</literal> est évalué à
  &true;.
 </simpara>
 <note>
  <simpara>
   A noter que <literal>elseif</literal> et <literal>else if</literal>
   sont traités de la même façon seulement quand des accolades sont utilisées,
   comme dans l'exemple ci-dessus. Quand vous utilisez ":" pour définir
   vos conditions <literal>if</literal>/<literal>elseif</literal>, l'utilisation
   de <literal>elseif</literal> en un seul mot devient nécessaire. PHP
   échouera avec une erreur d'analyse si <literal>else if</literal> est utilisé. 
  </simpara>
 </note>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

/* Mauvaise méthode : */
if ($a > $b):
    echo $a." est plus grand que ".$b;
else if ($a == $b): // ne compilera pas
    echo "La ligne ci-dessus provoque une erreur d'interprétation";
endif;


/* Bonne méthode : */
if ($a > $b):
    echo $a." est plus grand que ".$b;
elseif ($a == $b): // Les deux mots sont collés
    echo $a." égal ".$b;
else:
    echo $a." est plus grand ou égal à ".$b;
endif;

?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
