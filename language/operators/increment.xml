<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.increment">
 <title>Opérateurs d'incrémentation et décrémentation</title>
 <para>
  PHP supporte les opérateurs de pre- et post-incrémentation et
  décrémentation, comme en langage C.
 </para>
 <note>
  <simpara>
   Les opérateurs d'incrémentation/décrémentation n'affectent que les
   nombres et les chaînes de caractères.
   Les tableaux, objets, booléen et ressources ne sont pas affectées.
   La décrémentation des valeurs &null; n'a également aucun effet,
   mais leur incrémentation donnera comme résultat <literal>1</literal>.
  </simpara>
 </note>
 <table>
  <title>Opérateurs d'incrémentation et décrémentation</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemple</entry>
     <entry>Nom</entry>
     <entry>Résultat</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Pre-incrémente</entry>
     <entry>
      Incrémente <varname>$a</varname> de 1, puis retourne
      <varname>$a</varname>.
     </entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-incrémente</entry>
     <entry>Retourne <varname>$a</varname>, puis incrémente <varname>$a</varname> de 1.</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Pré-décrémente</entry>
     <entry>
      Décrémente <varname>$a</varname> de 1, puis retourne
      <varname>$a</varname>.
     </entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-décrémente</entry>
     <entry>
      Retourne <varname>$a</varname>, puis décrémente
      <varname>$a</varname> de 1.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Voici un exemple simple :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo '<h3>Post-incrémentation</h3>';
$a = 5;
echo "Devrait valoir  5: " . $a++ . "<br />\n";
echo "Devrait valoir  6: " . $a . "<br />\n";
echo '<h3>Pre-incrémentation</h3>';
$a = 5;
echo "Devrait valoir  6: " . ++$a . "<br />\n";
echo "Devrait valoir  6: " . $a . "<br />\n";
echo '<h3>Post-décrémentation</h3>';
$a = 5;
echo "Devrait valoir  5: " . $a-- . "<br />\n";
echo "Devrait valoir  4: " . $a . "<br />\n";
echo '<h3>Pre-décrémentation</h3>';
$a = 5;
echo "Devrait valoir  4: " . --$a . "<br />\n";
echo "Devrait valoir  4: " . $a . "<br />\n";
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  PHP suit les conventions de Perl pour la gestion des opérateurs
  arithmétiques sur les variables de caractères et non pas celle du C.
  Par exemple, en PHP et en Perl, <literal>$a = 'Z'; $a++;</literal>
  transforme <literal>$a</literal> en <literal>'AA'</literal>,
  alors qu'en C, <literal>a = 'Z'; a++;</literal> transforme
  <literal>a</literal> en <literal>'['</literal> (la valeur ASCII de
  <literal>'Z'</literal> est 90, la valeur ASCII de <literal>'['</literal>
  est 91). Notez que les variables de caractères peuvent être incrémentés,
  mais pas décrémentées, mais aussi que seuls les lettres et chiffres ASCII
  (a-z, A-Z et 0-9) sont supportés.
  L'incrémentation/décrémentation d'autres variables de caractères n'a
  aucun effet, la chaîne originale n'est pas modifiée.
  <example>
   <title>Opérations arithmétiques sur un caractère</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Chaînes alphabétiques ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Les chaînes alphanumériques se comportent différemment
echo '== Caractères digitaux ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Chaînes alphabétiques ==
X
Y
Z
AA
AB
AC
== Chaînes alphanumériques ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
 </para>
 <para>
  L'incrémentation ou la décrémentation d'un booléen n'a aucun effet.
 </para>
</sect1>
