<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 02302a754aa0b2ea9a783f792e2c2c6c54230829 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.increment">
 <title>Opérateurs d'incrémentation et décrémentation</title>
 <para>
  PHP prend en charge les opérateurs de pre- et post- incrémentation et décrémentation.
  Ces opérateurs unaires permettent d'augmenter ou de diminuer la valeur de un.
 </para>
 <table>
  <title>Opérateurs d'incrémentation et décrémentation</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemple</entry>
     <entry>Nom</entry>
     <entry>Résultat</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Pre-incrémente</entry>
     <entry>
      Incrémente <varname>$a</varname> de 1, puis retourne
      <varname>$a</varname>.
     </entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-incrémente</entry>
     <entry>Retourne <varname>$a</varname>, puis incrémente <varname>$a</varname> de 1.</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Pré-décrémente</entry>
     <entry>
      Décrémente <varname>$a</varname> de 1, puis retourne
      <varname>$a</varname>.
     </entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-décrémente</entry>
     <entry>
      Retourne <varname>$a</varname>, puis décrémente
      <varname>$a</varname> de 1.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  Voici un exemple simple :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo 'Post-incrément:', PHP_EOL;
$a = 5;
var_dump($a++);
var_dump($a);
echo 'Pre-incrément:', PHP_EOL;
$a = 5;
var_dump(++$a);
var_dump($a);
echo 'Post-décrément:', PHP_EOL;
$a = 5;
var_dump($a--);
var_dump($a);
echo 'Pre-décrément:';
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Post-incrément:
int(5)
int(6)
Pre-incrément:
int(6)
int(6)
Post-décrément:
int(5)
int(4)
Pre-décrément:
int(4)
int(4)
]]>
   </screen>
  </informalexample>
  <warning>
   <para>
    Les opérateurs d'incrémentation et de décrémentation n'ont aucun effet sur les valeurs
    de type <type>bool</type>.
    Un <constant>E_WARNING</constant> est émis à partir de PHP 8.3.0,
    car cela convertira implicitement la valeur en <type>int</type> à l'avenir.
   </para>
   <para>
    L'opérateur de décrémentation n'a aucun effet sur les valeurs
    de type <type>null</type>.
    Un <constant>E_WARNING</constant> est émis à partir de PHP 8.3.0,
    car cela convertira implicitement la valeur en <type>int</type> à l'avenir.
   </para>
   <para>
    L'opérateur de décrémentation n'a aucun effet sur les chaînes non numériques.
    Un <constant>E_WARNING</constant> est émis à partir de PHP 8.3.0,
    car une <classname>TypeError</classname> sera levée à l'avenir.
   </para>
  </warning>
  <note>
   <para>
    Les objets internes qui prennent en charge la surcharge de l'addition et/ou de la soustraction
    peuvent également être incrémentés et/ou décrémentés.
    Un tel objet interne est <classname>GMP</classname>.
   </para>
  </note>
 </para>

  <sect2 xml:id="language.operators.increment.string">
  <title>Fonctionnalité d'incrémentation de chaînes PERL</title>
  <warning>
   <simpara>
    Cette fonctionnalité est obsolète de manière souple à partir de PHP 8.3.0.
    La fonction <function>str_increment</function> devrait être utilisée à la place.
   </simpara>
  </warning>

  <para>
   Il est possible d'incrémenter une
   <link linkend="language.types.numeric-strings">chaîne non numérique</link>
   dans PHP. La chaîne doit être une chaîne ASCII alphanumérique.
   Cela incrémente les lettres jusqu'à la lettre suivante, et lorsque la lettre
   <literal>Z</literal> est atteinte, l'incrément est reporté à la valeur à gauche.
   Par exemple, <code>$a = 'Z'; $a++;</code> transforme <varname>$a</varname>
   en <literal>'AA'</literal>.
  </para>

  <example>
   <title>Exemple d'incrémentation de chaîne PERL</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Chaînes alphabétiques ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Les chaînes alphanumériques se comportent différemment
echo '== Caractères digitaux ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Chaînes alphabétiques ==
X
Y
Z
AA
AB
AC
== Chaînes alphanumériques ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
  <warning>
   <para>
    Si la chaîne alphanumérique peut être interprétée comme une
    <link linkend="language.types.numeric-strings">chaîne numérique</link>,
    elle sera convertie en <type>int</type> ou en <type>float</type>.
    C'est particulièrement problématique avec les chaînes qui ressemblent à des nombres à virgule flottante
    écrits en notation exponentielle.
    La fonction <function>str_increment</function> ne souffre pas de
    ces conversions de type implicites.
   </para>
   <example>
    <title>Conversion de chaîne alphanumérique en flottant</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     Cela est dû au fait que la valeur <literal>"5e0"</literal> est interprétée
     comme un <type>float</type> et convertie en la valeur <literal>5.0</literal>
     avant d'être incrémentée.
    </para>
   </example>
  </warning>
 </sect2>
</sect1>
