<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.logical">
 <title>Les opérateurs logiques</title>

 <table>
  <title>Les opérateurs logiques</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemple</entry>
     <entry>Nom</entry>
     <entry>Résultat</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a and $b</entry>
     <entry>And (Et)</entry>
     <entry>&true; si <varname>$a</varname> ET <varname>$b</varname> valent &true;.</entry>
    </row>
    <row>
     <entry>$a or $b</entry>
     <entry>Or (Ou)</entry>
     <entry>&true; si <varname>$a</varname> OU <varname>$b</varname> valent &true;.</entry>
    </row>
    <row>
     <entry>$a xor $b</entry>
     <entry>XOR</entry>
     <entry>
      &true; si <varname>$a</varname> OU <varname>$b</varname> est &true;,
      mais pas les deux en même temps.
     </entry>
    </row>
    <row>
     <entry>! $a</entry>
     <entry>Not (Non)</entry>
     <entry>&true; si <varname>$a</varname> n'est pas &true;.</entry>
    </row>
    <row>
     <entry>$a &amp;&amp; $b</entry>
     <entry>And (Et)</entry>
     <entry>&true; si <varname>$a</varname> ET <varname>$b</varname> sont &true;.</entry>
    </row>
    <row>
     <entry>$a || $b</entry>
     <entry>Or (Ou)</entry>
     <entry>&true; si <varname>$a</varname> OU <varname>$b</varname> est &true;.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <simpara>
  La raison pour laquelle il existe deux types de "ET" et de "OU"
  est qu'ils ont des priorités différentes. Voir le
  paragraphe
  <link linkend="language.operators.precedence">précédence d'opérateurs</link>.
 </simpara>
 <example>
  <title>Illustration des opérateurs logiques</title>
  <programlisting role="php">
<![CDATA[
<?php

// --------------------
// foo() ne sera jamais appelée, car ces opérateurs s'annulent

$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// --------------------
// "||" a une précédence supérieure à "or"

// Le résultat de l'expression (false || true) est affecté à $e
// Agit comme : ($e = (false || true))
$e = false || true;

// La constante false est affectée à $f avant que l'opération "or" apparaisse
// Agit comme : (($f = false) or true)
$f = false or true;

var_dump($e, $f);

// --------------------
// "&&" a une précédence supérieure à "and"

// Le résultat de l'expression (true && false) est affecté à $g
// Agit comme : ($g = (true && false))
$g = true && false;

// La constante true est affectée à $h avant que l'opération "and" apparaisse
// Agit comme : (($h = true) and false)
$h = true and false;

var_dump($g, $h);
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
  </screen>
 </example>
</sect1>
