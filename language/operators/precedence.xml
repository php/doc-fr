<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.precedence">
 <title>La priorité des opérateurs</title>
 <para>
  La priorité des opérateurs spécifie
  l'ordre dans lequel les valeurs doivent être analysées.
  Par exemple, dans l'expression <literal>1 + 5 * 3</literal>, le résultat est
  <literal>16</literal> et non <literal>18</literal>, car la multiplication
  ("*") a une priorité supérieure par rapport à l'addition ("+").
  Des parenthèses peuvent être utilisées pour forcer la priorité, si
  nécessaire. Par exemple : <literal>(1 + 5) * 3</literal> donnera
  <literal>18</literal>.
 </para>
 <para>
  Lorsque les opérateurs ont une priorité égale, leur association
  décide la façon dont les opérateurs sont groupés. Par exemple,
  "-" est une association par la gauche, ainsi <literal>1 - 2 - 3</literal>
  est groupé comme ceci <literal>(1 - 2) - 3</literal> et sera évalué
  à <literal>-4</literal>. D'un autre côté, "=" est une association par la
  droite, ainsi, <literal>$a = $b = $c</literal> est groupé comme ceci
  <literal>$a = ($b = $c)</literal>.
 </para>

 <para>
  Les opérateurs, dont la priorité est égale, qui ne sont pas associatifs,
  ne peuvent pas être utilisés entre eux, par exemple,
  <literal>1 &lt; 2 &gt; 1</literal> est interdit en PHP. L'expression
  <literal>1 &lt;= 1 == 1</literal> par contre, est autorisée, car l'opérateur
  <literal>==</literal> a une précédence inférieure que l'opérateur
  <literal>&lt;=</literal>.
 </para>
 <para>
  L'associativité à uniquement du sens pour les opérateurs binaire (et ternaire).
  Les opérateurs unitaires sont soit préfixé, soit suffixé ainsi cette notion
  n'est pas applicable. Par exemple <literal>!!$a</literal> peut uniquement
  être groupé de la manière suivante <literal>!(!$a)</literal>.
 </para>
 <para>
  L'utilisation des parenthèses, y compris lorsqu'elles ne sont pas nécessaires,
  permet de mieux lire le code en effectuant des groupements explicites
  plutôt qu'imaginer la priorité des opérateurs et leurs associations.
 </para>
 <para>
  Le tableau qui suit liste les opérateurs par ordre de priorité, avec la
  priorité la plus élevée en haut. Les opérateurs sur la même ligne ont
  une priorité équivalente (donc l'associativité décide du groupement).
  <table>
   <title>Priorité des opérateurs</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Associativité</entry>
      <entry>Opérateurs</entry>
      <entry>Information additionnelle</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> et <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>droite</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">arithmétique</link></entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmétique</link> (unitaire <literal>+</literal> et <literal>-</literal>),
       <link linkend="language.operators.increment">incrément/décrément</link>
       <link linkend="language.operators.bitwise">bit à bit</link>,
       <link linkend="language.types.typecasting">casting de type</link>&listendand;
       <link linkend="language.operators.errorcontrol">contrôle d'erreur</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">type</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmétique</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmétique</link>
       (binaire <literal>+</literal> et <literal>-</literal>),
       <link linkend="language.operators.array">tableau</link>&listendand;
       <link linkend="language.operators.string">chaîne de caractères</link>
       (<literal>.</literal> antérieur à PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">string</link> (à partir de PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>non-associatif</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparaison</link>
      </entry>
     </row>
     <row>
      <entry>non-associatif</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparaison</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>&listendand;
       <link linkend="language.references">références</link></entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
     <row>
      <entry>droite</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">coalescence nul</link>
      </entry>
     </row>
     <row>
      <entry>non-associatif</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">ternaire</link>
       (gauche--associatif antérieur à PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>droite</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">affectation</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
     <row>
      <entry>gauche</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logique</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Associativité</title>
   <programlisting role="php">
    <![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// L'association des opérateurs ternaires diffère de C/C++
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (antérieur à PHP 8.0.0)

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  La priorité et l'association de l'opérateur ne déterminent que
  la façon dont les expressions sont groupées ; ils ne spécifient
  pas l'ordre de l'évaluation. PHP ne spécifie pas (de manière générale)
  l'ordre dans lequel une expression est évaluée et le code qui suppose
  un ordre spécifique d'évaluation ne devrait pas exister, car le
  comportement peut changer entre les différentes versions de PHP
  ou suivant le code environnant.
  <example>
   <title>Ordre d'évaluation indéfini</title>
   <programlisting role="php">
    <![CDATA[
<?php
$a = 1;
echo $a + $a++; // peut afficher 2 ou 3

$i = 1;
$array[$i] = $i++; // peut définir l'index 1 ou 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>
    <literal>+</literal>, <literal>-</literal> et <literal>.</literal>
    ont la même priorité (antérieur à PHP 8.0.0)
   </title>
   <programlisting role="php">
    <![CDATA[
<?php
$x = 4;
// cette ligne peut entraîner une sortie inattendue :
echo "x moins un est égal " . $x-1 . ", en tout cas j'espère\n";
// parce que c'est évalué comme la ligne suivante (antérieur à PHP 8.0.0) :
echo (("x moins un est égal " . $x) - 1) . ", en tout cas j'espère\n";
// la priorité désirée peut être renforcée en utilisant les parenthèses. :
echo "x moins un est égal " . ($x-1) . ", en tout cas j'espère\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
-1, en tout cas j'espère
-1, en tout cas j'espère
x moins un est égal 3, en tout cas j'espère
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   Bien que <literal>=</literal> soit prioritaire sur
   la plupart des opérateurs, PHP va tout de même exécuter des
   expressions comme : <literal>if (!$a = foo())</literal>.
   Dans cette situation, le résultat de <literal>foo()</literal>
   sera placé dans la variable <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       La concaténation de chaînes de caractères (<literal>.</literal>) a désormais
       une précédence moins élevée que l'addition/soustraction arithmétique
       (<literal>+</literal> et <literal>-</literal>) et les shifts bit-à-bit
       gauche/droite (<literal>&lt;&lt;</literal> et <literal>&gt;&gt;</literal>);
       auparavant ceci avait la même précédence que <literal>+</literal> et <literal>-</literal>,
       et une précédence plus élevée que <literal>&lt;&lt;</literal> et <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       L'opérateur ternaire (<literal>? :</literal>) est désormais non associatif ;
       auparavant, il était gauche-associatif.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dépendre de la précédence de la concaténation de chaînes de caractères
       (<literal>.</literal>) relatif à l'addition/soustraction arithmétique
       (<literal>+</literal> ou <literal>-</literal>) ou les shifts bit-à-bit
       gauche/droite (<literal>&lt;&lt;</literal> ou <literal>&gt;&gt;</literal>),
       c.-à-d. les utiliser ensemble dans une expression sans parenthèse, est obsolète.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dépendre de la gauche-associativité de l'opérateur ternaire (<literal>? :</literal>),
       c.-à-d. l'imbrication de plusieurs opérateurs ternaires qui ne sont pas
       entre parenthèse, est obsolète.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
