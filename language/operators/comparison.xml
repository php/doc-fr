<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.comparison">
 <title>Opérateurs de comparaison</title>
 <simpara>
  Les opérateurs de comparaison, comme leur nom l'indique,
  vous permettent de comparer deux valeurs. Vous devriez également être
  intéressés par les
  <link linkend="types.comparisons">tables de comparaisons de types</link>,
  car ils montrent des exemples de beaucoup de types de comparaisons.
 </simpara>
 <table>
  <title>Opérateurs de comparaison</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemple</entry>
     <entry>Nom</entry>
     <entry>Résultat</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a == $b</entry>
     <entry>Égal</entry>
     <entry>&true; si <varname>$a</varname> est égal à
      <varname>$b</varname> après le transtypage.</entry>
    </row>
    <row>
     <entry>$a === $b</entry>
     <entry>Identique</entry>
     <entry>
      &true; si <varname>$a</varname> est égal à <varname>$b</varname> et
      qu'ils sont de même type.
     </entry>
    </row>
    <row>
     <entry>$a != $b</entry>
     <entry>Différent</entry>
     <entry>&true; si <varname>$a</varname> est différent de
      <varname>$b</varname> après le transtypage.</entry>
    </row>
    <row>
     <entry>$a &lt;&gt; $b</entry>
     <entry>Différent</entry>
     <entry>&true; si <varname>$a</varname> est différent de
      <varname>$b</varname> après le transtypage.</entry>
    </row>
    <row>
     <entry>$a !== $b</entry>
     <entry>Différent</entry>
     <entry>
      &true; si <varname>$a</varname> est différent de <varname>$b</varname>
      ou bien s'ils ne sont pas du même type.
     </entry>
    </row>
    <row>
     <entry>$a &lt; $b</entry>
     <entry>Plus petit que</entry>
     <entry>&true; si <varname>$a</varname> est strictement plus petit que
      <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt; $b</entry>
     <entry>Plus grand</entry>
     <entry>&true; si <varname>$a</varname> est strictement plus grand que
      <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;= $b</entry>
     <entry>Inférieur ou égal</entry>
     <entry>&true; si <varname>$a</varname> est plus petit ou égal à
      <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt;= $b</entry>
     <entry>Supérieur ou égal</entry>
     <entry>&true; si <varname>$a</varname> est plus grand ou égal à
      <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;=&gt; $b</entry>
     <entry>Combiné</entry>
     <entry>
      Un &integer; inférieur, égal ou supérieur à zéro lorsque
      <varname>$a</varname> est inférieur, égal, ou supérieur à
      <varname>$b</varname> respectivement.
     </entry>
    </row>

   </tbody>
  </tgroup>
 </table>
 <para>
  Si les deux opérandes sont des
  <link linkend="language.types.numeric-strings">chaînes numériques</link>,
  ou si un opérande est un nombre et l'autre est une
  <link linkend="language.types.numeric-strings">chaîne numérique</link>,
  alors la comparaison sera effectuée numériquement.
  Ces règles s'appliquent également à l'instruction
  <link linkend="control-structures.switch">switch</link>.
  La conversion de type n'intervient pas lorsque la comparaison est
  <literal>===</literal> ou <literal>!==</literal>
  vu que ceci engendre aussi bien une comparaison de type que de valeur.
 </para>

 <warning>
  <para>
   Antérieur à PHP 8.0.0, si une <type>string</type> est comparé à un nombre
   ou à une chaîne numérique alors la <type>string</type> sera convertie en un
   nombre avant d'effectuer la comparaison. Ceci peut mener à des résultats
   surprenant comme il peut être vu avec l'exemple suivant :
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(0 == "a");
var_dump("1" == "01");
var_dump("10" == "1e1");
var_dump(100 == "1e2");

switch ("a") {
case 0:
    echo "0";
    break;
case "a":
    echo "a";
    break;
}
?>
]]>
    </programlisting>
    &example.outputs.7;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
bool(true)
0
]]>
    </screen>
    &example.outputs.8;
    <screen>
<![CDATA[
bool(false)
bool(true)
bool(true)
bool(true)
a
]]>
    </screen>
   </informalexample>
  </para>
 </warning>

 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php  
// Entiers
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1
 
// Nombre flottants
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// Chaines de caractères
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
 
echo "a" <=> "aa"; // -1
echo "zz" <=> "aa"; // 1
 
// Tableaux
echo [] <=> []; // 0
echo [1, 2, 3] <=> [1, 2, 3]; // 0
echo [1, 2, 3] <=> []; // 1
echo [1, 2, 3] <=> [1, 2, 1]; // 1
echo [1, 2, 3] <=> [1, 2, 4]; // -1
 
// Objets
$a = (object) ["a" => "b"]; 
$b = (object) ["a" => "b"]; 
echo $a <=> $b; // 0
 
$a = (object) ["a" => "b"]; 
$b = (object) ["a" => "c"]; 
echo $a <=> $b; // -1
 
$a = (object) ["a" => "c"]; 
$b = (object) ["a" => "b"]; 
echo $a <=> $b; // 1
 
// non seulement les valeurs sont comparées; les clés doivent correspondre
$a = (object) ["a" => "b"]; 
$b = (object) ["b" => "b"]; 
echo $a <=> $b; // 1

?>
]]>

   </programlisting>
  </informalexample>
 </para>

 <para>
  Pour les différents types, la comparaison est faite en suivant
  la table suivante (dans l'ordre).
 </para>
 <table xml:id="language.operators.comparison.types">
  <title>Comparaison avec plusieurs types</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Type de l'opérande 1</entry>
     <entry>Type de l'opérande 2</entry>
     <entry>Résultat</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><type>null</type> ou <type>string</type></entry>
     <entry><type>string</type></entry>
     <entry>Convertit &null; en "", comparaison numérique ou lexicale</entry>
    </row>
    <row>
     <entry><type>bool</type> ou <type>null</type></entry>
     <entry>N'importe quoi</entry>
     <entry>Convertit en <type>bool</type>, &false; &lt; &true;</entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry><type>object</type></entry>
     <entry>Les classes internes peuvent définir leur propre méthode de
      comparaison ; différentes classes sont incomparables ; entre objets
      de même classe voir <link
              linkend="language.oop5.object-comparison">Comparaison d'objet</link></entry>
    </row>
    <row>
     <entry>
      &string;, &resource;, &integer; ou &float;
     </entry>
     <entry>
      &string;, &resource;, &integer; ou &float;
     </entry>
     <entry>
      Transforme les chaînes de caractères et les ressources en nombres
     </entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry><type>array</type></entry>
     <entry>Le tableau avec le moins de membres est plus petit, si la clé de
      l'opérande 1 n'est pas trouvée dans l'opérande 2, alors les tableaux
      sont incomparables, sinon la comparaison se fait valeur par valeur
      (voir l'exemple suivant)
     </entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry>N'importe quoi</entry>
     <entry>L'<type>objet</type> est toujours plus grand</entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry>N'importe quoi</entry>
     <entry>Le <type>tableau</type> est toujours plus grand</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  <example>
   <title>Comparaison Booléen/null</title>
   <programlisting role="php">
<![CDATA[
<?php
// Booléen et null sont toujours comparés comme des booléens
var_dump(1 == TRUE);  // TRUE - identique à (bool)1 == TRUE
var_dump(0 == FALSE); // TRUE - identique à (bool)0 == FALSE
var_dump(100 < TRUE); // FALSE - identique à (bool)100 < TRUE
var_dump(-10 < FALSE);// FALSE - identique à (bool)-10 < FALSE
var_dump(min(-100, -10, NULL, 10, 100)); // NULL - (bool)NULL < (bool)-100 est identique à FALSE < TRUE
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example>
   <title>Transcription des comparaisons standards des tableaux</title>
   <programlisting role="php">
<![CDATA[
<?php
// Les tableaux sont comparés comme ceci avec les opérateurs standards de comparaison et l'opérateur combiné
function standard_array_compare($op1, $op2)
{
   if (count($op1) < count($op2)) {
      return -1; // $op1 < $op2
   } elseif (count($op1) > count($op2)) {
      return 1; // $op1 > $op2
   }
   foreach ($op1 as $key => $val) {
      if (!array_key_exists($key, $op2)) {
         return 1;
      } elseif ($val < $op2[$key]) {
         return -1;
      } elseif ($val > $op2[$key]) {
         return 1;
      }
   }
   return 0; // $op1 == $op2
}
?>
  ]]>
   </programlisting>
  </example>
 </para>

 <warning>
  <title>Comparaison de nombre à virgule flottante</title>

  <para>
   A cause de la façon dont les nombres à virgule flottante sont représentés
   en interne, vous ne devriez pas tester l'égalité entre deux nombres
   de type <type>float</type>.
  </para>

  <para>
   Voyez la documentation de <type>float</type> pour plus d'informations.
  </para>
 </warning>

 <note>
  <simpara>
   Soyer conscient que la manipulation des types n'est pas toujours évidente lors de la comparaison
   de valeurs de différents types, en particulier comparant des &integer;s à des &boolean;s ou des
   &integer;s à des &string;s. Il est par conséquent généralement recommandé d'utiliser les
   opérateurs de comparaison <literal>===</literal> et <literal>!==</literal> au lieu de
   <literal>==</literal> et <literal>!=</literal> dans la plupart des cas.
  </simpara>
 </note>

 <sect2 xml:id="language.operators.comparison.incomparable">
  <title>Valeurs incomparables</title>
  <simpara>
   Tandis que les comparaisons d'identité (<literal>===</literal> et <literal>!==</literal>)
   peuvent être appliqué à des valeurs arbitraires, les autres opérateurs de
   comparaisons devrait seulement être appliqué à des valeurs comparables.
   Le résultat de la comparaison des valeurs incomparables est indéfini,
   et ne devrait pas être utilisé.
  </simpara>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strcasecmp</function></member>
    <member><function>strcmp</function></member>
    <member><link linkend="language.operators.array">opérateur de tableaux</link></member>
    <member><link linkend="language.types">Types</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.operators.comparison.ternary">
  <title>L'opérateur ternaire</title>
  <para>
   Un autre opérateur conditionnel est l'opérateur
   ternaire ("?:").
   <example>
    <title>Affectation d'une valeur par défaut</title>
    <programlisting role="php">
<![CDATA[
<?php
// Exemple d'utilisation pour l'opérateur ternaire
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// La ligne ci-dessus est identique à la condition suivante :
if (empty($_POST['action'])) {
   $action = 'default';
} else {
   $action = $_POST['action'];
}
?>
]]>
    </programlisting>
   </example>
   L'expression <literal>(expr1) ? (expr2) : (expr3)</literal>
   est évaluée à <replaceable>expr2</replaceable> si
   <replaceable>expr1</replaceable> est évaluée à &true;, et
   <replaceable>expr3</replaceable> si
   <replaceable>expr1</replaceable> est évaluée à &false;.
  </para>
  <para>
   Il est possible d'omettre la partie centrale de l'opérateur ternaire.
   L'expression <literal>expr1 ?: expr3</literal> évalue le résultat de
   <replaceable>expr1</replaceable> si <replaceable>expr1</replaceable>
   vaut &true;, et <replaceable>expr3</replaceable> sinon.
   <replaceable>expr1</replaceable> n'est évalué qu'une seule fois dans ce cas.
  </para>
  <note>
   <simpara>
    Notez que l'opérateur ternaire est une expression, et il n'est pas
    évalué en tant que variable, mais en tant que résultat de l'expression.
    Il est important de le savoir si vous voulez retourner une variable
    par référence. L'instruction
    <literal>return $var == 42 ? $a : $b;</literal>
    dans une fonction retournée par référence ne fonctionnera donc pas et une
    alerte est émise.
   </simpara>
  </note>
  <note>
   <para>
    Il est recommandé de ne pas "empiler" les expressions ternaires.
    Le comportement de PHP lors de l'utilisation de plusieurs opérateurs
    ternaire qui ne sont pas entre parenthèse en une unique expression est
    non évident comparé à d'autres langages.
    En effet antérieur à PHP 8.0.0, l'expression ternaire était évalué
    gauche-associatif, au lieu de droite-associatif comme la plupart des
    autres langages de programmations.
    Dépendre de la gauche associativité est obsolète à partir de PHP 7.4.0.
    À partir de PHP 8.0.0, l'opérateur ternaire est non associatif.
    <example>
     <title>Comportement de PHP</title>
     <programlisting role="php">
<![CDATA[
<?php
// A première vue, ce qui suit devrait retourner 'true'
echo (true ? 'true' : false ? 't' : 'f');

// cependant, l'expression ci-dessus retournera 't' antérieur à PHP 8.0.0
// car l'expression ternaire est gauche-associatif

// l'expression suivante est une version plus évidente du même code
echo ((true ? 'true' : false) ? 't' : 'f');

// ici, on peut constater que la première expression est évaluée à 'true',
// ce qui fait qu'elle est évaluée à (bool)true, ce qui retourne la branche
// 'vraie' de la seconde expression ternaire.
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <note>
   <para>
    La combinaison de ternaire court (<literal>?:</literal>), cependant, est stable et se comporte de manière raisonnable.
    Ceci évaluera au premier argument qui évalue à une valeur non-falsy.
    À noter que des valeurs indéfinies émettront toujours un avertissement.
    <example>
     <title>Combinaison de ternaire court</title>
     <programlisting role="php">
<![CDATA[
<?php
echo 0 ?: 1 ?: 2 ?: 3, PHP_EOL; //1
echo 0 ?: 0 ?: 2 ?: 3, PHP_EOL; //2
echo 0 ?: 0 ?: 0 ?: 3, PHP_EOL; //3
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>

 <sect2 xml:id="language.operators.comparison.coalesce">
  <title>Opérateur de fusion Null</title>
  <para>
   Un autre opérateur court utile est l'opérateur "??" (ou fusion null).
   <example>
    <title>Assigner une valeur par défaut</title>
    <programlisting role="php">
<![CDATA[
<?php
// Exemple d'utilisation pour : Opérateur de fusion Null
$action = $_POST['action'] ?? 'default';

// le code ci-dessus est équivalent à cette structure if/else 
if (isset($_POST['action'])) {
    $action = $_POST['action'];
} else {
    $action = 'default';
}
?>
]]>
    </programlisting>
   </example>
   L'expression <literal>(expr1) ?? (expr2)</literal> retourne
   <replaceable>expr2</replaceable> si <replaceable>expr1</replaceable> est
   &null;, et <replaceable>expr1</replaceable> dans les autres cas.
  </para>
  <para>
   En particulier, cet opérateur n'émet pas de notice ou avertissement si
   la partie gauche n'existe pas, exactement comme <function>isset</function>.
   Ceci est particulièrement utile pour les clés des tableaux.
  </para>
  <note>
   <simpara>
    Veuillez noter que l'opérateur null de fusion est une expression, et qu'il
    ne s'évalue pas comme une variable, mais comme le résultat d'une expression.
    Il est important de le savoir si vous souhaitez renvoyer une variable
    par référence.
    L'expression <literal>return $foo ?? $bar;</literal> est un retour par
    référence qui ne fonctionne donc pas et émet un avertissement.
   </simpara>
  </note>
  <note>
   <para>
    L'opérateur de fusion null à une précédence faible. Ceci signifie que le mélanger
    avec d'autres opérateurs (tel que la concaténation de chaînes ou les opérateurs
    arithmétiques) des parenthèses seront requis.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Émet un avertissement que $name est indéfinie.
print 'Mr. ' . $name ?? 'Anonymous';

// Prints "Mr. Anonymous"
print 'Mr. ' . ($name ?? 'Anonymous');
?>
]]>
   </programlisting>
  </note>
  <note>
   <para>
    Veuillez noter que l'opérateur de fusion null permet une imbrication simple:
    <example>
     <title>Imbrication de l'opération de fusion null</title>
     <programlisting role="php">
<![CDATA[
<?php

$foo = null;
$bar = null;
$baz = 1;
$qux = 2;

echo $foo ?? $bar ?? $baz ?? $qux; // sortie 1

?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>

</sect1>
