<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.type">
 <title>Opérateurs de types</title>
 <para>
  <literal>instanceof</literal> est utilisé pour déterminer si une variable PHP
  est un objet instancié d'une certaine
  <link linkend="language.oop5.basic.class">classe</link> :
  <example>
   <title>Utilisation de <literal>instanceof</literal> avec des classes</title>
   <programlisting role="php">
<![CDATA[
<?php
class MaClasse
{
}
class PasMaClasse
{
}
$a = new MaClasse;

var_dump($a instanceof MaClasse);
var_dump($a instanceof PasMaClasse);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> peut également être utilisé pour déterminer
  si une variable est un objet instancié d'une classe qui hérite d'une classe parente :
  <example>
   <title>Utilisation de <literal>instanceof</literal> avec des classes héritées</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}
class MyClass extends ParentClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
     ]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Pour vérifier si un objet <emphasis>n'est pas</emphasis> une instance d'une classe,
  l'<link linkend="language.operators.logical">opérateur logique <literal>not</literal></link>
  peut être utilisé.
  <example>
   <title>Utilisation de <literal>instanceof</literal> pour vérifier que l'objet
    <emphasis>n'est pas</emphasis> une instance de la classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}
$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Et finalement, <literal>instanceof</literal> peut être utilisé pour déterminer
  si une variable est un objet instancié d'une classe qui implémente une
  <link linkend="language.oop5.interfaces">interface</link> :
  <example>
   <title>Utilisation de <literal>instanceof</literal> pour une interface</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}
class MyClass implements MyInterface
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Bien que <literal>instanceof</literal> soit habituellement utilisé avec un nom
  de classe littéral, il peut également être utilisé avec un autre objet ou une chaîne
  représentant une variable :
  <example>
   <title>Utilisation de <literal>instanceof</literal> avec d'autres variables</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}
class MyClass implements MyInterface
{
}
$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';
var_dump($a instanceof $b); // $b est un objet de la classe MyClass
var_dump($a instanceof $c); // $c est une chaîne 'MyClass'
var_dump($a instanceof $d); // $d est une chaîne 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof ne lance aucune erreur si la variable testée n'est pas
  un objet, il retournera simplement &false;. Cependant, les constantes
  ne sont pas autorisées.
  <example>
   <title>Utilisation de <literal>instanceof</literal> pour tester d'autres variables</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = imagecreate(5, 5);
var_dump($a instanceof stdClass); // $a est un entier
var_dump($b instanceof stdClass); // $b vaut NULL
var_dump($c instanceof stdClass); // $c est une ressource
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  À partir de PHP 7.3.0, les constantes sont autorisées sur le côté gauche
  de l'opérateur <literal>instanceof</literal>.
  <example>
   <title>Utilisation de <literal>instanceof</literal> pour tester des constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  À partir de PHP 8.0.0, <literal>instanceof</literal> peut désormais être
  utilisé avec des expressions arbitraires.
  L'expression doit être entre parenthèses et produire une <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Utilisation de <literal>instanceof</literal> avec une expression arbitraire</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  L'opérateur <literal>instanceof</literal> a une variante fonctionnelle
  avec la fonction <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
