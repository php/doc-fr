<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: jbnahan Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->
<sect1 xml:id="language.types.iterable">
 <title>Itérables</title>

 <para>
  Un <type>Iterable</type> est un alias de type intégré au moment de la compilation pour
  <!-- Besoin d'améliorer le rendu des éléments de type autonomes dans PhD <type class="union"><type>array</type><type>Traversable</type></type>. -->
  <literal>array|Traversable</literal>.
  Depuis son introduction dans PHP 7.1.0 et avant PHP 8.2.0,
  <type>iterable</type> était un pseudo-type intégré qui agissait comme
  l'alias de type susmentionné et peut être utilisé comme une déclaration de type.
  <type>iterable</type> peut être utilisé dans une boucle &foreach; et avec
  <command>yield from</command> dans un <link linkend="language.generators">générateur</link>.
 </para>

 <note>
  <para>
   Les fonctions déclarant un type de retour itérable peuvent aussi être
   des <link linkend="language.generators">générateurs</link>.

   <example>
    <title>
     Exemple de type de retour itérable d'un générateur
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

foreach(gen() as $value) {
    echo $value, "\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
