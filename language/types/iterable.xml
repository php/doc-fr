<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: jbnahan Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect1 xml:id="language.types.iterable">
 <title>Itérables</title>

  <para>
   Un <type>Iterable</type> est un alias de type intégré au moment de la compilation pour

   <!-- Besoin d'améliorer le rendu des éléments de type autonomes dans PhD <type class="union"><type>array</type><type>Traversable</type></type>. -->
   <literal>array|Traversable</literal>.
   Depuis son introduction dans PHP 7.1.0 et avant PHP 8.2.0,
   un <type>iterable</type> était un pseudo-type intégré qui agissait comme
   l'alias de type susmentionné et peut être utilisé comme une déclaration de type.
   <type>iterable</type> peut être utilisé dans une boucle &foreach; et avec
   <command>yield from</command> dans un <link linkend="language.generators">générateur</link>.
  </para>
  <para>
   Les paramètres déclarés comme itérables peuvent utiliser &null; ou un tableau 
   comme valeur par défaut.
  </para>

 <note>
  <para>
   <example>
    <title>
     Exemple de valeur par défaut d'un argument itérable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(iterable $iterable = []) {
    // ...
}

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Les itérables peuvent aussi être utilisés comme déclaration du type de retour 
   pour indiquer qu'une fonction renverra une valeur itérable.
   Si la valeur renvoyée n'est pas un tableau ou une instance de 
   <classname>Traversable</classname>, une exception 
   <classname>TypeError</classname> sera lancée.
  </para>

  <para>
   <example>
    <title>
     Exemple de type de retour itérable.
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function bar(): iterable {
    return [1, 2, 3];
}

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Les fonctions déclarant un type de retour itérable peuvent aussi être 
   des <link linkend="language.generators">générateurs</link>.
  </para>

  <para>
   <example>
    <title>
     Exemple de type de retour itérable d'un générateur
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

?>
]]>
    </programlisting>
   </example>
  </para>
</note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
