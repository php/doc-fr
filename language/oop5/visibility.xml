<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7d7b378abd302430b8ce7cedb4b78c7033f5e88c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Visibilité</title>
  <para>
    La visibilité d'une propriété, d'une méthode ou (à partir de PHP 7.1.0) une constante peut
   être définie en préfixant sa déclaration avec un mot-clé : <literal>public</literal>,
   <literal>protected</literal>, ou
   <literal>private</literal>.
   Les éléments déclarés comme publics sont accessibles partout.
   L'accès aux éléments protégés est limité à la classe elle-même, ainsi
   qu'aux classes qui en héritent et parente.
   L'accès aux éléments privés est uniquement réservé à la classe qui les a définis.
  </para>
  
  <sect2 xml:id="language.oop5.visibility-members">
   <title>Visibilité des propriétés</title>
   <para>
    Les propriétés des classes peuvent être définies comme publiques, privées
    ou protégées. Les propriétés déclarées sans explicitement utiliser un
    mot-clef de visibilité seront automatiquement définies comme publiques.
   </para>
    <example>
     <title>Déclaration de propriétés</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Fonctionne
echo $obj->protected; // Erreur fatale
echo $obj->private; // Erreur fatale
$obj->printHello(); // Affiche Public, Protected et Private


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass
{
    // On peut redéclarer les propriétés publics ou protégés, mais pas ceux privés
    public $public = 'Public2';
    protected $protected = 'Protected2';

    function printHello()
    {
      echo $this->public;
      echo $this->protected;
      echo $this->private;
   }
}

$obj2 = new MyClass2();
echo $obj2->public; // Fonctionne
echo $obj2->protected; // Erreur fatale
echo $obj2->private; // Indéfini
$obj2->printHello(); // Affiche Public2, Protected2 et Undefined (Indéfini)

?>
]]>
      </programlisting>
   </example>
   <sect3 xml:id="language.oop5.visibility-members-aviz">
    <title>Visibilité Asymétrique des Propriétés</title>
    <simpara>
     À partir de PHP 8.4, les propriétés peuvent également avoir leur
     visibilité définie de manière asymétrique, avec un champ différent pour
     la lecture (<literal>get</literal>) et l'écriture (<literal>set</literal>).
     Plus précisément, la visibilité <literal>set</literal> peut être
     spécifiée séparément, à condition qu'elle ne soit pas plus permissive que la
     visibilité par défaut.
    </simpara>
    <example>
     <title>Visibilité Asymétrique des Propriétés</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // OK
        $this->pubYear = $year; // Erreur Fatale
    }
}

$b = new Book('Comment utiliser PHP', 'Peter H. Peterson', 2024);

echo $b->title; // Fonctionne
echo $b->author; // Fonctionne
echo $b->pubYear; // Erreur Fatale

$b->title = 'Comment ne pas utiliser PHP'; // Erreur Fatale
$b->author = 'Pedro H. Peterson'; // Erreur Fatale
$b->pubYear = 2023; // Erreur Fatale
?>
]]>
     </programlisting>
    </example>
    <para>Il y a quelques réserves concernant la visibilité asymétrique :</para>
    <itemizedlist>
     <listitem>
      <simpara>
       Seules les propriétés typées peuvent avoir une visibilité <literal>set</literal> séparée.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       La visibilité <literal>set</literal> doit être la même
       que <literal>get</literal> ou plus restrictive. C'est-à-dire,
       <code>public protected(set)</code> et <code>protected protected(set)</code>
       sont autorisés, mais <code>protected public(set)</code> provoquera une erreur de syntaxe.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Si une propriété est <literal>public</literal>, alors la visibilité principale peut être
       omise. C'est-à-dire que <code>public private(set)</code> et <code>private(set)</code>
       auront le même résultat.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Une propriété avec une visibilité <literal>private(set)</literal>
       est automatiquement <literal>final</literal>, et ne peut pas être redéfinie dans une classe enfant.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Obtenir une référence à une propriété suit la visibilité <literal>set</literal>, pas <literal>get</literal>.
       Cela est dû au fait qu'une référence peut être utilisée pour modifier la valeur de la propriété.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       De même, essayer d'écrire dans une propriété de tableau implique à la fois une opération <literal>get</literal> et
       une opération <literal>set</literal> en interne, et suivra donc la visibilité <literal>set</literal>,
       car c'est toujours la plus restrictive.
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     Lorsqu'une classe étend une autre, la classe enfant peut redéfinir
     toute propriété qui n'est pas <literal>final</literal>. En le faisant,
     elle peut élargir soit la visibilité principale, soit la visibilité <literal>set</literal>,
     à condition que la nouvelle visibilité soit la même ou plus large
     que celle de la classe parente. Cependant, soyez conscient que si une propriété <literal>private</literal>
     est remplacée, cela ne change pas réellement la propriété de la classe parente,
     mais crée une nouvelle propriété avec un nom interne différent.
    </simpara>
    <example>
     <title>Héritage des Propriétés Asymétriques</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) $title; // OK, car la lecture est plus large et l'écriture est la même.
    public string $author; // OK, car la lecture est la même et l'écriture est plus large.
    public protected(set) int $pubYear; // Erreur Fatale. Les propriétés private(set) sont finales.
}
?>
]]>
     </programlisting>
    </example>
   </sect3>
  </sect2>
  
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Visibilité des méthodes</title>
   <para>
    Les méthodes des classes peuvent être définies comme publiques, privées
    ou protégées. Les méthodes déclarées sans explicitement utiliser un
    mot-clef de visibilité seront automatiquement définies comme publiques.
   </para>
   <para>
    <example>
     <title>Déclaration de méthodes</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass
{
    // Déclare un constructeur public
    public function __construct() { }

    // Déclare une méthode publique
    public function MyPublic() { }

    // Déclare une méthode protégée
    protected function MyProtected() { }

    // Déclare une méthode privée
    private function MyPrivate() { }

    // Celle-ci sera publique
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Fonctionne
$myclass->MyProtected(); // Erreur fatale
$myclass->MyPrivate(); // Erreur fatale
$myclass->Foo(); // Public, Protected et Private fonctionnent


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass
{
    // Celle-ci sera publique
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Erreur fatale
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Fonctionne
$myclass2->Foo2(); // Public et Protected fonctionnent, non Private

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Constant Visibility</title>
   <para>
    À partir de PHP 7.1.0, les constantes de classes peuvent être définies
    comme public, privée ou protégée. Les constantes déclarées sans mot clé
    de visibilité explicite sont définies en tant que public.
   </para>
   <example>
    <title>Déclaration de constantes à partir de PHP 7.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Déclarons MyClass
 */
class MyClass
{
    // Déclarons une constante public
    public const MY_PUBLIC = 'public';

    // Déclarons une constante protégée
    protected const MY_PROTECTED = 'protected';

    // Déclarons une constante privée
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Fonctionne
MyClass::MY_PROTECTED; // Erreur fatale
MyClass::MY_PRIVATE; // Erreur fatale
$myclass->foo(); // Public, Protégée et Privée fonctionne


/**
 * Define MyClass2
 */
class MyClass2 extends MyClass
{
    // This is public
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Erreur fatale
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Fonctionne
$myclass2->foo2(); // Public et Protégée fonctionne, mais pas Privée
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Visibilité depuis d'autres objets</title>
   <para>
    Les objets de mêmes types ont accès aux membres privés et protégés les uns des autres,
    même s'ils ne sont pas la même instance. Ceci est dû au fait que
    les détails spécifiques de l'implémentation sont déjà connus en interne
    par ces objets.
   </para>
   <example>
    <title>Accès aux membres privés d'un objet du même type</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Accès à la méthode privée.';
    }

    public function baz(Test $other)
    {
        // Nous pouvons modifier la propriété privée :
        $other->foo = 'Bonjour';
        var_dump($other->foo);

        // Nous pouvons également appeler la méthode privée :
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(7) "Bonjour"
Accès à la méthode privée.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
