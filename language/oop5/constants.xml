<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Constantes de classe</title>
 <para>
  Il est possible de définir des <link linkend="language.constants">constantes</link>
  par classes qui restent identiques et non modifiables.
  La visibilité par défaut des constantes de classe est <literal>public</literal>.
 </para>
 <note>
  <para>
   Les constantes de classes peuvent être redéfinies par une classe enfant.
  </para>
 </note>
 <para>
  Il est aussi possible pour les interfaces d'avoir des <literal>constantes</literal>.
  Voir la <link linkend="language.oop5.interfaces">documentation des interfaces</link>
  pour des exemples.
 </para>
 <para>
  Il est possible de référencer la classe en utilisant une variable.
  La valeur de la variable ne peut pas être un mot-clé (e.g. <literal>self</literal>,
  <literal>parent</literal> et <literal>static</literal>).
 </para>
 <para>
  Notez que les constantes de classe sont allouées une fois par classe, et non 
  pour chaque instance de classe.
 </para>

 <example>
  <title>Définition et utilisation d'une constante de classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
  const CONSTANT = 'valeur constante';

  function showConstant() {
    echo  self::CONSTANT . "\n";
  }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n";

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
  </programlisting>
 </example>
 <para>
  La constante spéciale <constant>::class</constant> permet
  une résolution de nom de classe pleinement qualifié au moment de la compilation,
  cela est utile pour les classes dans un espace de nom :
 </para>
 <example>
  <title>Exemple d'utilisation de ::class</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example> 

 <example>
  <title>Exemple d'expressions pour une constante de classe</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'The value of THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>
 
 <example>
  <title>Modificateur de visibilité des constantes de classe, à partir de PHP 7.1</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
  &example.outputs.71;
  <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
  </screen>
  <note>
   <para>
    À partir de PHP 7.1.0, les modificateurs de visibilité sont autorisés
    sur les constantes de classe.
   </para>
  </note>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
