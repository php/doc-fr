<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e3d36be7d64f1fd47612a91297c7f6d75e4e50c7 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>L'opérateur de résolution de portée (::)</title>
 
 <para>
  L'opérateur de résolution de portée (aussi appelé Paamayim Nekudotayim) ou,
  en termes plus simples, le symbole &quot;double deux-points&quot; (::),
  fournit un moyen d'accéder aux membres
  une <link linkend="language.oop5.constants">constante</link>,
  une propriété <link linkend="language.oop5.static">statique</link>,
  ou une méthode <link linkend="language.oop5.static">statique</link>
  d'une classe ou de l'une de ses classes parentes.
  De plus, les propriétés ou méthodes statiques peuvent être surchargées via
  la <link linkend="language.oop5.late-static-bindings">liaison statique tardive</link>.

 </para>
 
 <para>
  Lorsque vous référencez ces éléments en dehors de la définition de la
  classe, utilisez le nom de la classe.
 </para>
 
 <para>
  Il est possible de référencer une classe en utilisant
  une variable. La valeur de la variable ne peut être un mot-clé (e.g. <literal>self</literal>,
  <literal>parent</literal> et <literal>static</literal>).
 </para>
 
 <para>
  Paamayim Nekudotayim pourrait au premier abord sembler être un choix étrange
  pour nommer un double deux-points.
  Cependant, au moment de l'écriture du <literal>Zend Engine 0.5</literal>
  (qui faisait fonctionner PHP 3), c'est le nom qui a été choisi par l'équipe Zend.
  En fait, cela signifie un double deux-points... en hébreu !
 </para>
 
 <example>
  <title>:: en dehors de la définition de la classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Une valeur constante';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE;

echo MyClass::CONST_VALUE;
?>
]]>
  </programlisting>
 </example>
 
 <para>
  Trois mots-clé spéciaux, <varname>self</varname>, <varname>parent</varname>,
  et <varname>static</varname> sont utilisés pour accéder aux propriétés ou aux
  méthodes depuis la définition de la classe.
 </para>
 
 <example>
  <title>:: depuis la définition de la classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'variable statique';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon();

OtherClass::doubleColon();
?>
]]>
  </programlisting>
 </example>
 
 <para>
  Lorsqu'une classe héritant d'une autre redéfinit une méthode de sa classe parente,
  PHP n'appellera pas la méthode de la classe parente. Il appartient à la méthode dérivée
  d'appeler la méthode d'origine en cas de besoin. Cela est également valable
  pour les définitions des <link
  linkend="language.oop5.decon">constructeurs et destructeurs</link>,
  la <link linkend="language.oop5.overloading">surcharge</link>, et les
  définitions de <link linkend="language.oop5.magic">méthodes magiques</link>.
 </para>
 
 <example>
  <title>Appel d'une méthode parente</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
  }
}

class OtherClass extends MyClass
{
    // Surcharge de la définition parente
    public function myFunc() {

      // Mais appel de la méthode parente
      parent::myFunc();
      echo "OtherClass::myFunc()\n";
  }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
  </programlisting>
 </example>
  <para>
   Voir aussi <link linkend="language.oop5.basic.class.this">quelques
   exemples d'appels statiques</link>.
  </para>
 
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
