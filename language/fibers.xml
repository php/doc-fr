<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4985eb0aa7bb240fa3bf7c17f76e1609faef327e Maintainer: pierrick Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.fibers" xmlns="http://docbook.org/ns/docbook">
 <title>Fibres</title>

 <simplesect xml:id="language.fibers.overview">
  <title>Aperçu des fibres</title>
  <?phpdoc print-version-for="fiber"?>
  <para>
   Les fibres représentent des fonctions interruptibles sur toute la pile. Les fibres peuvent être suspendues à n'importe quel endroit de la pile d'appels,
   en interrompant l'exécution à l'intérieur de la fibre jusqu'à ce que la fibre soit reprise ultérieurement.
  </para>
  <para>
   Les fibres mettent en pause l'ensemble de la pile d'exécution, de sorte que l'appelant direct de la fonction n'a pas besoin de modifier la façon dont il
   invoque la fonction.
  </para>
  <para>
   L'exécution peut être interrompue n'importe où dans la pile d'appels en utilisant <methodname>Fiber::suspend</methodname>
   (c'est-à-dire que l'appel à <methodname>Fiber::suspend</methodname> peut se trouver dans une fonction profondément imbriquée
   ou ne pas exister du tout).
  </para>
  <para>
   Contrairement aux <classname>Generator</classname> n'ayant pas de pile, chaque <classname>Fiber</classname> possède sa propre pile d'appels,
   ce qui leur permet d'être mises en pause dans des appels de fonctions profondément imbriquées. Une fonction déclarant un point d'interruption
   (c'est-à-dire appelant <methodname>Fiber::suspend</methodname>) n'a pas besoin de changer son type de retour, contrairement à une fonction utilisant
   &yield; qui doit retourner une instance de <classname>Generator</classname>.
  </para>
  <para>
   Les fibres peuvent être suspendues dans n'importe quel appel de fonction, y compris celles appelées à l'intérieur de la VM PHP, comme les fonctions
   fournies à <function>array_map</function> ou les méthodes appelées par &foreach; sur un objet
   <classname>Iterator</classname>.
  </para>
  <para>
   Une fois suspendue, l'exécution de la fibre peut être reprise avec n'importe quelle valeur en utilisant <methodname>Fiber::resume</methodname>
   ou en lançant une exception dans la fibre à l'aide de <methodname>Fiber::throw</methodname>. La valeur est renvoyée
   (ou l'exception lancée) par <methodname>Fiber::suspend</methodname>.
  </para>
  <note>
   <simpara>
    En raison des limitations actuelles, il n'est pas possible de changer de fibre dans le destructeur d'un objet.
   </simpara>
  </note>

  <example xml:id="language.fiber.example.basic"><!-- {{{ -->
  <title>Utilisation de base</title>
   <programlisting role="php">
    <![CDATA[
<?php
$fiber = new Fiber(function (): void {
   $value = Fiber::suspend('fiber');
   echo "Valeur utilisée pour reprendre la fibre: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Valeur de la suspension de la fibre: ", $value, PHP_EOL;

$fiber->resume('test');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Valeur utilisée pour reprendre la fibre: fiber
Valeur de la suspension de la fibre: test
]]>
   </screen>
  </example><!-- }}} -->

 </simplesect>

</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
