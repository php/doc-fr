<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles fonctionnalités</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>Les arguments nommés</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
    Le support des <link linkend="functions.named-arguments">arguments nommés</link> a été ajouté.
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>Attributs</title>

   <para>
    Le support des <link linkend="language.attributes">Attributs</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>Promotion du Constructeur</title>

   <para>
    Le support pour la <link linkend="language.oop5.decon.constructor.promotion">promotion de propriété de constructeur</link> (déclarer les propriété dans la signature du constructeur)
    a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>Type d'unions</title>

   <para>
    Le support pour les <link linkend="language.types.declarations.composite.union">types d'unions</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para> 
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>L'expression match</title>

   <para>
    Le support pour l'expression <link linkend="control-structures.match"><literal>match</literal></link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>L'opérateur nullsafe</title>

   <para>
    Le support pour <link linkend="language.oop5.basic.nullsafe">l'opérateur nullsafe</link> (<literal>?-></literal>) a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>Autre nouvelles fonctionnalités</title>

   <itemizedlist>
    <listitem>
     <para>
      La classe <link linkend="class.weakmap">WeakMap</link> a été ajoutée.
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      La classe <classname>ValueError</classname> a été ajoutée.
     </para>
    </listitem>
    <listitem>
     <para>
      N'importe quel nombre de paramètres de fonction peut maintenant être remplacé par un argument variadique, tant que les
      types sont compatibles. Par exemple, le code suivant est maintenant autorisé :
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>static</type> (comme dans la "résolution statique à la volée") peut maintenant être utilisé comme type de retour :
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il est maintenant possible de récupérer le nom de la classe d'un objet en utilisant
      <code>$object::class</code>. Le résultat est le même que <code>get_class($object)</code>.
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new; et &instanceof; peuvent maintenant être utilisés avec des expressions arbitraires,
      par exemple <code>new (expression)(...$args)</code> et <code>$obj instanceof (expression)</code>.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Quelques corrections de syntaxe de variables ont été appliquées, par exemple écrire
      <code>Foo::BAR::$baz</code> est maintenant autorisé.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Ajout de l'interface <interfacename>Stringable</interfacename>, qui est automatiquement implémentée si
      une classe définie une méthode <link linkend="object.tostring">__toString()</link>.
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les traits peuvent maintenant définir des méthodes privées abstraites.
      Ces méthodes doivent être implémentées par la classe utilisant le trait.
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>throw</literal> peut maintenant être utilisé comme expression.
      Cela permet des usages comme :
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception dans une fonction fléchée');
$user = $session->user ?? throw new Exception('Un utilisateur est requis');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      Une virguile finale optionnelle est maintenant autorisée dans les listes de paramètres.
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- This comma is now allowed.
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il est maintenant possible d'écrire <code>catch (Exception)</code> pour attraper une exception sans la stocker
      dans une variable.
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      Le support pour le type <type>mixed</type> a été ajouté.
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les méthodes privées déclarées dans une classe parente n'imposent plus de règles d'héritage sur les méthodes
      de la classe enfante (à l'exception des constructeurs privés finaux).
      L'exemple suivant illustre les restrictions qui ont été supprimées :
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // Lance un avertissement, car "final" n'a plus d'effet :
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // Tous les exemples suivants sont maintenant autorisés, même si les modificateurs ne sont pas
    // les même que pour les méthods privés dans la classe parente.
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>get_resource_id</function> a été ajouté, qui retourne la même valeur que
      <code>(int) $resource</code>. Il fournit la même fonctionnalité sous une API plus claire.
     </para>
    </listitem>
    <listitem>
     <para>
      <classname>InternalIterator</classname> a été ajouté.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>Date et heure</title>
  
  <itemizedlist>
   <listitem>
    <para>
     <methodname>DateTime::createFromInterface</methodname> et
     <methodname>DateTimeImmutable::createFromInterface</methodname> ont été ajoutés.
    </para>
   </listitem>
   <listitem>
    <para>
     Le formatteur de date et heure <literal>p</literal> a été ajouté, qui est le même que
     <literal>P</literal> mais retourne <literal>Z</literal> plutôt que <literal>+00:00</literal>
     pour UTC.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   <interfacename>DOMParentNode</interfacename> et <interfacename>DOMChildNode</interfacename> avec
   de nouvelles API de traversée et de manipulation ont été ajoutées.
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>Filtre</title>

  <para>
   <constant>FILTER_VALIDATE_BOOL</constant> a été ajouté en tant qu'alias de
   <constant>FILTER_VALIDATE_BOOLEAN</constant>. Le nouveau nom est préféré, car il se base sur le
    nom du type.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   <function>enchant_dict_add</function>, <function>enchant_dict_is_added</function>, et
   <constant>LIBENCHANT_VERSION</constant> ont été ajoutés.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   Ajout d'une nouvelle option <literal>pm.status_listen</literal> qui permet d'obtenir le statut
   depuis un point final différent (par exemple, un port ou un fichier UDS) ce qui est utile pour obtenir le statut lorsque
   tous les enfants sont occupés à servir des requêtes longues.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hachage</title>

  <para>
   Les objets <classname>HashContext</classname> peuvent maintenant être sérialisés.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>Fonctions d'internationalisation</title>

  <para>
   Les constantes <constant>IntlDateFormatter::RELATIVE_FULL</constant>,
   <constant>IntlDateFormatter::RELATIVE_LONG</constant>,
   <constant>IntlDateFormatter::RELATIVE_MEDIUM</constant>, et
   <constant>IntlDateFormatter::RELATIVE_SHORT</constant>
   ont été ajoutées.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   <function>ldap_count_references</function> a été ajouté, qui retourne le nombre  
   de messages de référence dans un résultat de recherche.
  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   Si le paramètre de configuration <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>--> est
   activé, OPcache enregistrera les avertissements de compilation et les rejouera lors de la prochaine inclusion, même si
   elle est servie depuis le cache.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Ajout du support de la Syntaxe de Message Cryptographique (Cryptographic Message Syntax ou CMS) (<link xlink:href="&url.rfc;5652">RFC 5652</link>)
   composé de fonctions pour le chiffrement, le déchiffrement, la signature, la vérification et la lecture. L'API
   est similaire à l'API des fonctions <acronym>PKCS</acronym> #7 avec l'ajout de nouvelles constantes d'encodage :
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   et <constant>OPENSSL_ENCODING_PEM</constant>:
   <simplelist>
    <member>
     <function>openssl_cms_encrypt</function> chiffre le message dans le fichier avec les certificats
     et écrit le résultat dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_decrypt</function> qui déchiffre les messages S/MIME dans le fichier et écrit
     les résultats dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_read</function> qui exporte le fichier CMS dans un tableau
     de certificats <acronym>PEM</acronym>.
    </member>
    <member>
     <function>openssl_cms_sign</function> qui signe le message MIME dans le fichier avec un certificat et une clé
     et écrit le résultat dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_verify</function> qui vérifie que le bloc de données est intact, que le signataire
     est bien celui qu'il prétend être, et retourne les certificats des signataires.
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>Expressions Régulières (Perl-Compatible)</title>

  <para>
   <function>preg_last_error_msg</function> a été ajouté, qui retourne un message lisible par l'homme pour la dernière
   erreur PCRE. Il complète <function>preg_last_error</function>, qui retourne une valeur d'énumération entière
   à la place.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>Réflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Les méthodes suivantes peuvent maintenant retourner des informations sur les valeurs par défaut des
     paramètres des fonctions internes :
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   <methodname>SQLite3::setAuthorizer</methodname> et les constantes de classe respectives ont été ajoutées
   pour définir un rappel utilisateur qui sera utilisé pour autoriser ou non une action sur la base de données.
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>str_contains</function>, <function>str_starts_with</function> et
     <function>str_ends_with</function> ont été ajoutés, elles vérifient si <parameter>haystack</parameter> contient,
     commence par ou fini par <parameter>needle</parameter>, respectivement.
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>fdiv</function> a été ajouté, qui éffectue une division en virgule flottante sous les sémantiques IEEE 754.
     La division par zéro est considérée comme bien définie et retournera l'une des valeurs <literal>Inf</literal>,
     <literal>-Inf</literal> ou <literal>NaN</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>get_debug_type</function> a été ajouté, qui retourne un type utile pour les messages d'erreur. Contrairement à
     <function>gettype</function>, il utilise des noms de type canoniques, retourne les noms de classe pour les objets, et
     indique le type de ressource pour les ressources.
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> et ses amis supportent maintenant les spécificateurs de format <literal>%h</literal> et
     <literal>%H</literal>. Ils sont les mêmes que <literal>%g</literal> et
     <literal>%G</literal>, mais utilisent toujours <literal>"."</literal> comme séparateur décimal, plutôt
     que de le déterminer via la locale <constant>LC_NUMERIC</constant>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> et ses amis supportent maintenant l'utilisation de <literal>"*"</literal> comme largeur ou
     précision, auquel cas la largeur/précision est passée comme argument à printf. Cela permet également
     d'utiliser une précision <literal>-1</literal> avec <literal>%g</literal>, <literal>%G</literal>,
     <literal>%h</literal> et <literal>%H</literal>. Par exemple, le code suivant peut être utilisé pour
     reproduire le formatage par défaut des nombres à virgule flottante de PHP :
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> support maintent les descripteurs de pseudo-terminal (PTY). Le code suivant
     attache <literal>stdin</literal>, <literal>stdout</literal> et <literal>stderr</literal> au
     même PTY:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> supportent maintenant les descripteurs de paire de socket. Le code suivant attache
     distinct socket paire to <literal>stdin</literal>, <literal>stdout</literal> and
     <literal>stderr</literal> :
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Contrairement aux pipes, les sockets ne souffrent pas de problèmes de blocage d'E/S sur Windows. Cependant, tous les
     programmes peuvent ne pas fonctionner correctement avec les sockets stdio.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions de tri sont maintenant stables, ce qui signifie que les éléments comparés égaux conserveront leur
     ordre d'origine.
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function>, <function>array_intersect</function> et leurs variations peuvent maintenant être
     utilisées avec un seul tableau comme argument. Cela signifie que des utilisations comme les suivantes sont maintenant
     possibles :
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// OK même si $excludes est vide:
array_diff($array, ...$excludes);
// OK même si $arrays contient un seul tableau:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Le paramètre <parameter>drapeau</parameter> de <function>ob_implicit_flush</function> a été modifié
     pour accepter un <type>bool</type> plutôt qu'un <type>int</type>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Tokenizer</title>

  <para>
   <classname>PhpToken</classname> ajoute une interface basée sur les objets au tokenizer. Il fournit une
   repésentation plus uniforme et ergonomique, tout en étant plus efficace en mémoire et plus rapide.
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     L'extension Zip a été mis à jour en version 1.19.1.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveaux <methodname>ZipArchive::setMtimeName</methodname> et
     <methodname>ZipArchive::setMtimeIndex</methodname> pour changer le temps de modification d'une entrée.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveau <methodname>ZipArchive::registerProgressCallback</methodname> pour fournir des mises à jour pendant la fermeture de l'archive.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveau <methodname>ZipArchive::registerCancelCallback</methodname> pour autoriser l'annulation pendant la fermeture
     de l'archive.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveau <methodname>ZipArchive::replaceFile</methodname> pour remplacer une entrée courante.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveau <methodname>ZipArchive::isCompressionMethodSupported</methodname> pour vérifier les fonctionnalités de compression 
     optionnelles.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouveau <methodname>ZipArchive::isEncryptionMethodSupported</methodname> pour vérifier les fonctionnalités de chiffrement
     optionnelles.
    </para>
   </listitem>
   <listitem>
    <para>
     La propriété <varname>ZipArchive::lastId</varname> pour avoir la valuer de l'index de la 
     dernière entrée ajoutée a été ajoutée.
    </para>
   </listitem>
   <listitem>
    <para>
     Les erreurs peuvent maintenant être vérifiées après la fermeture d'une archive en utilisant les propriétés
     <varname>ZipArchive::status</varname> et
     <varname>ZipArchive::statusSys</varname>, ou la méthode
     <methodname>ZipArchive::getStatusString</methodname>.
    </para>
   </listitem>
   <listitem>
    <para>
     L'option <literal>'remove_path'</literal> de <methodname>ZipArchive::addGlob</methodname> et
     <methodname>ZipArchive::addPattern</methodname> est maintenant traitée comme un préfixe de chaîne arbitraire (pour
     la cohérence avec l'option <literal>'add_path'</literal>), alors qu'auparavant elle était traitée comme un
     nom de répertoire.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctionnalités de compression / chiffrement sont maintenant listées dans phpinfo.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
