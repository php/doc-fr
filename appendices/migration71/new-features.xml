<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 459c0e1de40c71062731abb431ec1c9f74b2aaf2 Maintainer: girgias Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles fonctionnalités</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Type nullable</title>

  <para>
   La déclaration des types de paramètre et de valeur de retour peuvent désormais
   être marqués en tant que nullable en préfixant le nom du type avec un point d'interrogation.
   Ceci signifie que le type spécifié aussi bien que &null; peuvent être passés comme argument,
   ou retournés en tant que valeur, respectivement.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturn(): ?string
{
    return 'elePHPant';
}

var_dump(testReturn());

function testReturn(): ?string
{
    return null;
}

var_dump(testReturn());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "elePHPant"
NULL
string(10) "elePHPant"
NULL
Uncaught Error: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Fonctions Void</title>

  <para>
   Le type de retour <type>void</type> à été introduit. Fonction déclaré avec void
   en tant que leur type de retour doivent soit ommettre la déclaration de retour
   entièrement, ou utiliser une déclaration de retour vide.
   &null; n'est pas un type de retour valide pour une fonction void.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Essayer d'utiliser la valeur de retour d'une fonction void évalue simplement
   à &null;, sans avertissement émit. La raison pour ceci est qu'un avertissement
   impliquerait l'usage de fonction générique d'ordre supérieur.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Déconstruction symétrique de tableau</title>

  <para>
   L'abréviation de la syntaxe array <literal>[]</literal> peut désormais
   être utilisée pour déconstruire des &array;x pour des affectations
   (y compris au sein de <literal>foreach</literal>), à la place de la
   syntaxe existante <function>list</function>, qui est toujours supporté.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list() style
list($id1, $name1) = $data[0];

// [] style
[$id1, $name1] = $data[0];

// list() style
foreach ($data as list($id, $name)) {
    // logic here with $id and $name
}

// [] style
foreach ($data as [$id, $name]) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Visbilité des constantes de classes</title>

  <para>
   Le support pour spécifier la visbilité des constantes de classes a été ajouté.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>Le pseudo-type <type>iterable</type></title>

  <para>
   Un nouveau pseudo-type (similaire à <type>callable</type>) appellé
   <type>iterable</type> a été introduit. Il peut être utilisé aves les
   paramètres et retour typés, où il accepte soit des &array; soit des
   objets qui implémentent l'interface <classname>Traversable</classname>.
   En ce qui concerne le sous-typage, les types de paramètres des classes
   enfant peuvent élargir une déclaration d'un parent de <type>array</type>
   ou <classname>Traversable</classname> en <type>iterable</type>.
   Avec les types de retour, les classes enfant peuvent restreindre le type de
   retour <type>iterable</type> du parent en <type>array</type> ou
   un objet qui implémente <classname>Traversable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Gestion du catch de plusieurs exceptions</title>

  <para>
   Plusieurs exceptions par bloc catch peuvent désormais être spécifié en
   utilisant le caractère barre verticale (<literal>|</literal>).
   Ceci est utile quand différentes exception sont gérées de façon identique.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // du code
} catch (FirstException | SecondException $e) {
    // gère les exceptions first et second
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Support des clés dans <function>list</function></title>

  <para>
   Il est désormais possible de spécifier des clés dans <function>list</function>,
   ou sa nouvelle syntaxe abréviée <literal>[]</literal>. Ceci permet la
   déconstruction des tableaux qui ont des clés non entières ou non séquentielles.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// list() style
list("id" => $id1, "name" => $name1) = $data[0];

// [] style
["id" => $id1, "name" => $name1] = $data[0];

// list() style
foreach ($data as list("id" => $id, "name" => $name)) {
    // logique ici avec $id et $name
}

// [] style
foreach ($data as ["id" => $id, "name" => $name]) {
    // logique ici avec $id et $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Support pour les positions négatives des &string;</title>

  <para>
   Le support des positions négatives des &string; a été ajouté aux
   <link linkend="book.strings">fonctions de manipulation de &string;</link>
   qui accepte une position, ainsi qu'a
   <link linkend="language.types.string.substr">l'indexation de &string;</link>
   avec <literal>[]</literal> ou <literal>{}</literal>. Dans de tel cas, une
   position négative est interprété comme une position en partant de la fin
   de la &string;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   Les positions négative des &string; et &array;x sont aussi supportées
   avec la syntaxe simple d'analyse dans les &string;.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "Le dernier caractère de '$string' est '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Le dernier caractère de 'bar' est 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Support pour AEAD dans ext/openssl</title>

  <para>
   Support pour AEAD (modes GCM et CCM) a été ajouté en étendant les fonctions
   <function>openssl_encrypt</function> et
   <function>openssl_decrypt</function> avec des paramètres additionels.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>Convertir des callables en <classname>Closure</classname>s avec <methodname>Closure::fromCallable</methodname></title>

  <para>
   Une nouvelle méthode statique a été indroduite à la classe
   <classname>Closure</classname> pour permettre des <type>callable</type>s
   d'être facilement convertit en objet <classname>Closure</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Gestion des signaux asynchrones</title>

  <para>
   Une nouvelle fonction appellé <function>pcntl_async_signals</function>
   a été introduite pour permettre la gestion des signaux asynchrones sans
   utiliser les ticks (ce qui introduisait beaucoup de surcoût).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // activer les signaux asynchrones

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Support des push serveur HTTP/2 dans ext/curl</title>

  <para>
   Suport pour les push serveur a été ajouté à l'extension CURL (nécessite
   la version 7.46 ou ultérieur). Ceci peut être exploité à travers la
   fonction <function>curl_multi_setopt</function> avec la nouvelle
   constante <constant>CURLMOPT_PUSHFUNCTION</constant>. Les constantes
   <constant>CURL_PUSH_OK</constant> et <constant>CURL_PUSH_DENY</constant>
   ont aussi été ajouté pour que l'exécution de la fonction de rappel du
   push serveur peuvent être approuvé ou refusé.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>Options du Contexte de Flux (Stream Context Options)</title>

  <para>
   L'option du contexte de flux <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link>
   a été ajouté.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
