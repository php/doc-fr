<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6d2f72b0f2d7fbda2e3aa79ab58f190b4cdac867 Maintainer: jbnahan Status: ready -->
<!-- Reviewed: no Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.other">
 <title>Autres modifications rétro-incompatibles</title>

 <sect3 xml:id="migration70.incompatible.other.new-by-ref">
  <title>Les nouveaux objets ne peuvent pas être attribués par référence</title>

  <para>
   Le résultat de l'instruction &new; ne peut plus être assigné à une variable 
   par référence :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {}
$c =& new C;
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Deprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Parse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.classes">
  <title>Noms de classe, d'interface et de traits invalides</title>

  <para>
   Les noms suivants ne peuvent pas être utilisés pour nommer des classes, 
   des interfaces ou des traits :
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>&null;</simpara>
   </listitem>
   <listitem>
    <simpara>&true;</simpara>
   </listitem>
   <listitem>
    <simpara>&false;</simpara>
   </listitem>
  </itemizedlist>

  <para>
   En outre, les noms suivants ne doivent pas être utilisés. Bien qu'ils ne 
   génèrent pas une erreur dans PHP 7.0, ils sont réservés pour une utilisation 
   future et doivent être considérés comme obsolètes.
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>resource</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>mixed</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>numeric</type></simpara>
   </listitem>
  </itemizedlist>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.php-tags">
  <title>ASP et script PHP Tags supprimés</title>

  <para>
   La prise en charge de l'utilisation des balises ASP et script pour délimiter 
   le code PHP a été supprimée. Les balises affectées sont :
  </para>

  <table>
   <title>Suppression des balises ASP et script</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Balise d'ouverture</entry>
      <entry>Balise de fermeture</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>&lt;%</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;%=</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;script language="php"&gt;</code></entry>
      <entry><code>&lt;/script&gt;</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.incompatible-this">
  <title>Appels d'un contexte incompatible supprimés</title>

  <para>
   <link linkend="migration56.deprecated.incompatible-context">Précédemment déconseillé dans PHP 5.6</link>, 
   les appels statiques effectués à une méthode non statique avec un contexte 
   incompatible se traduiront désormais par la méthode appelée ayant une variable 
   <literal>$this</literal> non définie et un avertissement d'obsolescence est émis.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function test() { var_dump($this); }
}

// Note: Does NOT extend A
class B {
    public function callNonStaticMethodOfA() { A::test(); }
}

(new B)->callNonStaticMethodOfA();
?>
]]>
   </programlisting>
   &example.outputs.56;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8
object(B)#1 (0) {
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically in /tmp/test.php on line 8

Notice: Undefined variable: this in /tmp/test.php on line 3
NULL
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.yield">
  <title>&yield; est maintenant un opérateur associatif à droite</title>

  <para>
   La construction &yield; ne nécessite plus de parenthèses et a été remplacée 
   par un opérateur associatif droit avec la priorité entre <literal>print</literal> 
   et <literal>=&gt;</literal>. Cela peut entraîner un changement de comportement :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo yield -1;
// A été précédemment interprété comme
echo (yield) - 1;
// Et est maitenant interprété comme
echo yield (-1);

yield $foo or die;
// A été précédemment interprété comme
yield ($foo or die);
// Et est maitenant interprété comme
(yield $foo) or die;
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Les parenthèses peuvent être utilisées pour lever l'ambiguïté sur ces cas.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameters">
  <title>Les fonctions ne peuvent pas avoir plusieurs paramètres avec le même nom</title>

  <para>
   Il n'est plus possible de définir deux ou plusieurs paramètres de fonction 
   avec le même nom. Par exemple, la fonction suivante déclenchera un 
   <constant>E_COMPILE_ERROR</constant>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($a, $b, $unused, $unused) {
    //
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameter-modified">
  <title>Fonctions d'inspection des arguments signalent la valeur <emphasis>actuelle</emphasis> du paramètre</title>

  <para>
   <function>func_get_arg</function>, <function>func_get_args</function>, 
   <function>debug_backtrace</function> et les traces d'exception ne signalent 
   plus la valeur d'origine qui a été passée à un paramètre, mais fourniront 
   plutôt la valeur actuelle (qui aurait pu être modifiée).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
1
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
2
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.multiple-default">
  <title>Les instructions Switch ne peuvent pas avoir plusieurs blocs par défaut</title>

  <para>
   Il n'est plus possible de définir deux ou plusieurs blocs par défaut dans 
   une instruction switch. Par exemple, l'instruction switch suivante déclenchera 
   un <constant>E_COMPILE_ERROR</constant> :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch (1) {
    default:
    break;
    default:
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.http-raw-post-data">
  <title><varname>$HTTP_RAW_POST_DATA</varname> a été supprimée</title>

  <para>
   <varname>$HTTP_RAW_POST_DATA</varname> n'est plus disponible. Le flux
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   doit être utilisé à la place.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.ini-comments">
  <title>Les commentaires <literal>#</literal> dans le fichier INI ont été supprimés</title>

  <para>
   La prise en charge des commentaires avec le préfix <literal>#</literal> dans 
   les fichiers INI a été supprimée. <literal>;</literal> (point-virgule) doit être 
   utilisé à la place. Cette modification s'applique aux &php.ini;, ainsi qu'aux 
   fichiers gérés par <function>parse_ini_file</function> et 
   <function>parse_ini_string</function>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.json-to-jsond">
  <title>Extension JSON remplacée par JSOND</title>

  <para>
   L'extension JSON a été remplacée par JSOND, provoquant trois incompatibilités 
   BC mineures. Premièrement, un nombre ne doit pas se terminer par une virgule 
   décimale (c.-à-d. <literal>34.</literal> doit être modifié en <literal>34.0</literal> 
   ou en <literal>34</literal>). Deuxièmement, lors de l'utilisation de la notation 
   scientifique, l'exposant <literal>e</literal> ne doit pas suivre immédiatement un 
   point décimal (c.-à-d. <literal>3.e3</literal> doit être modifié soit en 
   <literal>3.0e3</literal> ou en <literal>3e3</literal>). Enfin, une chaîne vide n'est 
   plus considérée comme du JSON valide.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.internal-function-failure-overflow">
  <title>Défaillance de la fonction interne sur le débordement</title>

  <para>
   Auparavant, les fonctions internes devaient tronquer silencieusement les nombres 
   produits à partir de contraintes de type float à entier lorsque le nombre était 
   trop volumineux pour représenter un entier. Désormais, un E_WARNING sera émis 
   et &null; sera renvoyé.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.fixes-custom-session-handler">
  <title>Correctifs aux valeurs de retour de gestionnaire de session personnalisé</title>

  <para>
   Toutes les fonctions de prédicat implémentées par des gestionnaires de session 
   personnalisés qui retournent &false; ou <literal>-1</literal> seront des erreurs 
   fatales. Si une valeur de ces fonctions autre qu'un booléen, <literal>-1</literal> 
   ou <literal>0</literal> est retournée, elle échouera et un E_WARNING sera émis.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.sort-order">
  <title>Ordre de tri des éléments égaux</title>
  <para>
   L'algorithme de tri interne a été amélioré, ce qui peut entraîner un ordre de 
   tri différent des éléments, qui se comparent comme égaux auparavant.
  </para>
  <note>
   <para>
    Ne comptez pas sur l'ordre des éléments qui se comparent comme égaux; il pourrait 
    changer à tout moment.
   </para>
  </note>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.break-continue">
  <title>Instructions de coupure et de continuation mal placées</title>
  <para>
   Les instructions <literal>break</literal> et <literal>continue</literal> en dehors 
   d'une boucle ou d'une structure de contrôle <literal>switch</literal> sont 
   maintenant détectées au moment de la compilation au lieu de l'exécution comme 
   avant, et déclenchent un <constant>E_COMPILE_ERROR</constant>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.mhash">
  <title>Mhash n'est plus une extension</title>
  <para>
   L'extension mhash a été entièrement intégrée dans l'extension 
   <link linkend="book.hash">Hash</link>. Par conséquent, il n'est plus possible 
   de détecter le support mhash avec <function>extension_loaded</function>; 
   utiliser <function>function_exists</function> à la place. En outre, mhash n'est 
   plus rapporté par <function>get_loaded_extensions</function> et les 
   fonctionnalités connexes.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.declare-ticks">
  <title>declare(ticks)</title>
  <para>
   La directive <link linkend="control-structures.declare.ticks">declare(ticks)
   </link> ne fuit plus dans des unités de compilation différentes.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
