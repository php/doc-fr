<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: jbnahan Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.integers">
 <title>Modifications apportées à la gestion d'&integer;</title>

 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>Littéraux octaux non valides</title>

  <para>
   Auparavant, les littéraux octaux qui contenaient des nombres non valides 
   étaient tronqués silencieusement (<literal>0128</literal> a été pris comme 
   <literal>012</literal>). Désormais, un littéral octal non valide provoquera 
   une erreur d'analyse.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>Décalage de bits négatif</title>

  <para>
   Les décalages de bits par nombres négatifs vont maintenant lancer une
   <classname>ArithmeticError</classname>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
int(0)
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
    </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>Décalage de bits hors plage</title>

  <para>
   Les décalages de bits (dans les deux sens) au-delà de la largeur de bit d'un 
   &integer; retourneront toujours 0. Auparavant, le comportement de ces 
   décalages était dépendant de l'architecture.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.div-by-zero">
  <title>Changements apportés à la division par zéro</title>

  <para>
   Auparavant, lorsque 0 a été utilisé comme diviseur pour les opérateurs de 
   division (/) ou de modulo (%), un E_WARNING était émis et <constant>false</constant> 
   était retourné. Désormais, l'opérateur de division retourne un float en tant 
   que +INF,-INF ou NAN, comme spécifié par IEEE 754. Le E_WARNING de l'opérateur 
   de modulo a été supprimé et lèvera une exception <classname>DivisionByZeroError</classname>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(3/0);
var_dump(0/0);
var_dump(0%0);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
float(INF)

Warning: Division by zero in %s on line %d
float(NAN)

PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
