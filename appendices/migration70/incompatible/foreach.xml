<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 285e7e31e523ac35abc12bb1d7d60c8a6e42c4c6 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Changements concernant &foreach;</title>

 <para>
  Des changements mineurs ont été faits sur le comportement de
  la structure de contrôle &foreach;, principalement sur la gestion
  du pointeur interne de tableau et la modification du tableau étant parcouru.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; ne modifie plus le pointeur interne de tableau</title>

  <para>
   Antérieur à PHP 7, le pointeur interne de tableau était modifié pendant
   qu'un tableau était parcouru avec &foreach;. Cela n'est plus le cas,
   comme le montre l'exemple suivant :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; par valeur travaille sur une copie du tableau</title>

  <para>
   Lors de l'utilisation du mode par défaut (par valeur), &foreach;
   travaille maintenant sur une copie du tableau en cours parcouru
   plutôt que sur le tableau lui-même. Cela signifie que les changements
   réalisés sur le tableau pendant son parcours n'affecteront pas les
   valeurs qui sont parcourues.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>Le comportement du parcours de &foreach; par référence a été amélioré</title>

  <para>
   Lors du parcours d'un tableau par référence, &foreach; identifie
   mieux les changements faits au tableau pendant son parcours. Par exemple,
   si des valeurs sont ajoutées à un tableau pendant son parcours, alors ces
   nouvelles valeurs seront également parcourues :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Parcours d'objets non-<classname>Traversable</classname></title>

  <para>
   Le parcours d'un objet non-<classname>Traversable</classname> est
   maintenant identique au parcours d'un tableau par référence.
   En conséquence l'<link linkend="migration70.incompatible.foreach.by-ref">amélioration
   du comportement lors de la modification d'un tableau pendant son parcours</link>
   est également appliquée lorsque des propriétés sont ajoutées
   ou supprimées d'un objet.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
