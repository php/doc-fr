<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8d1a5d2d15df15cc5cbc7f96cdc083b8fe49366e Maintainer: girgias Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles fonctionnalités</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>Cœur de PHP</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>Propriétés typées</title>

   <para>
    Les propriétés des classes supportent désormais la déclaration du type.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    L'exemple ci-dessus s'assurera que <literal>$user->id</literal> ne peut
    se voir attribuer que des valeurs d'&integer; et
    <literal>$user->name</literal> ne peut se voir attribuer que des valeurs
    &string;.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>Fonctions flèches</title>

   <para>
    Les <link linkend="functions.arrow">fonctions flèches</link> fournissent
    une syntaxe courte pour définir des fonctions qui lient la portée par
    valeur implicitement.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>Type de retour covariant et type d'argument contravariant limité</title>

   <para>
    Le code suivant va désormais fonctionner :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    Le support de variance totale est seulement disponible quand l'autoloading
    est utilisé. Dans un fichier unique seules des références de types non
    cycliques sont possibles, car toutes les classes doivent être disponibles
    avant qu'elles soient référencées.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Opérateur d'assignement de fusion Null</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// is roughly equivalent to
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>Déballage dans les tableaux</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>Séparateur numérique litéral</title>

   <para>
    Les nombres littéraux peuvent contenir un caractère de soulignement entre
    les chiffres.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binary
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 
  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>Références faibles</title>

   <para>
    Les <link linkend="class.weakreference">références faibles</link> permettent au développeur de retenir une référence
    à un objet qui n'empêche pas l'objet d'être détruit.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>Autoriser des Exceptions depuis __toString()</title>

   <para>
    Lancer des exceptions depuis <link linkend="object.tostring">__toString()</link>
    est désormais permis. Précédemment, ceci résultait en une erreur fatale.
    Les erreurs fatales récupérables dans les conversions de &string; ont été
    converties en exceptions <classname>Error</classname>.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>
  
  <para>
   <classname>CURLFile</classname> supporte désormais les enveloppes de flux
   en plus des noms de fichiers bruts, si l'extension a été compilée avec libcurl
   &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filtre</title>
  
  <para>
   Le filtre <constant>FILTER_VALIDATE_FLOAT</constant> supporte désormais les
   options <literal>min_range</literal> et <literal>max_range</literal>,
   avec la même sémantique que <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI est une nouvelle extension, qui fournit une manière simple d'appeler
   les fonctions natives, un accès natif aux variables, et la création/l'accès à
   des structures de données définies dans des bibliothèques C.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   Ajout du filtre d'image <constant>IMG_FILTER_SCATTER</constant>
   pour appliquer un filtre à dispersions aux images.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Ajout du hash <literal>crc32c</literal> utilisant le polynôme de Castagnoli.
   Cette variante de CRC32 est utilisée par les systèmes de stockage, tels que
   iSCSI, SCTP, Btrfs et ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Chaînes multioctets</title>

  <para>
   Ajout de la fonction <function>mb_str_split</function>, qui fournit la même
   fonctionnalité que <function>str_split</function>, mais opère sur des points
   de code au lieu d'octets.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   <link linkend="opcache.preloading">Le support pour le préchargement de code</link> a été ajouté.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>Expressions Régulières (Compatible Perl)</title>

  <para>
   Les fonctions <function>preg_replace_callback</function> et
   <function>preg_replace_callback_array</function> acceptent désormais un
   argument <parameter>flags</parameter> additionnel, avec le support des
   drapeaux <constant>PREG_OFFSET_CAPTURE</constant> et
   <constant>PREG_UNMATCHED_AS_NULL</constant>.
   Ceci influence le format du &array; de matchs passé à la fonction de rappel.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   Le nom d'utilisateur et le mot de passe peuvent désormais être spécifiés en tant
   que partie du DSN PDO pour les pilotes mysql, mssql, sybase, dblib, firebird
   et oci. Précédemment, ceci était seulement supporté pour le pilote pgsql.
   Si un nom d'utilisateur/mot de passe est défini à la fois dans le
   constructeur et le DSN, le constructeur prend précédence.
  </para>
  <para>
   Il est désormais possible d'échapper les points d'interrogations dans les
   requêtes SQL pour éviter qu'ils ne soient interprétés comme paramètre fictif.
   Écrire <literal>??</literal> permet d'envoyer un seul point d'interrogation
   à la base de données et, par exemple, utiliser l'opérateur PostgreSQL JSON
   pour savoir si une clef existe (<literal>?</literal>).
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> est désormais disponible.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   permet de vérifier si la déclaration est en lecture seule, c.à.d. si elle
   ne modifie pas la base de données.
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   active l'utilisation des codes de résultats étendus dans
   <function>PDO::errorInfo</function> et
   <function>PDOStatement::errorInfo</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Ajout de <methodname>SQLite3::lastExtendedErrorCode</methodname>
   pour récupérer le dernier code étendu du résultat.
  </para>
  <para>
   Ajout de <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   qui fera retourner des codes de résultats étendus par
   <methodname>SQLite3::lastErrorCode</methodname>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Standard</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() avec un tableau de noms de tag</title>
   <para>
    <function>strip_tags</function> accepte désormais un &array; de tags
    autorisés : au lieu de
    <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal> il est désormais
    possible d'écrire <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Linéarisation personnalisée d'objets</title>
   <para>
    Un nouveau mécanisme de linéarisation personnalisée d'objets a été ajouté,
    qui utilise deux nouvelles méthodes magiques :
    <literal>__serialize</literal> et <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Retourne un tableau contenant tout l'état nécessaire de l'objet.
public function __serialize(): array;

// Restaure l'état d'un objet depuis le tableau de données fourni.
public function __unserialize(array $data): void;
?>
]]>
     </programlisting>
    </informalexample>
    Le nouveau mécanisme de linéarisation succèdera à l'interface
    <interfacename>Serializable</interfacename>, qui sera rendu
    obsolète dans le futur.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Les fonctions array merge sans arguments</title>
   <para>
    <function>array_merge</function> et <function>array_merge_recursive</function>
    peuvent désormais être appelées sans arguments, dans ce cas-là elles
    retourneront un &array; vide. Ceci est utile en conjonction avec l'opérateur
    de décomposition, par exemple <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title>La fonction <function>proc_open</function></title>
   <para>
    <function>proc_open</function> accepte désormais un &array; au lieu d'une
    &string; pour la commande. Dans ce cas-là, le processus est ouvert directement
    (sans passer à travers un shell) et PHP s'occupera d'échapper les arguments
    lorsque nécessaire.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> supporte désormais les descripteurs
    <literal>redirect</literal> et <literal>null</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Like 2>&1 on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Like 2>/dev/null or 2>nul on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) sans libargon</title>
   <para>
    <function>password_hash</function> a désormais les implémentations de
    argon2i et argon2id de l'extension sodium quand PHP est compilé sans libargon.
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
