<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f25c0ef9ed425cad58189d915291e5d7c9bf964c Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration84.new-features">
 <title>Nouvelles fonctionnalités</title>

 <!-- TODO: Core features for 8.4 -->
 <sect2 xml:id="migration84.new-features.core">
  <title>PHP Core</title>

  <!-- RFC: https://wiki.php.net/rfc/property-hooks -->
  <sect3 xml:id="migration84.new-features.core.property-hooks">
   <title>Propriété avec hooks</title>

   <simpara>
    TODO
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
/*
examples
*/

]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/asymmetric-visibility-v2 -->
  <sect3 xml:id="migration84.new-features.core.asymmetric-property-visibility">
   <title>Visibilité asymétrique des propriétés</title>

   <simpara>
    Les propriétés d'objet peuvent désormais avoir leur visibilité <literal>set</literal> contrôlée séparément de la visibilité <literal>get</literal>.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public protected(set) string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }
}
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <sect3 xml:id="migration84.new-features.core.lazy-objects">
   <title>Objets paresseux</title>
   <simpara>
    Il est désormais possible de créer des objets dont l'initialisation est différée jusqu'à
    leur accès. Les bibliothèques et frameworks peuvent tirer parti de ces objets paresseux
    pour différer la récupération de données ou de dépendances nécessaires à l'initialisation.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(private int $data)
    {
    }

    // ...
}

$initializer = static function (Example $fantôme): void {
    // Récupérer les données ou dépendances
    $data = ...;
    // Initialiser
    $fantôme->__construct($data);
};

$reflector = new ReflectionClass(Example::class);
$object = $reflector->newLazyGhost($initializer);
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecated_attribute -->
  <sect3 xml:id="migration84.new-features.core.deprecated-attribute">
   <title>L'attribut <code>#[\Deprecated]</code></title>

   <simpara>
    Le nouvel attribut <classname>Deprecated</classname> peut être utilisé pour marquer des fonctions, méthodes,
    et constantes de classe comme obsolètes. Le comportement de cette fonctionnalité obsolète utilisant cet
    attribut correspond à celui du mécanisme de dépréciation déjà existant pour les fonctionnalités fournies
    par PHP lui-même. La seule exception est que le code d'erreur émis est
    <constant>E_USER_DEPRECATED</constant> au lieu de <constant>E_DEPRECATED</constant>.
   </simpara>

   <simpara>
    Les dépréciations existantes dans les fonctionnalités fournies par PHP lui-même ont été mises à jour pour utiliser
    cet attribut, améliorant les messages d'erreur émis en incluant une brève explication.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/rfc1867-non-post -->
  <sect3 xml:id="migration84.new-features.core.rfc1867">
   <title>Interprétation des requêtes RFC1867 (multipart) dans les requêtes HTTP non-POST</title>

   <!-- TODO: expand? -->
   <simpara>
    Ajout de la fonction <function>request_parse_body</function> qui permet d'interpréter
    les requêtes RFC1867 (multipart) dans les requêtes HTTP non-POST.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/new_without_parentheses -->
  <sect3 xml:id="migration84.new-features.core.new-chaining">
   <title>Enchaînement d'expressions <literal>&new;</literal> sans parenthèses</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Nouvelles expressions avec des arguments de constructeur sont maintenant déréférençables, ce qui signifie
    qu'elles permettent de chaîner les appels de méthode, les accès aux propriétés, etc. sans encadrer
    l'expression entre parenthèses.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-weakref">
   <title>Informations de débogage améliorées pour <classname>WeakReference</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Avoir les informations de débogage pour <classname>WeakReference</classname> affichera maintenant
    également l'objet qu'il référence, ou &null; si la référence n'est
    plus valide.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-closure">
   <title>Informations de débogage améliorées pour <classname>Closure</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    La sortie de <methodname>Closure::__debugInfo</methodname> inclut maintenant
    le nom, le fichier et la ligne de la <classname>Closure</classname>.
   </simpara>
  </sect3>

  <!-- Is this really a feature? Should this be moved to other changes? -->
  <sect3 xml:id="migration84.new-features.core.multiple-namespaces-symbols">
   <title>Définition de symboles identiques dans différents blocs d'espace de noms</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Quitter un espace de noms efface désormais les symboles vus.
    Cela permet d'utiliser un symbole dans un bloc d'espace de noms, même si un bloc d'espace de noms précédent
    a déclaré un symbole avec le même nom.
    <!-- See Zend/tests/use_function/ns_end_resets_seen_symbols_1.phpt. -->
   </simpara>
  </sect3>

 </sect2>

 <sect2 xml:id="migration84.new-features.curl">
  <title>cURL</title>

  <simpara>
   <function>curl_version</function> renvoie une valeur
   <literal>feature_list</literal> supplémentaire, qui est un tableau associatif
   de toutes les fonctionnalités cURL connues, et si elles sont supportées (&true;)
   ou pas (&false;).
  </simpara>

  <simpara>
   Ajout des constantes <constant>CURL_HTTP_VERSION_3</constant> et
   <constant>CURL_HTTP_VERSION_3ONLY</constant> (disponibles
   depuis libcurl 7.66 et 7.88) comme options disponibles pour
   <constant>CURLOPT_HTTP_VERSION</constant>.
  </simpara>

  <simpara>
   Ajout de <constant>CURLOPT_PREREQFUNCTION</constant> comme option cURL qui
   accepte un <type>callable</type> à appeler après la connexion, mais avant
   l'envoi de la requête.
   Ce callable doit retourner <constant>CURL_PREREQFUNC_OK</constant> ou
   <constant>CURL_PREREQFUNC_ABORT</constant> pour autoriser ou annuler la requête.
  </simpara>

  <simpara>
   Ajout de <constant>CURLOPT_SERVER_RESPONSE_TIMEOUT</constant>,
   qui était précédemment connu sous le nom de <constant>CURLOPT_FTP_RESPONSE_TIMEOUT</constant>.
   Les deux constantes ont la même valeur.
  </simpara>

  <para>
   Ajout de <constant>CURLOPT_DEBUGFUNCTION</constant> comme option cURL qui
   accepte un <type>callable</type> qui est appelé pendant le cycle de vie de la requête
   avec l'objet <classname>CurlHandle</classname>,
   un entier contenant le type de message de débogage,
   et une chaîne contenant le message de débogage.
   Le type de message de débogage est l'un des constantes suivantes:
   <simplelist>
    <member><constant>CURLINFO_TEXT</constant></member>
    <member><constant>CURLINFO_HEADER_IN</constant></member>
    <member><constant>CURLINFO_HEADER_OUT</constant></member>
    <member><constant>CURLINFO_DATA_IN</constant></member>
    <member><constant>CURLINFO_DATA_OUT</constant></member>
    <member><constant>CURLINFO_SSL_DATA_IN</constant></member>
    <member><constant>CURLINFO_SSL_DATA_OUT</constant></member>
   </simplelist>
   Une fois que cette option est définie, <constant>CURLINFO_HEADER_OUT</constant>
   ne doit pas être défini car elle utilise la même fonctionnalité de libcurl.
  </para>

  <simpara>
   <function>curl_getinfo</function> renvoie maintenant une clé
   <literal>posttransfer_time_us</literal>, contenant le nombre de microsecondes
   depuis le début jusqu'à ce que le dernier octet soit envoyé.
   Lorsqu'une redirection est suivie, le temps de chaque requête est ajouté ensemble.
   Cette valeur peut également être récupérée en passant
   <constant>CURLINFO_POSTTRANSFER_TIME_T</constant> au paramètre
   <parameter>option</parameter> de <function>curl_getinfo</function>.
   Cela requiert libcurl 8.10.0 ou ultérieur.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.dom">
  <title>DOM</title>

  <para>
   Ajout de <methodname>DOMNode::compareDocumentPosition</methodname>
   avec ses constantes associées:
   <simplelist>
    <member><constant>DOMNode::DOCUMENT_POSITION_DISCONNECTED</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_PRECEDING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_FOLLOWING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINS</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINED_BY</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</constant></member>
   </simplelist>
  </para>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Il est maintenant possible de passer n'importe quel callable à
   <methodname>DOMXPath::registerPhpFunctions</methodname>.
   <!-- TODO Mention DOMXPath::registerPHPFunctionNS ? -->
  </simpara>
 </sect2>

 <!-- TODO: Should this be moved to "other changes" in the SAPI section? - Girgias -->
 <sect2 xml:id="migration84.new-features.fpm">
  <title>FPM</title>

  <simpara>
   Laver les en-têtes sans corps réussira désormais.
   <!-- See GH-12785. -->
  </simpara>

  <simpara>
   La page de status a un nouveau champ pour afficher un pic de mémoire.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.intl">
  <title>Intl</title>

  <simpara>
   Ajout de <constant>NumberFormatter::ROUND_HALFODD</constant> pour
   compléter la fonctionnalité existante de <constant>NumberFormatter::ROUND_HALFEVEN</constant>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.openssl">
  <title>OpenSSL</title>

  <simpara>
   Ajout du support des clés basées sur Curve25519 + Curve448.
   Spécifiquement, les champs x25519, ed25519, x448 et ed448 sont supportés dans
   <function>openssl_pkey_new</function>,
   <function>openssl_pkey_get_details</function>,
   <function>openssl_sign</function>, et
   <function>openssl_verify</function> ont été étendus pour supporter ces clés.
  </simpara>

  <simpara>
   Implementation de PASSWORD_ARGON2 hashage de mot de passe.
   Requiert OpenSSL 3.2 et une construction NTS.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pcre">
  <title>PCRE</title>

  <simpara>
   La version de pcre2lib incluse a été mise à jour en version 10.44.
   Par conséquent, le support JIT LoongArch a été ajouté, les espaces
   sont maintenant autorisés entre les accolades dans les éléments compatibles avec Perl, et
   les assertions de lookbehind de longueur variable sont maintenant supportées.
  </simpara>

  <simpara>
   Avec pcre2lib version 10.44, la longueur maximale des groupes de capture nommés
   a changé de <literal>32</literal> à <literal>128</literal>.
  </simpara>

  <simpara>
   Ajout du support pour le modificateur <literal>r</literal> (PCRE2_EXTRA_CASELESS_RESTRICT),
   ainsi que du modificateur de mode <literal>(?r)</literal>.
   Lorsqu'il est activé avec le modificateur insensible à la casse (<literal>i</literal>),
   l'expression verrouille le mélange de caractères ASCII et non-ASCII.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo">
  <title>PDO</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_subclasses -->
  <simpara>
   Ajout du support pour les sous-classes spécifiques aux pilotes.
   Cette RFC ajoute des sous-classes pour PDO afin de mieux supporter
   les fonctionnalités spécifiques à la base de données.
   Ces nouvelles classes peuvent être instanciées soit en appelant la méthode
   <methodname>PDO::connect</methodname> ou en instanciant directement une instance
   de la sous-classe spécifique au pilote.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Ajout du support pour les analyseurs SQL spécifiques aux pilotes.
   L'analyseur par défaut supporte:
   <simplelist>
    <member>
     les littéraux simples et doubles, avec le doublement comme mécanisme d'échappement
    </member>
    <member>
     les commentaires dans le style C non imbriqués et à deux tirets
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-mysql">
  <title>PDO_MYSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Ajout d'un analyseur personnalisé prenant en charge :
   <simplelist>
    <member>
     les littéraux simples et doubles, avec le doublement comme mécanisme d'échappement
    </member>
    <member>
     les identifiants littéraux avec un accent grave et le doublement comme mécanisme d'échappement
    </member>
    <member>
     deux tirets suivis d'au moins 1 espace, les commentaires C-style non imbriqués,
     et les commentaires de type hash
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Ajout d'un analyseur personnalisé prenant en charge :
   <simplelist>
    <member>
     les littéraux simples et doubles, avec le doublement comme mécanisme d'échappement
    </member>
    <member>
     l'"échappement" des littéraux de chaîne de style C (<literal>E'string'</literal>)
    </member>
    <member>
     les littéraux de chaîne de style cité en dollars
    </member>
    <member>
     deux tirets et les commentaires de style C (non imbriqués)
    </member>
    <member>
     le support de <literal>??</literal> comme séquence d'échappement pour
     l'opérateur <literal>?</literal>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-sqlite">
  <title>PDO_SQLITE</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Ajout d'un analyseur personnalisé prenant en charge :
   <simplelist>
    <member>
     les littéraux simples, doubles et accent grave, avec le doublement comme
     mécanisme d'échappement
    </member>
    <member>
     les crochets citant les identifiants
    </member>
    <member>
     deux tirets et le C-style commentaires (non imbriqués)
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.phar">
  <title>Phar</title>

  <simpara>
   Ajout du support de l'extension de timestamp Unix pour les archives Zip.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.readfile">
  <title>Readfile</title>

  <simpara>
   Ajout de la possibilité de changer le chemin de <literal>.php_history</literal> via
   la variable d'environnement <envar>PHP_HISTFILE</envar>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.reflection">
  <title>Reflection</title>

  <simpara>
   <classname>ReflectionAttribute</classname> contient désormais une
   propriété <property>name</property> pour améliorer l'expérience de débogage.
  </simpara>

  <simpara>
   <methodname>ReflectionClassConstant::__toString</methodname> et
   <methodname>ReflectionProperty::__toString</methodname> renvoie désormais
   les commentaires de documentation attachés.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <para>
   De multiples nouvelles méthodes et constantes liées à la fonctionnalité des objets paresseux
   ont été ajoutées :

   <simplelist>
    <member>
     <methodname>ReflectionClass::newLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::newLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::isUninitializedLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::initializeLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::getLazyInitializer</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::skipLazyInitialization</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::setRawValueWithoutLazyInitialization</methodname>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_DESTRUCTOR</constant>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.soap">
  <title>SOAP</title>

  <simpara>
   Ajout du support pour la notation clark pour les espaces de noms dans la carte de classes.
   Il est désormais possible de spécifier des entrées dans une carte de classes avec la notation clark
   pour résoudre un type avec un espace de noms spécifique à une classe spécifique.
   Par exemple : <code>'{http://example.com}foo' => 'FooClass'</code>.
  </simpara>

  <simpara>
   Les intances de <interfacename>DateTimeInterface</interfacename> qui sont
   passées à <literal>xsd:datetime</literal> ou des éléments similaires sont maintenant
   sérialisées en tant que telles au lieu d'être sérialisées en tant que chaîne vide.
  </simpara>

  <simpara>
   La persistence de sessions marche maintenant avec un module de session partagé.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.standard">
  <title>Standard</title>

  <!-- RFC: https://wiki.php.net/rfc/correctly_name_the_rounding_mode_and_make_it_an_enum -->
  <simpara>
   <!-- Should this use <enumname> -->
   Ajout d'une nouvelle énumération <classname>RoundingMode</classname> avec un nom plus clair
   et une meilleure découvrabilité par rapport aux constantes
   <constant>PHP_ROUND_<replaceable>*</replaceable></constant>.
   De plus, quatre nouveaux modes d'arrondi ont été ajoutés qui ne sont disponibles que via
   la nouvelle énumération <classname>RoundingMode</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.xsl">
  <title>XSL</title>

  <simpara>
   Il est désormais possible d'utiliser des paramètres qui contiennent à la fois des guillemets
   simples et doubles.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Il est maintenant possible de passer n'importe quel callable à
   <methodname>XSLTProcessor::registerPhpFunctions</methodname>.
   <!-- TODO Mention XSLTProcessor::registerPHPFunctionNS ? -->
  </simpara>

  <simpara>
   Ajout de <property>XSLTProcessor::$maxTemplateDepth</property> et
   <property>XSLTProcessor::$maxTemplateVars</property>
   pour contrôler la profondeur de récursion de l'évaluation du modèle XSL.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.zip">
  <title>Zip</title>

  <simpara>
   Ajout de la constante <constant>ZipArchive::ER_TRUNCATED_ZIP</constant>,
   qui a été ajoutée dans libzip 1.11.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
