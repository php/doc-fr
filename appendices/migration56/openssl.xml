<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 73fae4ee51b644b72028e610abefefced57c18ad Maintainer: jbnahan Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->
<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Changement pour OpenSSL dans PHP 5.6.x</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Les wrappers de flux vérifient désormais les certificats d'homologue et les noms d'hôte par défaut lors de l'utilisation de SSL/TLS</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Empreintes digitales de certificat</title>

  <para>
   Le support a été ajouté pour extraire et vérifier les empreintes digitales des 
   certificats. <function>openssl_x509_fingerprint</function> a été ajouté pour 
   extraire une empreinte digitale d'un certificat X.509 et deux 
   <link linkend="context.ssl">options de contexte</link> de flux SSL ont été 
   ajoutées: <literal>capture_peer_cert</literal> pour capturer le certificat X.509 
   de l'homologue et <literal>peer_fingerprint</literal> pour certifier que le 
   certificat de l'homologue doit correspondre à l'empreinte digitale donnée.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Chiffrements par défaut mis à jour</title>

  <para>
   Les chiffrements par défaut utilisés par PHP ont été mis à jour vers une liste 
   plus sécurisée basée sur les 
   <link xlink:href="&url.openssl.ciphers.mozilla;">recommandations de chiffrement de Mozilla</link>, 
   avec deux exclusions supplémentaires: chiffrements Diffie-Hellman anonymes et RC4.
  </para>

  <para>
   Cette liste est accessible via la nouvelle constante 
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant> et peut être remplacée 
   (comme dans les versions précédentes de PHP) en définissant l'option de contexte 
   <link linkend="context.ssl.ciphers"><parameter>chiffrements</parameter></link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Compression désactivée par défaut</title>

  <para>
   La compression SSL/TLS a été désactivée par défaut pour atténuer l'attaque CRIME. 
   PHP 5.4.13 a ajouté une option de contexte 
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link> 
   pour permettre à la compression d'être désactivée: elle est maintenant définie 
   à &true; (c'est-à-dire que la compression est désactivée) par défaut.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Autoriser les serveurs à préférer leur ordre de chiffrement</title>

  <para>
   L'option de contexte SSL <parameter>honor_cipher_order</parameter> a été 
   ajoutée pour permettre aux serveurs de flux chiffrés d'atténuer les 
   vulnérabilités de BEAST en préférant les chiffrements du serveur au client.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>Accéder au protocole négocié et au chiffrement</title>

  <para>
   Le protocole et le chiffrement qui ont été négociés pour un flux chiffré 
   peuvent désormais être accédé via <function>stream_get_meta_data</function> 
   ou <function>stream_context_get_options</function> lorsque l'option de 
   contexte SSL <parameter>capture_session_meta</parameter> est définie à &true;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);
 
$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>De nouvelles options pour la confidentialité persistante sur les serveurs de flux chiffrés</title>

  <para>
   Les flux de clients chiffrés prennent déjà en charge la confidentialité persistante, 
   car il est généralement contrôlé par le serveur. Les flux de serveurs chiffrés en PHP 
   à l'aide de certificats capables d'une confidentialité persistante n'ont pas besoin de 
   prendre d'autres mesures pour activer PFS; Toutefois, un certain nombre de nouvelles 
   options de contexte SSL ont été ajoutées pour permettre un plus grand contrôle sur 
   PFS et traiter les problèmes de compatibilité qui peuvent survenir. 
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Cette option permet de sélectionner une courbe spécifique à utiliser avec 
      les chiffrements ECDH. S'il n'est pas spécifié, <literal>prime256v1</literal> 
      sera utilisé.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Chemin d'accès à un fichier contenant des paramètres pour l'échange de 
      clés Diffie-Hellman, tel que celui créé par la commande suivante :
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Si définie à &true;, une nouvelle paire de clés sera créée lors de
      l'utilisation des paramètres Diffie-Hellman, améliorant ainsi 
      la confidentialité persistante.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Si définie à &true;, une nouvelle paire de clés sera toujours générée 
      lors de la négociation des suites de chiffrement ECDH. Cela améliore 
      la confidentialité persistante.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>Sélection de la version SSL/TLS</title>

  <para>
   Il est désormais possible de sélectionner des versions spécifiques de SSL et 
   TLS via l'option de contexte SSL <parameter>crypto_method</parameter> ou en 
   spécifiant un transport spécifique lors de la création d'un wrapper de flux 
   (par exemple, en appelant <function>stream_socket_client</function> ou 
   <function>stream_socket_ serveur</function>).
  </para>

  <para>
   L'option de contexte SSL <parameter>crypto_method</parameter> accepte un masque 
   de bits énumérant les protocoles qui sont autorisés, comme le fait le 
   <parameter>crypto_type</parameter> de <function>stream_socket_enable_crypto</function>.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>Versions de protocole sélectionnées et options correspondantes</title>
   <segtitle>Pprotocole(s)</segtitle>
   <segtitle>Drapeau client</segtitle>
   <segtitle>Drapeau serveur</segtitle>
   <segtitle>Transport</segtitle>
   <seglistitem>
    <seg>Toute version TLS ou SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Toute version TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Nécessitant TLS 1.0 ou mieux lors de l'utilisation de file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Nécessitant TLS 1.1 ou 1.2:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Connexion à l'aide du transport de socket tlsv1.2://.
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title>Ajout de <function>openssl_get_cert_locations</function></title>

  <para>
   La fonction <function>openssl_get_cert_locations</function> a été ajoutée : 
   elle renvoie les emplacements par défaut que PHP recherchera lors de la 
   recherche de paquets CA.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>Support de SPKI</title>

  <para>
   Le support a été ajouté pour générer, extraire et vérifier les clés et les
   défis publics signés (SPKAC). <function>openssl_spki_new</function>, 
   <function>openssl_spki_verify</function>, 
   <function>openssl_spki_export_challenge</function> et 
   <function>openssl_spki_export</function> ont été ajoutées pour créer, vérifier
   la clé publique PEM d'exportation et le défi associé de SPKAC générés
   à partir d'un élément HTML5 <literal>KeyGen</literal>.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Génère un nouveau SPKAC en utilisant la clé privée, &string; de défi et
      l'algorithme de hachage.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Vérifie le SPKAC fourni.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Exportations du défi associé au SPKAC fourni.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac);
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Exporte la clé publique RSA au format PEM du SPAKC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
